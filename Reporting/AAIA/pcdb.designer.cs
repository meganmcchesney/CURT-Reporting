#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reporting.AAIA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pcdb")]
	public partial class pcdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSubcategory(Subcategory instance);
    partial void UpdateSubcategory(Subcategory instance);
    partial void DeleteSubcategory(Subcategory instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertPartTerminology(PartTerminology instance);
    partial void UpdatePartTerminology(PartTerminology instance);
    partial void DeletePartTerminology(PartTerminology instance);
    partial void InsertCodeMaster(CodeMaster instance);
    partial void UpdateCodeMaster(CodeMaster instance);
    partial void DeleteCodeMaster(CodeMaster instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    #endregion
		
		public pcdbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["pcdbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public pcdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public pcdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public pcdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public pcdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Subcategory> Subcategories
		{
			get
			{
				return this.GetTable<Subcategory>();
			}
		}
		
		public System.Data.Linq.Table<PCDBVersion> PCDBVersions
		{
			get
			{
				return this.GetTable<PCDBVersion>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<PartTerminology> PartTerminologies
		{
			get
			{
				return this.GetTable<PartTerminology>();
			}
		}
		
		public System.Data.Linq.Table<CodeMaster> CodeMasters
		{
			get
			{
				return this.GetTable<CodeMaster>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subcategories")]
	public partial class Subcategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategoryID;
		
		private string _SubCategoryName;
		
		private EntitySet<CodeMaster> _CodeMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnSubCategoryNameChanging(string value);
    partial void OnSubCategoryNameChanged();
    #endregion
		
		public Subcategory()
		{
			this._CodeMasters = new EntitySet<CodeMaster>(new Action<CodeMaster>(this.attach_CodeMasters), new Action<CodeMaster>(this.detach_CodeMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SubCategoryName
		{
			get
			{
				return this._SubCategoryName;
			}
			set
			{
				if ((this._SubCategoryName != value))
				{
					this.OnSubCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryName = value;
					this.SendPropertyChanged("SubCategoryName");
					this.OnSubCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_CodeMaster", Storage="_CodeMasters", ThisKey="SubCategoryID", OtherKey="SubCategoryID")]
		public EntitySet<CodeMaster> CodeMasters
		{
			get
			{
				return this._CodeMasters;
			}
			set
			{
				this._CodeMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = this;
		}
		
		private void detach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Version")]
	public partial class PCDBVersion
	{
		
		private System.DateTime _VersionDate;
		
		public PCDBVersion()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this._VersionDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Positions")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionID;
		
		private string _Position1;
		
		private EntitySet<CodeMaster> _CodeMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnPosition1Changing(string value);
    partial void OnPosition1Changed();
    #endregion
		
		public Position()
		{
			this._CodeMasters = new EntitySet<CodeMaster>(new Action<CodeMaster>(this.attach_CodeMasters), new Action<CodeMaster>(this.detach_CodeMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Position", Storage="_Position1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Position1
		{
			get
			{
				return this._Position1;
			}
			set
			{
				if ((this._Position1 != value))
				{
					this.OnPosition1Changing(value);
					this.SendPropertyChanging();
					this._Position1 = value;
					this.SendPropertyChanged("Position1");
					this.OnPosition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_CodeMaster", Storage="_CodeMasters", ThisKey="PositionID", OtherKey="PositionID")]
		public EntitySet<CodeMaster> CodeMasters
		{
			get
			{
				return this._CodeMasters;
			}
			set
			{
				this._CodeMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parts")]
	public partial class PartTerminology : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PartTerminologyID;
		
		private string _PartTerminologyName;
		
		private System.Nullable<System.DateTime> _RevDate;
		
		private EntitySet<CodeMaster> _CodeMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartTerminologyIDChanging(int value);
    partial void OnPartTerminologyIDChanged();
    partial void OnPartTerminologyNameChanging(string value);
    partial void OnPartTerminologyNameChanged();
    partial void OnRevDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRevDateChanged();
    #endregion
		
		public PartTerminology()
		{
			this._CodeMasters = new EntitySet<CodeMaster>(new Action<CodeMaster>(this.attach_CodeMasters), new Action<CodeMaster>(this.detach_CodeMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartTerminologyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PartTerminologyID
		{
			get
			{
				return this._PartTerminologyID;
			}
			set
			{
				if ((this._PartTerminologyID != value))
				{
					this.OnPartTerminologyIDChanging(value);
					this.SendPropertyChanging();
					this._PartTerminologyID = value;
					this.SendPropertyChanged("PartTerminologyID");
					this.OnPartTerminologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartTerminologyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PartTerminologyName
		{
			get
			{
				return this._PartTerminologyName;
			}
			set
			{
				if ((this._PartTerminologyName != value))
				{
					this.OnPartTerminologyNameChanging(value);
					this.SendPropertyChanging();
					this._PartTerminologyName = value;
					this.SendPropertyChanged("PartTerminologyName");
					this.OnPartTerminologyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RevDate
		{
			get
			{
				return this._RevDate;
			}
			set
			{
				if ((this._RevDate != value))
				{
					this.OnRevDateChanging(value);
					this.SendPropertyChanging();
					this._RevDate = value;
					this.SendPropertyChanged("RevDate");
					this.OnRevDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartTerminology_CodeMaster", Storage="_CodeMasters", ThisKey="PartTerminologyID", OtherKey="PartTerminologyID")]
		internal EntitySet<CodeMaster> CodeMasters
		{
			get
			{
				return this._CodeMasters;
			}
			set
			{
				this._CodeMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.PartTerminology = this;
		}
		
		private void detach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.PartTerminology = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CodeMaster")]
	public partial class CodeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeMasterID;
		
		private int _CategoryID;
		
		private int _SubCategoryID;
		
		private int _PartTerminologyID;
		
		private int _PositionID;
		
		private System.Nullable<System.DateTime> _RevDate;
		
		private EntityRef<PartTerminology> _Part;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<Subcategory> _Subcategory;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeMasterIDChanging(int value);
    partial void OnCodeMasterIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnPartTerminologyIDChanging(int value);
    partial void OnPartTerminologyIDChanged();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnRevDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRevDateChanged();
    #endregion
		
		public CodeMaster()
		{
			this._Part = default(EntityRef<PartTerminology>);
			this._Position = default(EntityRef<Position>);
			this._Subcategory = default(EntityRef<Subcategory>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeMasterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeMasterID
		{
			get
			{
				return this._CodeMasterID;
			}
			set
			{
				if ((this._CodeMasterID != value))
				{
					this.OnCodeMasterIDChanging(value);
					this.SendPropertyChanging();
					this._CodeMasterID = value;
					this.SendPropertyChanged("CodeMasterID");
					this.OnCodeMasterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", DbType="Int NOT NULL")]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					if (this._Subcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartTerminologyID", DbType="Int NOT NULL")]
		public int PartTerminologyID
		{
			get
			{
				return this._PartTerminologyID;
			}
			set
			{
				if ((this._PartTerminologyID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartTerminologyIDChanging(value);
					this.SendPropertyChanging();
					this._PartTerminologyID = value;
					this.SendPropertyChanged("PartTerminologyID");
					this.OnPartTerminologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int NOT NULL")]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RevDate
		{
			get
			{
				return this._RevDate;
			}
			set
			{
				if ((this._RevDate != value))
				{
					this.OnRevDateChanging(value);
					this.SendPropertyChanging();
					this._RevDate = value;
					this.SendPropertyChanged("RevDate");
					this.OnRevDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartTerminology_CodeMaster", Storage="_Part", ThisKey="PartTerminologyID", OtherKey="PartTerminologyID", IsForeignKey=true)]
		public PartTerminology PartTerminology
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				PartTerminology previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.CodeMasters.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.CodeMasters.Add(this);
						this._PartTerminologyID = value.PartTerminologyID;
					}
					else
					{
						this._PartTerminologyID = default(int);
					}
					this.SendPropertyChanged("PartTerminology");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_CodeMaster", Storage="_Position", ThisKey="PositionID", OtherKey="PositionID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.CodeMasters.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.CodeMasters.Add(this);
						this._PositionID = value.PositionID;
					}
					else
					{
						this._PositionID = default(int);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_CodeMaster", Storage="_Subcategory", ThisKey="SubCategoryID", OtherKey="SubCategoryID", IsForeignKey=true)]
		public Subcategory Subcategory
		{
			get
			{
				return this._Subcategory.Entity;
			}
			set
			{
				Subcategory previousValue = this._Subcategory.Entity;
				if (((previousValue != value) 
							|| (this._Subcategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subcategory.Entity = null;
						previousValue.CodeMasters.Remove(this);
					}
					this._Subcategory.Entity = value;
					if ((value != null))
					{
						value.CodeMasters.Add(this);
						this._SubCategoryID = value.SubCategoryID;
					}
					else
					{
						this._SubCategoryID = default(int);
					}
					this.SendPropertyChanged("Subcategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CodeMaster", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CodeMasters.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CodeMasters.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<CodeMaster> _CodeMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._CodeMasters = new EntitySet<CodeMaster>(new Action<CodeMaster>(this.attach_CodeMasters), new Action<CodeMaster>(this.detach_CodeMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CodeMaster", Storage="_CodeMasters", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<CodeMaster> CodeMasters
		{
			get
			{
				return this._CodeMasters;
			}
			set
			{
				this._CodeMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CodeMasters(CodeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
}
#pragma warning restore 1591
