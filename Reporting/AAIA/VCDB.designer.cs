#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reporting.AAIA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="vcdb")]
	public partial class VCDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbbreviation(Abbreviation instance);
    partial void UpdateAbbreviation(Abbreviation instance);
    partial void DeleteAbbreviation(Abbreviation instance);
    partial void InsertYear(Year instance);
    partial void UpdateYear(Year instance);
    partial void DeleteYear(Year instance);
    partial void InsertAspiration(Aspiration instance);
    partial void UpdateAspiration(Aspiration instance);
    partial void DeleteAspiration(Aspiration instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertAttachmentType(AttachmentType instance);
    partial void UpdateAttachmentType(AttachmentType instance);
    partial void DeleteAttachmentType(AttachmentType instance);
    partial void InsertBaseVehicle(BaseVehicle instance);
    partial void UpdateBaseVehicle(BaseVehicle instance);
    partial void DeleteBaseVehicle(BaseVehicle instance);
    partial void InsertBedConfig(BedConfig instance);
    partial void UpdateBedConfig(BedConfig instance);
    partial void DeleteBedConfig(BedConfig instance);
    partial void InsertBedLength(BedLength instance);
    partial void UpdateBedLength(BedLength instance);
    partial void DeleteBedLength(BedLength instance);
    partial void InsertBedType(BedType instance);
    partial void UpdateBedType(BedType instance);
    partial void DeleteBedType(BedType instance);
    partial void InsertBodyNumDoor(BodyNumDoor instance);
    partial void UpdateBodyNumDoor(BodyNumDoor instance);
    partial void DeleteBodyNumDoor(BodyNumDoor instance);
    partial void InsertBodyStyleConfig(BodyStyleConfig instance);
    partial void UpdateBodyStyleConfig(BodyStyleConfig instance);
    partial void DeleteBodyStyleConfig(BodyStyleConfig instance);
    partial void InsertBodyType(BodyType instance);
    partial void UpdateBodyType(BodyType instance);
    partial void DeleteBodyType(BodyType instance);
    partial void InsertBrakeAB(BrakeAB instance);
    partial void UpdateBrakeAB(BrakeAB instance);
    partial void DeleteBrakeAB(BrakeAB instance);
    partial void InsertBrakeConfig(BrakeConfig instance);
    partial void UpdateBrakeConfig(BrakeConfig instance);
    partial void DeleteBrakeConfig(BrakeConfig instance);
    partial void InsertBrakeSystem(BrakeSystem instance);
    partial void UpdateBrakeSystem(BrakeSystem instance);
    partial void DeleteBrakeSystem(BrakeSystem instance);
    partial void InsertBrakeType(BrakeType instance);
    partial void UpdateBrakeType(BrakeType instance);
    partial void DeleteBrakeType(BrakeType instance);
    partial void InsertCylinderHeadType(CylinderHeadType instance);
    partial void UpdateCylinderHeadType(CylinderHeadType instance);
    partial void DeleteCylinderHeadType(CylinderHeadType instance);
    partial void InsertDriveType(DriveType instance);
    partial void UpdateDriveType(DriveType instance);
    partial void DeleteDriveType(DriveType instance);
    partial void InsertElecControlled(ElecControlled instance);
    partial void UpdateElecControlled(ElecControlled instance);
    partial void DeleteElecControlled(ElecControlled instance);
    partial void InsertEngineBase(EngineBase instance);
    partial void UpdateEngineBase(EngineBase instance);
    partial void DeleteEngineBase(EngineBase instance);
    partial void InsertEngineConfig(EngineConfig instance);
    partial void UpdateEngineConfig(EngineConfig instance);
    partial void DeleteEngineConfig(EngineConfig instance);
    partial void InsertEngineDesignation(EngineDesignation instance);
    partial void UpdateEngineDesignation(EngineDesignation instance);
    partial void DeleteEngineDesignation(EngineDesignation instance);
    partial void InsertEngineLegacy(EngineLegacy instance);
    partial void UpdateEngineLegacy(EngineLegacy instance);
    partial void DeleteEngineLegacy(EngineLegacy instance);
    partial void InsertEngineVersion(EngineVersion instance);
    partial void UpdateEngineVersion(EngineVersion instance);
    partial void DeleteEngineVersion(EngineVersion instance);
    partial void InsertEngineVIN(EngineVIN instance);
    partial void UpdateEngineVIN(EngineVIN instance);
    partial void DeleteEngineVIN(EngineVIN instance);
    partial void InsertEnglishPhrase(EnglishPhrase instance);
    partial void UpdateEnglishPhrase(EnglishPhrase instance);
    partial void DeleteEnglishPhrase(EnglishPhrase instance);
    partial void InsertFuelDeliveryConfig(FuelDeliveryConfig instance);
    partial void UpdateFuelDeliveryConfig(FuelDeliveryConfig instance);
    partial void DeleteFuelDeliveryConfig(FuelDeliveryConfig instance);
    partial void InsertFuelDeliverySubType(FuelDeliverySubType instance);
    partial void UpdateFuelDeliverySubType(FuelDeliverySubType instance);
    partial void DeleteFuelDeliverySubType(FuelDeliverySubType instance);
    partial void InsertFuelDeliveryType(FuelDeliveryType instance);
    partial void UpdateFuelDeliveryType(FuelDeliveryType instance);
    partial void DeleteFuelDeliveryType(FuelDeliveryType instance);
    partial void InsertFuelSystemControlType(FuelSystemControlType instance);
    partial void UpdateFuelSystemControlType(FuelSystemControlType instance);
    partial void DeleteFuelSystemControlType(FuelSystemControlType instance);
    partial void InsertFuelSystemDesign(FuelSystemDesign instance);
    partial void UpdateFuelSystemDesign(FuelSystemDesign instance);
    partial void DeleteFuelSystemDesign(FuelSystemDesign instance);
    partial void InsertFuelType(FuelType instance);
    partial void UpdateFuelType(FuelType instance);
    partial void DeleteFuelType(FuelType instance);
    partial void InsertIgnitionSystemType(IgnitionSystemType instance);
    partial void UpdateIgnitionSystemType(IgnitionSystemType instance);
    partial void DeleteIgnitionSystemType(IgnitionSystemType instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertLanguageTranslation(LanguageTranslation instance);
    partial void UpdateLanguageTranslation(LanguageTranslation instance);
    partial void DeleteLanguageTranslation(LanguageTranslation instance);
    partial void InsertLanguageTranslationAttachment(LanguageTranslationAttachment instance);
    partial void UpdateLanguageTranslationAttachment(LanguageTranslationAttachment instance);
    partial void DeleteLanguageTranslationAttachment(LanguageTranslationAttachment instance);
    partial void InsertLegacyVehicle(LegacyVehicle instance);
    partial void UpdateLegacyVehicle(LegacyVehicle instance);
    partial void DeleteLegacyVehicle(LegacyVehicle instance);
    partial void InsertMake(Make instance);
    partial void UpdateMake(Make instance);
    partial void DeleteMake(Make instance);
    partial void InsertMfr(Mfr instance);
    partial void UpdateMfr(Mfr instance);
    partial void DeleteMfr(Mfr instance);
    partial void InsertMfrBodyCode(MfrBodyCode instance);
    partial void UpdateMfrBodyCode(MfrBodyCode instance);
    partial void DeleteMfrBodyCode(MfrBodyCode instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertPublicationStage(PublicationStage instance);
    partial void UpdatePublicationStage(PublicationStage instance);
    partial void DeletePublicationStage(PublicationStage instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertSpringType(SpringType instance);
    partial void UpdateSpringType(SpringType instance);
    partial void DeleteSpringType(SpringType instance);
    partial void InsertSpringTypeConfig(SpringTypeConfig instance);
    partial void UpdateSpringTypeConfig(SpringTypeConfig instance);
    partial void DeleteSpringTypeConfig(SpringTypeConfig instance);
    partial void InsertSteeringConfig(SteeringConfig instance);
    partial void UpdateSteeringConfig(SteeringConfig instance);
    partial void DeleteSteeringConfig(SteeringConfig instance);
    partial void InsertSteeringSystem(SteeringSystem instance);
    partial void UpdateSteeringSystem(SteeringSystem instance);
    partial void DeleteSteeringSystem(SteeringSystem instance);
    partial void InsertSteeringType(SteeringType instance);
    partial void UpdateSteeringType(SteeringType instance);
    partial void DeleteSteeringType(SteeringType instance);
    partial void InsertSubmodel(Submodel instance);
    partial void UpdateSubmodel(Submodel instance);
    partial void DeleteSubmodel(Submodel instance);
    partial void InsertTransmission(Transmission instance);
    partial void UpdateTransmission(Transmission instance);
    partial void DeleteTransmission(Transmission instance);
    partial void InsertTransmissionBase(TransmissionBase instance);
    partial void UpdateTransmissionBase(TransmissionBase instance);
    partial void DeleteTransmissionBase(TransmissionBase instance);
    partial void InsertTransmissionControlType(TransmissionControlType instance);
    partial void UpdateTransmissionControlType(TransmissionControlType instance);
    partial void DeleteTransmissionControlType(TransmissionControlType instance);
    partial void InsertTransmissionMfrCode(TransmissionMfrCode instance);
    partial void UpdateTransmissionMfrCode(TransmissionMfrCode instance);
    partial void DeleteTransmissionMfrCode(TransmissionMfrCode instance);
    partial void InsertTransmissionNumSpeed(TransmissionNumSpeed instance);
    partial void UpdateTransmissionNumSpeed(TransmissionNumSpeed instance);
    partial void DeleteTransmissionNumSpeed(TransmissionNumSpeed instance);
    partial void InsertTransmissionType(TransmissionType instance);
    partial void UpdateTransmissionType(TransmissionType instance);
    partial void DeleteTransmissionType(TransmissionType instance);
    partial void InsertValve(Valve instance);
    partial void UpdateValve(Valve instance);
    partial void DeleteValve(Valve instance);
    partial void InsertVehEngCfgToLegacyVehicle(VehEngCfgToLegacyVehicle instance);
    partial void UpdateVehEngCfgToLegacyVehicle(VehEngCfgToLegacyVehicle instance);
    partial void DeleteVehEngCfgToLegacyVehicle(VehEngCfgToLegacyVehicle instance);
    partial void InsertVehicle(Vehicle instance);
    partial void UpdateVehicle(Vehicle instance);
    partial void DeleteVehicle(Vehicle instance);
    partial void InsertVehicleConfig(VehicleConfig instance);
    partial void UpdateVehicleConfig(VehicleConfig instance);
    partial void DeleteVehicleConfig(VehicleConfig instance);
    partial void InsertVehicleToBedConfig(VehicleToBedConfig instance);
    partial void UpdateVehicleToBedConfig(VehicleToBedConfig instance);
    partial void DeleteVehicleToBedConfig(VehicleToBedConfig instance);
    partial void InsertVehicleToBodyStyleConfig(VehicleToBodyStyleConfig instance);
    partial void UpdateVehicleToBodyStyleConfig(VehicleToBodyStyleConfig instance);
    partial void DeleteVehicleToBodyStyleConfig(VehicleToBodyStyleConfig instance);
    partial void InsertVehicleToBrakeConfig(VehicleToBrakeConfig instance);
    partial void UpdateVehicleToBrakeConfig(VehicleToBrakeConfig instance);
    partial void DeleteVehicleToBrakeConfig(VehicleToBrakeConfig instance);
    partial void InsertVehicleToDriveType(VehicleToDriveType instance);
    partial void UpdateVehicleToDriveType(VehicleToDriveType instance);
    partial void DeleteVehicleToDriveType(VehicleToDriveType instance);
    partial void InsertVehicleToEngineConfig(VehicleToEngineConfig instance);
    partial void UpdateVehicleToEngineConfig(VehicleToEngineConfig instance);
    partial void DeleteVehicleToEngineConfig(VehicleToEngineConfig instance);
    partial void InsertVehicleToMfrBodyCode(VehicleToMfrBodyCode instance);
    partial void UpdateVehicleToMfrBodyCode(VehicleToMfrBodyCode instance);
    partial void DeleteVehicleToMfrBodyCode(VehicleToMfrBodyCode instance);
    partial void InsertVehicleToSpringTypeConfig(VehicleToSpringTypeConfig instance);
    partial void UpdateVehicleToSpringTypeConfig(VehicleToSpringTypeConfig instance);
    partial void DeleteVehicleToSpringTypeConfig(VehicleToSpringTypeConfig instance);
    partial void InsertVehicleToSteeringConfig(VehicleToSteeringConfig instance);
    partial void UpdateVehicleToSteeringConfig(VehicleToSteeringConfig instance);
    partial void DeleteVehicleToSteeringConfig(VehicleToSteeringConfig instance);
    partial void InsertVehicleToTransmission(VehicleToTransmission instance);
    partial void UpdateVehicleToTransmission(VehicleToTransmission instance);
    partial void DeleteVehicleToTransmission(VehicleToTransmission instance);
    partial void InsertVehicleToWheelbase(VehicleToWheelbase instance);
    partial void UpdateVehicleToWheelbase(VehicleToWheelbase instance);
    partial void DeleteVehicleToWheelbase(VehicleToWheelbase instance);
    partial void InsertVehicleType(VehicleType instance);
    partial void UpdateVehicleType(VehicleType instance);
    partial void DeleteVehicleType(VehicleType instance);
    partial void InsertWheelBase(WheelBase instance);
    partial void UpdateWheelBase(WheelBase instance);
    partial void DeleteWheelBase(WheelBase instance);
    #endregion
		
		public VCDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["vcdbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VCDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VCDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VCDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VCDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abbreviation> Abbreviations
		{
			get
			{
				return this.GetTable<Abbreviation>();
			}
		}
		
		public System.Data.Linq.Table<Year> Years
		{
			get
			{
				return this.GetTable<Year>();
			}
		}
		
		public System.Data.Linq.Table<Aspiration> Aspirations
		{
			get
			{
				return this.GetTable<Aspiration>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<AttachmentType> AttachmentTypes
		{
			get
			{
				return this.GetTable<AttachmentType>();
			}
		}
		
		public System.Data.Linq.Table<BaseVehicle> BaseVehicles
		{
			get
			{
				return this.GetTable<BaseVehicle>();
			}
		}
		
		public System.Data.Linq.Table<BedConfig> BedConfigs
		{
			get
			{
				return this.GetTable<BedConfig>();
			}
		}
		
		public System.Data.Linq.Table<BedLength> BedLengths
		{
			get
			{
				return this.GetTable<BedLength>();
			}
		}
		
		public System.Data.Linq.Table<BedType> BedTypes
		{
			get
			{
				return this.GetTable<BedType>();
			}
		}
		
		public System.Data.Linq.Table<BodyNumDoor> BodyNumDoors
		{
			get
			{
				return this.GetTable<BodyNumDoor>();
			}
		}
		
		public System.Data.Linq.Table<BodyStyleConfig> BodyStyleConfigs
		{
			get
			{
				return this.GetTable<BodyStyleConfig>();
			}
		}
		
		public System.Data.Linq.Table<BodyType> BodyTypes
		{
			get
			{
				return this.GetTable<BodyType>();
			}
		}
		
		public System.Data.Linq.Table<BrakeAB> BrakeABs
		{
			get
			{
				return this.GetTable<BrakeAB>();
			}
		}
		
		public System.Data.Linq.Table<BrakeConfig> BrakeConfigs
		{
			get
			{
				return this.GetTable<BrakeConfig>();
			}
		}
		
		public System.Data.Linq.Table<BrakeSystem> BrakeSystems
		{
			get
			{
				return this.GetTable<BrakeSystem>();
			}
		}
		
		public System.Data.Linq.Table<BrakeType> BrakeTypes
		{
			get
			{
				return this.GetTable<BrakeType>();
			}
		}
		
		public System.Data.Linq.Table<CylinderHeadType> CylinderHeadTypes
		{
			get
			{
				return this.GetTable<CylinderHeadType>();
			}
		}
		
		public System.Data.Linq.Table<DriveType> DriveTypes
		{
			get
			{
				return this.GetTable<DriveType>();
			}
		}
		
		public System.Data.Linq.Table<ElecControlled> ElecControlleds
		{
			get
			{
				return this.GetTable<ElecControlled>();
			}
		}
		
		public System.Data.Linq.Table<EngineBase> EngineBases
		{
			get
			{
				return this.GetTable<EngineBase>();
			}
		}
		
		public System.Data.Linq.Table<EngineConfig> EngineConfigs
		{
			get
			{
				return this.GetTable<EngineConfig>();
			}
		}
		
		public System.Data.Linq.Table<EngineDesignation> EngineDesignations
		{
			get
			{
				return this.GetTable<EngineDesignation>();
			}
		}
		
		public System.Data.Linq.Table<EngineLegacy> EngineLegacies
		{
			get
			{
				return this.GetTable<EngineLegacy>();
			}
		}
		
		public System.Data.Linq.Table<EngineVersion> EngineVersions
		{
			get
			{
				return this.GetTable<EngineVersion>();
			}
		}
		
		public System.Data.Linq.Table<EngineVIN> EngineVINs
		{
			get
			{
				return this.GetTable<EngineVIN>();
			}
		}
		
		public System.Data.Linq.Table<EnglishPhrase> EnglishPhrases
		{
			get
			{
				return this.GetTable<EnglishPhrase>();
			}
		}
		
		public System.Data.Linq.Table<FuelDeliveryConfig> FuelDeliveryConfigs
		{
			get
			{
				return this.GetTable<FuelDeliveryConfig>();
			}
		}
		
		public System.Data.Linq.Table<FuelDeliverySubType> FuelDeliverySubTypes
		{
			get
			{
				return this.GetTable<FuelDeliverySubType>();
			}
		}
		
		public System.Data.Linq.Table<FuelDeliveryType> FuelDeliveryTypes
		{
			get
			{
				return this.GetTable<FuelDeliveryType>();
			}
		}
		
		public System.Data.Linq.Table<FuelSystemControlType> FuelSystemControlTypes
		{
			get
			{
				return this.GetTable<FuelSystemControlType>();
			}
		}
		
		public System.Data.Linq.Table<FuelSystemDesign> FuelSystemDesigns
		{
			get
			{
				return this.GetTable<FuelSystemDesign>();
			}
		}
		
		public System.Data.Linq.Table<FuelType> FuelTypes
		{
			get
			{
				return this.GetTable<FuelType>();
			}
		}
		
		public System.Data.Linq.Table<IgnitionSystemType> IgnitionSystemTypes
		{
			get
			{
				return this.GetTable<IgnitionSystemType>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<LanguageTranslation> LanguageTranslations
		{
			get
			{
				return this.GetTable<LanguageTranslation>();
			}
		}
		
		public System.Data.Linq.Table<LanguageTranslationAttachment> LanguageTranslationAttachments
		{
			get
			{
				return this.GetTable<LanguageTranslationAttachment>();
			}
		}
		
		public System.Data.Linq.Table<LegacyVehicle> LegacyVehicles
		{
			get
			{
				return this.GetTable<LegacyVehicle>();
			}
		}
		
		public System.Data.Linq.Table<Make> Makes
		{
			get
			{
				return this.GetTable<Make>();
			}
		}
		
		public System.Data.Linq.Table<Mfr> Mfrs
		{
			get
			{
				return this.GetTable<Mfr>();
			}
		}
		
		public System.Data.Linq.Table<MfrBodyCode> MfrBodyCodes
		{
			get
			{
				return this.GetTable<MfrBodyCode>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<PowerOutput> PowerOutputs
		{
			get
			{
				return this.GetTable<PowerOutput>();
			}
		}
		
		public System.Data.Linq.Table<PublicationStage> PublicationStages
		{
			get
			{
				return this.GetTable<PublicationStage>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<SpringType> SpringTypes
		{
			get
			{
				return this.GetTable<SpringType>();
			}
		}
		
		public System.Data.Linq.Table<SpringTypeConfig> SpringTypeConfigs
		{
			get
			{
				return this.GetTable<SpringTypeConfig>();
			}
		}
		
		public System.Data.Linq.Table<SteeringConfig> SteeringConfigs
		{
			get
			{
				return this.GetTable<SteeringConfig>();
			}
		}
		
		public System.Data.Linq.Table<SteeringSystem> SteeringSystems
		{
			get
			{
				return this.GetTable<SteeringSystem>();
			}
		}
		
		public System.Data.Linq.Table<SteeringType> SteeringTypes
		{
			get
			{
				return this.GetTable<SteeringType>();
			}
		}
		
		public System.Data.Linq.Table<Submodel> Submodels
		{
			get
			{
				return this.GetTable<Submodel>();
			}
		}
		
		public System.Data.Linq.Table<Transmission> Transmissions
		{
			get
			{
				return this.GetTable<Transmission>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionBase> TransmissionBases
		{
			get
			{
				return this.GetTable<TransmissionBase>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionControlType> TransmissionControlTypes
		{
			get
			{
				return this.GetTable<TransmissionControlType>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionMfrCode> TransmissionMfrCodes
		{
			get
			{
				return this.GetTable<TransmissionMfrCode>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionNumSpeed> TransmissionNumSpeeds
		{
			get
			{
				return this.GetTable<TransmissionNumSpeed>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionType> TransmissionTypes
		{
			get
			{
				return this.GetTable<TransmissionType>();
			}
		}
		
		public System.Data.Linq.Table<Valve> Valves
		{
			get
			{
				return this.GetTable<Valve>();
			}
		}
		
		public System.Data.Linq.Table<vcdbchange> vcdbchanges
		{
			get
			{
				return this.GetTable<vcdbchange>();
			}
		}
		
		public System.Data.Linq.Table<VehEngCfgToLegacyVehicle> VehEngCfgToLegacyVehicles
		{
			get
			{
				return this.GetTable<VehEngCfgToLegacyVehicle>();
			}
		}
		
		public System.Data.Linq.Table<Vehicle> Vehicles
		{
			get
			{
				return this.GetTable<Vehicle>();
			}
		}
		
		public System.Data.Linq.Table<VehicleConfig> VehicleConfigs
		{
			get
			{
				return this.GetTable<VehicleConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToBedConfig> VehicleToBedConfigs
		{
			get
			{
				return this.GetTable<VehicleToBedConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToBodyStyleConfig> VehicleToBodyStyleConfigs
		{
			get
			{
				return this.GetTable<VehicleToBodyStyleConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToBrakeConfig> VehicleToBrakeConfigs
		{
			get
			{
				return this.GetTable<VehicleToBrakeConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToDriveType> VehicleToDriveTypes
		{
			get
			{
				return this.GetTable<VehicleToDriveType>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToEngineConfig> VehicleToEngineConfigs
		{
			get
			{
				return this.GetTable<VehicleToEngineConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToMfrBodyCode> VehicleToMfrBodyCodes
		{
			get
			{
				return this.GetTable<VehicleToMfrBodyCode>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToSpringTypeConfig> VehicleToSpringTypeConfigs
		{
			get
			{
				return this.GetTable<VehicleToSpringTypeConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToSteeringConfig> VehicleToSteeringConfigs
		{
			get
			{
				return this.GetTable<VehicleToSteeringConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToTransmission> VehicleToTransmissions
		{
			get
			{
				return this.GetTable<VehicleToTransmission>();
			}
		}
		
		public System.Data.Linq.Table<VehicleToWheelbase> VehicleToWheelbases
		{
			get
			{
				return this.GetTable<VehicleToWheelbase>();
			}
		}
		
		public System.Data.Linq.Table<VehicleType> VehicleTypes
		{
			get
			{
				return this.GetTable<VehicleType>();
			}
		}
		
		public System.Data.Linq.Table<VehicleTypeGroup> VehicleTypeGroups
		{
			get
			{
				return this.GetTable<VehicleTypeGroup>();
			}
		}
		
		public System.Data.Linq.Table<VCDBVersion> VCDBVersions
		{
			get
			{
				return this.GetTable<VCDBVersion>();
			}
		}
		
		public System.Data.Linq.Table<WheelBase> WheelBases
		{
			get
			{
				return this.GetTable<WheelBase>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abbreviation")]
	public partial class Abbreviation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Abbreviation1;
		
		private string _Description;
		
		private string _LongDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbbreviation1Changing(string value);
    partial void OnAbbreviation1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    #endregion
		
		public Abbreviation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Abbreviation", Storage="_Abbreviation1", DbType="Char(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Abbreviation1
		{
			get
			{
				return this._Abbreviation1;
			}
			set
			{
				if ((this._Abbreviation1 != value))
				{
					this.OnAbbreviation1Changing(value);
					this.SendPropertyChanging();
					this._Abbreviation1 = value;
					this.SendPropertyChanged("Abbreviation1");
					this.OnAbbreviation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Year")]
	public partial class Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearID;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public Year()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_BaseVehicle", Storage="_BaseVehicles", ThisKey="YearID", OtherKey="YearID")]
		public EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Aspiration")]
	public partial class Aspiration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AspirationID;
		
		private string _AspirationName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAspirationIDChanging(int value);
    partial void OnAspirationIDChanged();
    partial void OnAspirationNameChanging(string value);
    partial void OnAspirationNameChanged();
    #endregion
		
		public Aspiration()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspirationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AspirationID
		{
			get
			{
				return this._AspirationID;
			}
			set
			{
				if ((this._AspirationID != value))
				{
					this.OnAspirationIDChanging(value);
					this.SendPropertyChanging();
					this._AspirationID = value;
					this.SendPropertyChanged("AspirationID");
					this.OnAspirationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspirationName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string AspirationName
		{
			get
			{
				return this._AspirationName;
			}
			set
			{
				if ((this._AspirationName != value))
				{
					this.OnAspirationNameChanging(value);
					this.SendPropertyChanging();
					this._AspirationName = value;
					this.SendPropertyChanged("AspirationName");
					this.OnAspirationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aspiration_EngineConfig", Storage="_EngineConfigs", ThisKey="AspirationID", OtherKey="AspirationID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Aspiration = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Aspiration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentID;
		
		private int _AttachmentTypeID;
		
		private string _AttachmentFileName;
		
		private string _AttachmentURL;
		
		private string _AttachmentDescription;
		
		private EntitySet<LanguageTranslationAttachment> _LanguageTranslationAttachments;
		
		private EntityRef<AttachmentType> _AttachmentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIDChanging(int value);
    partial void OnAttachmentIDChanged();
    partial void OnAttachmentTypeIDChanging(int value);
    partial void OnAttachmentTypeIDChanged();
    partial void OnAttachmentFileNameChanging(string value);
    partial void OnAttachmentFileNameChanged();
    partial void OnAttachmentURLChanging(string value);
    partial void OnAttachmentURLChanged();
    partial void OnAttachmentDescriptionChanging(string value);
    partial void OnAttachmentDescriptionChanged();
    #endregion
		
		public Attachment()
		{
			this._LanguageTranslationAttachments = new EntitySet<LanguageTranslationAttachment>(new Action<LanguageTranslationAttachment>(this.attach_LanguageTranslationAttachments), new Action<LanguageTranslationAttachment>(this.detach_LanguageTranslationAttachments));
			this._AttachmentType = default(EntityRef<AttachmentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttachmentID
		{
			get
			{
				return this._AttachmentID;
			}
			set
			{
				if ((this._AttachmentID != value))
				{
					this.OnAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentID = value;
					this.SendPropertyChanged("AttachmentID");
					this.OnAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentTypeID", DbType="Int NOT NULL")]
		public int AttachmentTypeID
		{
			get
			{
				return this._AttachmentTypeID;
			}
			set
			{
				if ((this._AttachmentTypeID != value))
				{
					if (this._AttachmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttachmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentTypeID = value;
					this.SendPropertyChanged("AttachmentTypeID");
					this.OnAttachmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentFileName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AttachmentFileName
		{
			get
			{
				return this._AttachmentFileName;
			}
			set
			{
				if ((this._AttachmentFileName != value))
				{
					this.OnAttachmentFileNameChanging(value);
					this.SendPropertyChanging();
					this._AttachmentFileName = value;
					this.SendPropertyChanged("AttachmentFileName");
					this.OnAttachmentFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentURL", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string AttachmentURL
		{
			get
			{
				return this._AttachmentURL;
			}
			set
			{
				if ((this._AttachmentURL != value))
				{
					this.OnAttachmentURLChanging(value);
					this.SendPropertyChanging();
					this._AttachmentURL = value;
					this.SendPropertyChanged("AttachmentURL");
					this.OnAttachmentURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentDescription", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AttachmentDescription
		{
			get
			{
				return this._AttachmentDescription;
			}
			set
			{
				if ((this._AttachmentDescription != value))
				{
					this.OnAttachmentDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AttachmentDescription = value;
					this.SendPropertyChanged("AttachmentDescription");
					this.OnAttachmentDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_LanguageTranslationAttachment", Storage="_LanguageTranslationAttachments", ThisKey="AttachmentID", OtherKey="AttachmentID")]
		public EntitySet<LanguageTranslationAttachment> LanguageTranslationAttachments
		{
			get
			{
				return this._LanguageTranslationAttachments;
			}
			set
			{
				this._LanguageTranslationAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttachmentType_Attachment", Storage="_AttachmentType", ThisKey="AttachmentTypeID", OtherKey="AttachmentTypeID", IsForeignKey=true)]
		public AttachmentType AttachmentType
		{
			get
			{
				return this._AttachmentType.Entity;
			}
			set
			{
				AttachmentType previousValue = this._AttachmentType.Entity;
				if (((previousValue != value) 
							|| (this._AttachmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttachmentType.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._AttachmentType.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._AttachmentTypeID = value.AttachmentTypeID;
					}
					else
					{
						this._AttachmentTypeID = default(int);
					}
					this.SendPropertyChanged("AttachmentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LanguageTranslationAttachments(LanguageTranslationAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = this;
		}
		
		private void detach_LanguageTranslationAttachments(LanguageTranslationAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttachmentType")]
	public partial class AttachmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentTypeID;
		
		private string _AttachmentTypeName;
		
		private EntitySet<Attachment> _Attachments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentTypeIDChanging(int value);
    partial void OnAttachmentTypeIDChanged();
    partial void OnAttachmentTypeNameChanging(string value);
    partial void OnAttachmentTypeNameChanged();
    #endregion
		
		public AttachmentType()
		{
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttachmentTypeID
		{
			get
			{
				return this._AttachmentTypeID;
			}
			set
			{
				if ((this._AttachmentTypeID != value))
				{
					this.OnAttachmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentTypeID = value;
					this.SendPropertyChanged("AttachmentTypeID");
					this.OnAttachmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentTypeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AttachmentTypeName
		{
			get
			{
				return this._AttachmentTypeName;
			}
			set
			{
				if ((this._AttachmentTypeName != value))
				{
					this.OnAttachmentTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AttachmentTypeName = value;
					this.SendPropertyChanged("AttachmentTypeName");
					this.OnAttachmentTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttachmentType_Attachment", Storage="_Attachments", ThisKey="AttachmentTypeID", OtherKey="AttachmentTypeID")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.AttachmentType = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.AttachmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BaseVehicle")]
	public partial class BaseVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BaseVehicleID;
		
		private int _YearID;
		
		private int _MakeID;
		
		private int _ModelID;
		
		private EntitySet<Vehicle> _Vehicles;
		
		private EntityRef<Year> _Year;
		
		private EntityRef<Make> _Make;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBaseVehicleIDChanging(int value);
    partial void OnBaseVehicleIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnMakeIDChanging(int value);
    partial void OnMakeIDChanged();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    #endregion
		
		public BaseVehicle()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			this._Year = default(EntityRef<Year>);
			this._Make = default(EntityRef<Make>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseVehicleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BaseVehicleID
		{
			get
			{
				return this._BaseVehicleID;
			}
			set
			{
				if ((this._BaseVehicleID != value))
				{
					this.OnBaseVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._BaseVehicleID = value;
					this.SendPropertyChanged("BaseVehicleID");
					this.OnBaseVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeID", DbType="Int NOT NULL")]
		public int MakeID
		{
			get
			{
				return this._MakeID;
			}
			set
			{
				if ((this._MakeID != value))
				{
					if (this._Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMakeIDChanging(value);
					this.SendPropertyChanging();
					this._MakeID = value;
					this.SendPropertyChanged("MakeID");
					this.OnMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int NOT NULL")]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVehicle_Vehicle", Storage="_Vehicles", ThisKey="BaseVehicleID", OtherKey="BaseVehicleID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_BaseVehicle", Storage="_Year", ThisKey="YearID", OtherKey="YearID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._YearID = value.YearID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_BaseVehicle", Storage="_Make", ThisKey="MakeID", OtherKey="MakeID", IsForeignKey=true)]
		public Make Make
		{
			get
			{
				return this._Make.Entity;
			}
			set
			{
				Make previousValue = this._Make.Entity;
				if (((previousValue != value) 
							|| (this._Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Make.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._Make.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._MakeID = value.MakeID;
					}
					else
					{
						this._MakeID = default(int);
					}
					this.SendPropertyChanged("Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_BaseVehicle", Storage="_Model", ThisKey="ModelID", OtherKey="ModelID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._ModelID = value.ModelID;
					}
					else
					{
						this._ModelID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.BaseVehicle = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.BaseVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BedConfig")]
	public partial class BedConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BedConfigID;
		
		private int _BedLengthID;
		
		private int _BedTypeID;
		
		private EntityRef<BedLength> _BedLength;
		
		private EntityRef<BedType> _BedType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBedConfigIDChanging(int value);
    partial void OnBedConfigIDChanged();
    partial void OnBedLengthIDChanging(int value);
    partial void OnBedLengthIDChanged();
    partial void OnBedTypeIDChanging(int value);
    partial void OnBedTypeIDChanged();
    #endregion
		
		public BedConfig()
		{
			this._BedLength = default(EntityRef<BedLength>);
			this._BedType = default(EntityRef<BedType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BedConfigID
		{
			get
			{
				return this._BedConfigID;
			}
			set
			{
				if ((this._BedConfigID != value))
				{
					this.OnBedConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BedConfigID = value;
					this.SendPropertyChanged("BedConfigID");
					this.OnBedConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedLengthID", DbType="Int NOT NULL")]
		public int BedLengthID
		{
			get
			{
				return this._BedLengthID;
			}
			set
			{
				if ((this._BedLengthID != value))
				{
					if (this._BedLength.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBedLengthIDChanging(value);
					this.SendPropertyChanging();
					this._BedLengthID = value;
					this.SendPropertyChanged("BedLengthID");
					this.OnBedLengthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedTypeID", DbType="Int NOT NULL")]
		public int BedTypeID
		{
			get
			{
				return this._BedTypeID;
			}
			set
			{
				if ((this._BedTypeID != value))
				{
					if (this._BedType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBedTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BedTypeID = value;
					this.SendPropertyChanged("BedTypeID");
					this.OnBedTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BedLength_BedConfig", Storage="_BedLength", ThisKey="BedLengthID", OtherKey="BedLengthID", IsForeignKey=true)]
		public BedLength BedLength
		{
			get
			{
				return this._BedLength.Entity;
			}
			set
			{
				BedLength previousValue = this._BedLength.Entity;
				if (((previousValue != value) 
							|| (this._BedLength.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BedLength.Entity = null;
						previousValue.BedConfigs.Remove(this);
					}
					this._BedLength.Entity = value;
					if ((value != null))
					{
						value.BedConfigs.Add(this);
						this._BedLengthID = value.BedLengthID;
					}
					else
					{
						this._BedLengthID = default(int);
					}
					this.SendPropertyChanged("BedLength");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BedType_BedConfig", Storage="_BedType", ThisKey="BedTypeID", OtherKey="BedTypeID", IsForeignKey=true)]
		public BedType BedType
		{
			get
			{
				return this._BedType.Entity;
			}
			set
			{
				BedType previousValue = this._BedType.Entity;
				if (((previousValue != value) 
							|| (this._BedType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BedType.Entity = null;
						previousValue.BedConfigs.Remove(this);
					}
					this._BedType.Entity = value;
					if ((value != null))
					{
						value.BedConfigs.Add(this);
						this._BedTypeID = value.BedTypeID;
					}
					else
					{
						this._BedTypeID = default(int);
					}
					this.SendPropertyChanged("BedType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BedLength")]
	public partial class BedLength : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BedLengthID;
		
		private string _BedLength1;
		
		private string _BedLengthMetric;
		
		private EntitySet<BedConfig> _BedConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBedLengthIDChanging(int value);
    partial void OnBedLengthIDChanged();
    partial void OnBedLength1Changing(string value);
    partial void OnBedLength1Changed();
    partial void OnBedLengthMetricChanging(string value);
    partial void OnBedLengthMetricChanged();
    #endregion
		
		public BedLength()
		{
			this._BedConfigs = new EntitySet<BedConfig>(new Action<BedConfig>(this.attach_BedConfigs), new Action<BedConfig>(this.detach_BedConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedLengthID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BedLengthID
		{
			get
			{
				return this._BedLengthID;
			}
			set
			{
				if ((this._BedLengthID != value))
				{
					this.OnBedLengthIDChanging(value);
					this.SendPropertyChanging();
					this._BedLengthID = value;
					this.SendPropertyChanged("BedLengthID");
					this.OnBedLengthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BedLength", Storage="_BedLength1", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string BedLength1
		{
			get
			{
				return this._BedLength1;
			}
			set
			{
				if ((this._BedLength1 != value))
				{
					this.OnBedLength1Changing(value);
					this.SendPropertyChanging();
					this._BedLength1 = value;
					this.SendPropertyChanged("BedLength1");
					this.OnBedLength1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedLengthMetric", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string BedLengthMetric
		{
			get
			{
				return this._BedLengthMetric;
			}
			set
			{
				if ((this._BedLengthMetric != value))
				{
					this.OnBedLengthMetricChanging(value);
					this.SendPropertyChanging();
					this._BedLengthMetric = value;
					this.SendPropertyChanged("BedLengthMetric");
					this.OnBedLengthMetricChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BedLength_BedConfig", Storage="_BedConfigs", ThisKey="BedLengthID", OtherKey="BedLengthID")]
		public EntitySet<BedConfig> BedConfigs
		{
			get
			{
				return this._BedConfigs;
			}
			set
			{
				this._BedConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BedConfigs(BedConfig entity)
		{
			this.SendPropertyChanging();
			entity.BedLength = this;
		}
		
		private void detach_BedConfigs(BedConfig entity)
		{
			this.SendPropertyChanging();
			entity.BedLength = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BedType")]
	public partial class BedType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BedTypeID;
		
		private string _BedTypeName;
		
		private EntitySet<BedConfig> _BedConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBedTypeIDChanging(int value);
    partial void OnBedTypeIDChanged();
    partial void OnBedTypeNameChanging(string value);
    partial void OnBedTypeNameChanged();
    #endregion
		
		public BedType()
		{
			this._BedConfigs = new EntitySet<BedConfig>(new Action<BedConfig>(this.attach_BedConfigs), new Action<BedConfig>(this.detach_BedConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BedTypeID
		{
			get
			{
				return this._BedTypeID;
			}
			set
			{
				if ((this._BedTypeID != value))
				{
					this.OnBedTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BedTypeID = value;
					this.SendPropertyChanged("BedTypeID");
					this.OnBedTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BedTypeName
		{
			get
			{
				return this._BedTypeName;
			}
			set
			{
				if ((this._BedTypeName != value))
				{
					this.OnBedTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BedTypeName = value;
					this.SendPropertyChanged("BedTypeName");
					this.OnBedTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BedType_BedConfig", Storage="_BedConfigs", ThisKey="BedTypeID", OtherKey="BedTypeID")]
		public EntitySet<BedConfig> BedConfigs
		{
			get
			{
				return this._BedConfigs;
			}
			set
			{
				this._BedConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BedConfigs(BedConfig entity)
		{
			this.SendPropertyChanging();
			entity.BedType = this;
		}
		
		private void detach_BedConfigs(BedConfig entity)
		{
			this.SendPropertyChanging();
			entity.BedType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BodyNumDoors")]
	public partial class BodyNumDoor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BodyNumDoorsID;
		
		private string _BodyNumDoors;
		
		private EntitySet<BodyStyleConfig> _BodyStyleConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBodyNumDoorsIDChanging(int value);
    partial void OnBodyNumDoorsIDChanged();
    partial void OnBodyNumDoorsChanging(string value);
    partial void OnBodyNumDoorsChanged();
    #endregion
		
		public BodyNumDoor()
		{
			this._BodyStyleConfigs = new EntitySet<BodyStyleConfig>(new Action<BodyStyleConfig>(this.attach_BodyStyleConfigs), new Action<BodyStyleConfig>(this.detach_BodyStyleConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyNumDoorsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BodyNumDoorsID
		{
			get
			{
				return this._BodyNumDoorsID;
			}
			set
			{
				if ((this._BodyNumDoorsID != value))
				{
					this.OnBodyNumDoorsIDChanging(value);
					this.SendPropertyChanging();
					this._BodyNumDoorsID = value;
					this.SendPropertyChanged("BodyNumDoorsID");
					this.OnBodyNumDoorsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyNumDoors", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string BodyNumDoors
		{
			get
			{
				return this._BodyNumDoors;
			}
			set
			{
				if ((this._BodyNumDoors != value))
				{
					this.OnBodyNumDoorsChanging(value);
					this.SendPropertyChanging();
					this._BodyNumDoors = value;
					this.SendPropertyChanged("BodyNumDoors");
					this.OnBodyNumDoorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyNumDoor_BodyStyleConfig", Storage="_BodyStyleConfigs", ThisKey="BodyNumDoorsID", OtherKey="BodyNumDoorsID")]
		public EntitySet<BodyStyleConfig> BodyStyleConfigs
		{
			get
			{
				return this._BodyStyleConfigs;
			}
			set
			{
				this._BodyStyleConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BodyStyleConfigs(BodyStyleConfig entity)
		{
			this.SendPropertyChanging();
			entity.BodyNumDoor = this;
		}
		
		private void detach_BodyStyleConfigs(BodyStyleConfig entity)
		{
			this.SendPropertyChanging();
			entity.BodyNumDoor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BodyStyleConfig")]
	public partial class BodyStyleConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BodyStyleConfigID;
		
		private int _BodyNumDoorsID;
		
		private int _BodyTypeID;
		
		private EntityRef<BodyNumDoor> _BodyNumDoor;
		
		private EntityRef<BodyType> _BodyType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBodyStyleConfigIDChanging(int value);
    partial void OnBodyStyleConfigIDChanged();
    partial void OnBodyNumDoorsIDChanging(int value);
    partial void OnBodyNumDoorsIDChanged();
    partial void OnBodyTypeIDChanging(int value);
    partial void OnBodyTypeIDChanged();
    #endregion
		
		public BodyStyleConfig()
		{
			this._BodyNumDoor = default(EntityRef<BodyNumDoor>);
			this._BodyType = default(EntityRef<BodyType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BodyStyleConfigID
		{
			get
			{
				return this._BodyStyleConfigID;
			}
			set
			{
				if ((this._BodyStyleConfigID != value))
				{
					this.OnBodyStyleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleConfigID = value;
					this.SendPropertyChanged("BodyStyleConfigID");
					this.OnBodyStyleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyNumDoorsID", DbType="Int NOT NULL")]
		public int BodyNumDoorsID
		{
			get
			{
				return this._BodyNumDoorsID;
			}
			set
			{
				if ((this._BodyNumDoorsID != value))
				{
					if (this._BodyNumDoor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyNumDoorsIDChanging(value);
					this.SendPropertyChanging();
					this._BodyNumDoorsID = value;
					this.SendPropertyChanged("BodyNumDoorsID");
					this.OnBodyNumDoorsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyTypeID", DbType="Int NOT NULL")]
		public int BodyTypeID
		{
			get
			{
				return this._BodyTypeID;
			}
			set
			{
				if ((this._BodyTypeID != value))
				{
					if (this._BodyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BodyTypeID = value;
					this.SendPropertyChanged("BodyTypeID");
					this.OnBodyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyNumDoor_BodyStyleConfig", Storage="_BodyNumDoor", ThisKey="BodyNumDoorsID", OtherKey="BodyNumDoorsID", IsForeignKey=true)]
		public BodyNumDoor BodyNumDoor
		{
			get
			{
				return this._BodyNumDoor.Entity;
			}
			set
			{
				BodyNumDoor previousValue = this._BodyNumDoor.Entity;
				if (((previousValue != value) 
							|| (this._BodyNumDoor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BodyNumDoor.Entity = null;
						previousValue.BodyStyleConfigs.Remove(this);
					}
					this._BodyNumDoor.Entity = value;
					if ((value != null))
					{
						value.BodyStyleConfigs.Add(this);
						this._BodyNumDoorsID = value.BodyNumDoorsID;
					}
					else
					{
						this._BodyNumDoorsID = default(int);
					}
					this.SendPropertyChanged("BodyNumDoor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyType_BodyStyleConfig", Storage="_BodyType", ThisKey="BodyTypeID", OtherKey="BodyTypeID", IsForeignKey=true)]
		public BodyType BodyType
		{
			get
			{
				return this._BodyType.Entity;
			}
			set
			{
				BodyType previousValue = this._BodyType.Entity;
				if (((previousValue != value) 
							|| (this._BodyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BodyType.Entity = null;
						previousValue.BodyStyleConfigs.Remove(this);
					}
					this._BodyType.Entity = value;
					if ((value != null))
					{
						value.BodyStyleConfigs.Add(this);
						this._BodyTypeID = value.BodyTypeID;
					}
					else
					{
						this._BodyTypeID = default(int);
					}
					this.SendPropertyChanged("BodyType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BodyType")]
	public partial class BodyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BodyTypeID;
		
		private string _BodyTypeName;
		
		private EntitySet<BodyStyleConfig> _BodyStyleConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBodyTypeIDChanging(int value);
    partial void OnBodyTypeIDChanged();
    partial void OnBodyTypeNameChanging(string value);
    partial void OnBodyTypeNameChanged();
    #endregion
		
		public BodyType()
		{
			this._BodyStyleConfigs = new EntitySet<BodyStyleConfig>(new Action<BodyStyleConfig>(this.attach_BodyStyleConfigs), new Action<BodyStyleConfig>(this.detach_BodyStyleConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BodyTypeID
		{
			get
			{
				return this._BodyTypeID;
			}
			set
			{
				if ((this._BodyTypeID != value))
				{
					this.OnBodyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BodyTypeID = value;
					this.SendPropertyChanged("BodyTypeID");
					this.OnBodyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BodyTypeName
		{
			get
			{
				return this._BodyTypeName;
			}
			set
			{
				if ((this._BodyTypeName != value))
				{
					this.OnBodyTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BodyTypeName = value;
					this.SendPropertyChanged("BodyTypeName");
					this.OnBodyTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyType_BodyStyleConfig", Storage="_BodyStyleConfigs", ThisKey="BodyTypeID", OtherKey="BodyTypeID")]
		public EntitySet<BodyStyleConfig> BodyStyleConfigs
		{
			get
			{
				return this._BodyStyleConfigs;
			}
			set
			{
				this._BodyStyleConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BodyStyleConfigs(BodyStyleConfig entity)
		{
			this.SendPropertyChanging();
			entity.BodyType = this;
		}
		
		private void detach_BodyStyleConfigs(BodyStyleConfig entity)
		{
			this.SendPropertyChanging();
			entity.BodyType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrakeABS")]
	public partial class BrakeAB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrakeABSID;
		
		private string _BrakeABSName;
		
		private EntitySet<BrakeConfig> _BrakeConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrakeABSIDChanging(int value);
    partial void OnBrakeABSIDChanged();
    partial void OnBrakeABSNameChanging(string value);
    partial void OnBrakeABSNameChanged();
    #endregion
		
		public BrakeAB()
		{
			this._BrakeConfigs = new EntitySet<BrakeConfig>(new Action<BrakeConfig>(this.attach_BrakeConfigs), new Action<BrakeConfig>(this.detach_BrakeConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeABSID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BrakeABSID
		{
			get
			{
				return this._BrakeABSID;
			}
			set
			{
				if ((this._BrakeABSID != value))
				{
					this.OnBrakeABSIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeABSID = value;
					this.SendPropertyChanged("BrakeABSID");
					this.OnBrakeABSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeABSName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string BrakeABSName
		{
			get
			{
				return this._BrakeABSName;
			}
			set
			{
				if ((this._BrakeABSName != value))
				{
					this.OnBrakeABSNameChanging(value);
					this.SendPropertyChanging();
					this._BrakeABSName = value;
					this.SendPropertyChanged("BrakeABSName");
					this.OnBrakeABSNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeAB_BrakeConfig", Storage="_BrakeConfigs", ThisKey="BrakeABSID", OtherKey="BrakeABSID")]
		public EntitySet<BrakeConfig> BrakeConfigs
		{
			get
			{
				return this._BrakeConfigs;
			}
			set
			{
				this._BrakeConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeConfigs(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeAB = this;
		}
		
		private void detach_BrakeConfigs(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeAB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrakeConfig")]
	public partial class BrakeConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrakeConfigID;
		
		private int _FrontBrakeTypeID;
		
		private int _RearBrakeTypeID;
		
		private int _BrakeSystemID;
		
		private int _BrakeABSID;
		
		private EntityRef<BrakeAB> _BrakeAB;
		
		private EntityRef<BrakeSystem> _BrakeSystem;
		
		private EntityRef<BrakeType> _BrakeType;
		
		private EntityRef<BrakeType> _BrakeType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrakeConfigIDChanging(int value);
    partial void OnBrakeConfigIDChanged();
    partial void OnFrontBrakeTypeIDChanging(int value);
    partial void OnFrontBrakeTypeIDChanged();
    partial void OnRearBrakeTypeIDChanging(int value);
    partial void OnRearBrakeTypeIDChanged();
    partial void OnBrakeSystemIDChanging(int value);
    partial void OnBrakeSystemIDChanged();
    partial void OnBrakeABSIDChanging(int value);
    partial void OnBrakeABSIDChanged();
    #endregion
		
		public BrakeConfig()
		{
			this._BrakeAB = default(EntityRef<BrakeAB>);
			this._BrakeSystem = default(EntityRef<BrakeSystem>);
			this._BrakeType = default(EntityRef<BrakeType>);
			this._BrakeType1 = default(EntityRef<BrakeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BrakeConfigID
		{
			get
			{
				return this._BrakeConfigID;
			}
			set
			{
				if ((this._BrakeConfigID != value))
				{
					this.OnBrakeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeConfigID = value;
					this.SendPropertyChanged("BrakeConfigID");
					this.OnBrakeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrontBrakeTypeID", DbType="Int NOT NULL")]
		public int FrontBrakeTypeID
		{
			get
			{
				return this._FrontBrakeTypeID;
			}
			set
			{
				if ((this._FrontBrakeTypeID != value))
				{
					if (this._BrakeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrontBrakeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FrontBrakeTypeID = value;
					this.SendPropertyChanged("FrontBrakeTypeID");
					this.OnFrontBrakeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RearBrakeTypeID", DbType="Int NOT NULL")]
		public int RearBrakeTypeID
		{
			get
			{
				return this._RearBrakeTypeID;
			}
			set
			{
				if ((this._RearBrakeTypeID != value))
				{
					if (this._BrakeType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRearBrakeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RearBrakeTypeID = value;
					this.SendPropertyChanged("RearBrakeTypeID");
					this.OnRearBrakeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeSystemID", DbType="Int NOT NULL")]
		public int BrakeSystemID
		{
			get
			{
				return this._BrakeSystemID;
			}
			set
			{
				if ((this._BrakeSystemID != value))
				{
					if (this._BrakeSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrakeSystemIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeSystemID = value;
					this.SendPropertyChanged("BrakeSystemID");
					this.OnBrakeSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeABSID", DbType="Int NOT NULL")]
		public int BrakeABSID
		{
			get
			{
				return this._BrakeABSID;
			}
			set
			{
				if ((this._BrakeABSID != value))
				{
					if (this._BrakeAB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrakeABSIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeABSID = value;
					this.SendPropertyChanged("BrakeABSID");
					this.OnBrakeABSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeAB_BrakeConfig", Storage="_BrakeAB", ThisKey="BrakeABSID", OtherKey="BrakeABSID", IsForeignKey=true)]
		public BrakeAB BrakeAB
		{
			get
			{
				return this._BrakeAB.Entity;
			}
			set
			{
				BrakeAB previousValue = this._BrakeAB.Entity;
				if (((previousValue != value) 
							|| (this._BrakeAB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrakeAB.Entity = null;
						previousValue.BrakeConfigs.Remove(this);
					}
					this._BrakeAB.Entity = value;
					if ((value != null))
					{
						value.BrakeConfigs.Add(this);
						this._BrakeABSID = value.BrakeABSID;
					}
					else
					{
						this._BrakeABSID = default(int);
					}
					this.SendPropertyChanged("BrakeAB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeSystem_BrakeConfig", Storage="_BrakeSystem", ThisKey="BrakeSystemID", OtherKey="BrakeSystemID", IsForeignKey=true)]
		public BrakeSystem BrakeSystem
		{
			get
			{
				return this._BrakeSystem.Entity;
			}
			set
			{
				BrakeSystem previousValue = this._BrakeSystem.Entity;
				if (((previousValue != value) 
							|| (this._BrakeSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrakeSystem.Entity = null;
						previousValue.BrakeConfigs.Remove(this);
					}
					this._BrakeSystem.Entity = value;
					if ((value != null))
					{
						value.BrakeConfigs.Add(this);
						this._BrakeSystemID = value.BrakeSystemID;
					}
					else
					{
						this._BrakeSystemID = default(int);
					}
					this.SendPropertyChanged("BrakeSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeType_BrakeConfig", Storage="_BrakeType", ThisKey="FrontBrakeTypeID", OtherKey="BrakeTypeID", IsForeignKey=true)]
		public BrakeType BrakeType
		{
			get
			{
				return this._BrakeType.Entity;
			}
			set
			{
				BrakeType previousValue = this._BrakeType.Entity;
				if (((previousValue != value) 
							|| (this._BrakeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrakeType.Entity = null;
						previousValue.BrakeConfigs.Remove(this);
					}
					this._BrakeType.Entity = value;
					if ((value != null))
					{
						value.BrakeConfigs.Add(this);
						this._FrontBrakeTypeID = value.BrakeTypeID;
					}
					else
					{
						this._FrontBrakeTypeID = default(int);
					}
					this.SendPropertyChanged("BrakeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeType_BrakeConfig1", Storage="_BrakeType1", ThisKey="RearBrakeTypeID", OtherKey="BrakeTypeID", IsForeignKey=true)]
		public BrakeType BrakeType1
		{
			get
			{
				return this._BrakeType1.Entity;
			}
			set
			{
				BrakeType previousValue = this._BrakeType1.Entity;
				if (((previousValue != value) 
							|| (this._BrakeType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrakeType1.Entity = null;
						previousValue.BrakeConfigs1.Remove(this);
					}
					this._BrakeType1.Entity = value;
					if ((value != null))
					{
						value.BrakeConfigs1.Add(this);
						this._RearBrakeTypeID = value.BrakeTypeID;
					}
					else
					{
						this._RearBrakeTypeID = default(int);
					}
					this.SendPropertyChanged("BrakeType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrakeSystem")]
	public partial class BrakeSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrakeSystemID;
		
		private string _BrakeSystemName;
		
		private EntitySet<BrakeConfig> _BrakeConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrakeSystemIDChanging(int value);
    partial void OnBrakeSystemIDChanged();
    partial void OnBrakeSystemNameChanging(string value);
    partial void OnBrakeSystemNameChanged();
    #endregion
		
		public BrakeSystem()
		{
			this._BrakeConfigs = new EntitySet<BrakeConfig>(new Action<BrakeConfig>(this.attach_BrakeConfigs), new Action<BrakeConfig>(this.detach_BrakeConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeSystemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BrakeSystemID
		{
			get
			{
				return this._BrakeSystemID;
			}
			set
			{
				if ((this._BrakeSystemID != value))
				{
					this.OnBrakeSystemIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeSystemID = value;
					this.SendPropertyChanged("BrakeSystemID");
					this.OnBrakeSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeSystemName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string BrakeSystemName
		{
			get
			{
				return this._BrakeSystemName;
			}
			set
			{
				if ((this._BrakeSystemName != value))
				{
					this.OnBrakeSystemNameChanging(value);
					this.SendPropertyChanging();
					this._BrakeSystemName = value;
					this.SendPropertyChanged("BrakeSystemName");
					this.OnBrakeSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeSystem_BrakeConfig", Storage="_BrakeConfigs", ThisKey="BrakeSystemID", OtherKey="BrakeSystemID")]
		public EntitySet<BrakeConfig> BrakeConfigs
		{
			get
			{
				return this._BrakeConfigs;
			}
			set
			{
				this._BrakeConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeConfigs(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeSystem = this;
		}
		
		private void detach_BrakeConfigs(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrakeType")]
	public partial class BrakeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrakeTypeID;
		
		private string _BrakeTypeName;
		
		private EntitySet<BrakeConfig> _BrakeConfigs;
		
		private EntitySet<BrakeConfig> _BrakeConfigs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrakeTypeIDChanging(int value);
    partial void OnBrakeTypeIDChanged();
    partial void OnBrakeTypeNameChanging(string value);
    partial void OnBrakeTypeNameChanged();
    #endregion
		
		public BrakeType()
		{
			this._BrakeConfigs = new EntitySet<BrakeConfig>(new Action<BrakeConfig>(this.attach_BrakeConfigs), new Action<BrakeConfig>(this.detach_BrakeConfigs));
			this._BrakeConfigs1 = new EntitySet<BrakeConfig>(new Action<BrakeConfig>(this.attach_BrakeConfigs1), new Action<BrakeConfig>(this.detach_BrakeConfigs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BrakeTypeID
		{
			get
			{
				return this._BrakeTypeID;
			}
			set
			{
				if ((this._BrakeTypeID != value))
				{
					this.OnBrakeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeTypeID = value;
					this.SendPropertyChanged("BrakeTypeID");
					this.OnBrakeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string BrakeTypeName
		{
			get
			{
				return this._BrakeTypeName;
			}
			set
			{
				if ((this._BrakeTypeName != value))
				{
					this.OnBrakeTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BrakeTypeName = value;
					this.SendPropertyChanged("BrakeTypeName");
					this.OnBrakeTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeType_BrakeConfig", Storage="_BrakeConfigs", ThisKey="BrakeTypeID", OtherKey="FrontBrakeTypeID")]
		public EntitySet<BrakeConfig> BrakeConfigs
		{
			get
			{
				return this._BrakeConfigs;
			}
			set
			{
				this._BrakeConfigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrakeType_BrakeConfig1", Storage="_BrakeConfigs1", ThisKey="BrakeTypeID", OtherKey="RearBrakeTypeID")]
		public EntitySet<BrakeConfig> BrakeConfigs1
		{
			get
			{
				return this._BrakeConfigs1;
			}
			set
			{
				this._BrakeConfigs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeConfigs(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeType = this;
		}
		
		private void detach_BrakeConfigs(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeType = null;
		}
		
		private void attach_BrakeConfigs1(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeType1 = this;
		}
		
		private void detach_BrakeConfigs1(BrakeConfig entity)
		{
			this.SendPropertyChanging();
			entity.BrakeType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CylinderHeadType")]
	public partial class CylinderHeadType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CylinderHeadTypeID;
		
		private string _CylinderHeadTypeName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCylinderHeadTypeIDChanging(int value);
    partial void OnCylinderHeadTypeIDChanged();
    partial void OnCylinderHeadTypeNameChanging(string value);
    partial void OnCylinderHeadTypeNameChanged();
    #endregion
		
		public CylinderHeadType()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CylinderHeadTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CylinderHeadTypeID
		{
			get
			{
				return this._CylinderHeadTypeID;
			}
			set
			{
				if ((this._CylinderHeadTypeID != value))
				{
					this.OnCylinderHeadTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CylinderHeadTypeID = value;
					this.SendPropertyChanged("CylinderHeadTypeID");
					this.OnCylinderHeadTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CylinderHeadTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string CylinderHeadTypeName
		{
			get
			{
				return this._CylinderHeadTypeName;
			}
			set
			{
				if ((this._CylinderHeadTypeName != value))
				{
					this.OnCylinderHeadTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CylinderHeadTypeName = value;
					this.SendPropertyChanged("CylinderHeadTypeName");
					this.OnCylinderHeadTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CylinderHeadType_EngineConfig", Storage="_EngineConfigs", ThisKey="CylinderHeadTypeID", OtherKey="CylinderHeadTypeID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.CylinderHeadType = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.CylinderHeadType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriveType")]
	public partial class DriveType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DriveTypeID;
		
		private string _DriveTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriveTypeIDChanging(int value);
    partial void OnDriveTypeIDChanged();
    partial void OnDriveTypeNameChanging(string value);
    partial void OnDriveTypeNameChanged();
    #endregion
		
		public DriveType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DriveTypeID
		{
			get
			{
				return this._DriveTypeID;
			}
			set
			{
				if ((this._DriveTypeID != value))
				{
					this.OnDriveTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DriveTypeID = value;
					this.SendPropertyChanged("DriveTypeID");
					this.OnDriveTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DriveTypeName
		{
			get
			{
				return this._DriveTypeName;
			}
			set
			{
				if ((this._DriveTypeName != value))
				{
					this.OnDriveTypeNameChanging(value);
					this.SendPropertyChanging();
					this._DriveTypeName = value;
					this.SendPropertyChanged("DriveTypeName");
					this.OnDriveTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ElecControlled")]
	public partial class ElecControlled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ElecControlledID;
		
		private string _ElecControlled1;
		
		private EntitySet<Transmission> _Transmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnElecControlledIDChanging(int value);
    partial void OnElecControlledIDChanged();
    partial void OnElecControlled1Changing(string value);
    partial void OnElecControlled1Changed();
    #endregion
		
		public ElecControlled()
		{
			this._Transmissions = new EntitySet<Transmission>(new Action<Transmission>(this.attach_Transmissions), new Action<Transmission>(this.detach_Transmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElecControlledID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ElecControlledID
		{
			get
			{
				return this._ElecControlledID;
			}
			set
			{
				if ((this._ElecControlledID != value))
				{
					this.OnElecControlledIDChanging(value);
					this.SendPropertyChanging();
					this._ElecControlledID = value;
					this.SendPropertyChanged("ElecControlledID");
					this.OnElecControlledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ElecControlled", Storage="_ElecControlled1", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string ElecControlled1
		{
			get
			{
				return this._ElecControlled1;
			}
			set
			{
				if ((this._ElecControlled1 != value))
				{
					this.OnElecControlled1Changing(value);
					this.SendPropertyChanging();
					this._ElecControlled1 = value;
					this.SendPropertyChanged("ElecControlled1");
					this.OnElecControlled1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElecControlled_Transmission", Storage="_Transmissions", ThisKey="ElecControlledID", OtherKey="TransmissionElecControlledID")]
		public EntitySet<Transmission> Transmissions
		{
			get
			{
				return this._Transmissions;
			}
			set
			{
				this._Transmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.ElecControlled = this;
		}
		
		private void detach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.ElecControlled = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineBase")]
	public partial class EngineBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineBaseID;
		
		private string _Liter;
		
		private string _CC;
		
		private string _CID;
		
		private string _Cylinders;
		
		private string _BlockType;
		
		private string _EngBoreIn;
		
		private string _EngBoreMetric;
		
		private string _EngStrokeIn;
		
		private string _EngStrokeMetric;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineBaseIDChanging(int value);
    partial void OnEngineBaseIDChanged();
    partial void OnLiterChanging(string value);
    partial void OnLiterChanged();
    partial void OnCCChanging(string value);
    partial void OnCCChanged();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCylindersChanging(string value);
    partial void OnCylindersChanged();
    partial void OnBlockTypeChanging(string value);
    partial void OnBlockTypeChanged();
    partial void OnEngBoreInChanging(string value);
    partial void OnEngBoreInChanged();
    partial void OnEngBoreMetricChanging(string value);
    partial void OnEngBoreMetricChanged();
    partial void OnEngStrokeInChanging(string value);
    partial void OnEngStrokeInChanged();
    partial void OnEngStrokeMetricChanging(string value);
    partial void OnEngStrokeMetricChanged();
    #endregion
		
		public EngineBase()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineBaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineBaseID
		{
			get
			{
				return this._EngineBaseID;
			}
			set
			{
				if ((this._EngineBaseID != value))
				{
					this.OnEngineBaseIDChanging(value);
					this.SendPropertyChanging();
					this._EngineBaseID = value;
					this.SendPropertyChanged("EngineBaseID");
					this.OnEngineBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liter", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string Liter
		{
			get
			{
				return this._Liter;
			}
			set
			{
				if ((this._Liter != value))
				{
					this.OnLiterChanging(value);
					this.SendPropertyChanging();
					this._Liter = value;
					this.SendPropertyChanged("Liter");
					this.OnLiterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string CC
		{
			get
			{
				return this._CC;
			}
			set
			{
				if ((this._CC != value))
				{
					this.OnCCChanging(value);
					this.SendPropertyChanging();
					this._CC = value;
					this.SendPropertyChanged("CC");
					this.OnCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cylinders", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Cylinders
		{
			get
			{
				return this._Cylinders;
			}
			set
			{
				if ((this._Cylinders != value))
				{
					this.OnCylindersChanging(value);
					this.SendPropertyChanging();
					this._Cylinders = value;
					this.SendPropertyChanged("Cylinders");
					this.OnCylindersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockType", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string BlockType
		{
			get
			{
				return this._BlockType;
			}
			set
			{
				if ((this._BlockType != value))
				{
					this.OnBlockTypeChanging(value);
					this.SendPropertyChanging();
					this._BlockType = value;
					this.SendPropertyChanged("BlockType");
					this.OnBlockTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngBoreIn", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string EngBoreIn
		{
			get
			{
				return this._EngBoreIn;
			}
			set
			{
				if ((this._EngBoreIn != value))
				{
					this.OnEngBoreInChanging(value);
					this.SendPropertyChanging();
					this._EngBoreIn = value;
					this.SendPropertyChanged("EngBoreIn");
					this.OnEngBoreInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngBoreMetric", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string EngBoreMetric
		{
			get
			{
				return this._EngBoreMetric;
			}
			set
			{
				if ((this._EngBoreMetric != value))
				{
					this.OnEngBoreMetricChanging(value);
					this.SendPropertyChanging();
					this._EngBoreMetric = value;
					this.SendPropertyChanged("EngBoreMetric");
					this.OnEngBoreMetricChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngStrokeIn", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string EngStrokeIn
		{
			get
			{
				return this._EngStrokeIn;
			}
			set
			{
				if ((this._EngStrokeIn != value))
				{
					this.OnEngStrokeInChanging(value);
					this.SendPropertyChanging();
					this._EngStrokeIn = value;
					this.SendPropertyChanged("EngStrokeIn");
					this.OnEngStrokeInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngStrokeMetric", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string EngStrokeMetric
		{
			get
			{
				return this._EngStrokeMetric;
			}
			set
			{
				if ((this._EngStrokeMetric != value))
				{
					this.OnEngStrokeMetricChanging(value);
					this.SendPropertyChanging();
					this._EngStrokeMetric = value;
					this.SendPropertyChanged("EngStrokeMetric");
					this.OnEngStrokeMetricChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineBase_EngineConfig", Storage="_EngineConfigs", ThisKey="EngineBaseID", OtherKey="EngineBaseID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineBase = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineConfig")]
	public partial class EngineConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineConfigID;
		
		private int _EngineDesignationID;
		
		private int _EngineVINID;
		
		private int _ValvesID;
		
		private int _EngineBaseID;
		
		private int _FuelDeliveryConfigID;
		
		private int _AspirationID;
		
		private int _CylinderHeadTypeID;
		
		private int _FuelTypeID;
		
		private int _IgnitionSystemTypeID;
		
		private int _EngineMfrID;
		
		private int _EngineVersionID;
		
		private int _PowerOutputID;
		
		private EntityRef<Aspiration> _Aspiration;
		
		private EntityRef<CylinderHeadType> _CylinderHeadType;
		
		private EntityRef<EngineBase> _EngineBase;
		
		private EntityRef<EngineDesignation> _EngineDesignation;
		
		private EntityRef<EngineVersion> _EngineVersion;
		
		private EntityRef<EngineVIN> _EngineVIN;
		
		private EntityRef<FuelDeliveryConfig> _FuelDeliveryConfig;
		
		private EntityRef<FuelType> _FuelType;
		
		private EntityRef<IgnitionSystemType> _IgnitionSystemType;
		
		private EntityRef<Mfr> _Mfr;
		
		private EntityRef<Valve> _Valve;
		
		private EntityRef<Valve> _Valve1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineConfigIDChanging(int value);
    partial void OnEngineConfigIDChanged();
    partial void OnEngineDesignationIDChanging(int value);
    partial void OnEngineDesignationIDChanged();
    partial void OnEngineVINIDChanging(int value);
    partial void OnEngineVINIDChanged();
    partial void OnValvesIDChanging(int value);
    partial void OnValvesIDChanged();
    partial void OnEngineBaseIDChanging(int value);
    partial void OnEngineBaseIDChanged();
    partial void OnFuelDeliveryConfigIDChanging(int value);
    partial void OnFuelDeliveryConfigIDChanged();
    partial void OnAspirationIDChanging(int value);
    partial void OnAspirationIDChanged();
    partial void OnCylinderHeadTypeIDChanging(int value);
    partial void OnCylinderHeadTypeIDChanged();
    partial void OnFuelTypeIDChanging(int value);
    partial void OnFuelTypeIDChanged();
    partial void OnIgnitionSystemTypeIDChanging(int value);
    partial void OnIgnitionSystemTypeIDChanged();
    partial void OnEngineMfrIDChanging(int value);
    partial void OnEngineMfrIDChanged();
    partial void OnEngineVersionIDChanging(int value);
    partial void OnEngineVersionIDChanged();
    partial void OnPowerOutputIDChanging(int value);
    partial void OnPowerOutputIDChanged();
    #endregion
		
		public EngineConfig()
		{
			this._Aspiration = default(EntityRef<Aspiration>);
			this._CylinderHeadType = default(EntityRef<CylinderHeadType>);
			this._EngineBase = default(EntityRef<EngineBase>);
			this._EngineDesignation = default(EntityRef<EngineDesignation>);
			this._EngineVersion = default(EntityRef<EngineVersion>);
			this._EngineVIN = default(EntityRef<EngineVIN>);
			this._FuelDeliveryConfig = default(EntityRef<FuelDeliveryConfig>);
			this._FuelType = default(EntityRef<FuelType>);
			this._IgnitionSystemType = default(EntityRef<IgnitionSystemType>);
			this._Mfr = default(EntityRef<Mfr>);
			this._Valve = default(EntityRef<Valve>);
			this._Valve1 = default(EntityRef<Valve>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineConfigID
		{
			get
			{
				return this._EngineConfigID;
			}
			set
			{
				if ((this._EngineConfigID != value))
				{
					this.OnEngineConfigIDChanging(value);
					this.SendPropertyChanging();
					this._EngineConfigID = value;
					this.SendPropertyChanged("EngineConfigID");
					this.OnEngineConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineDesignationID", DbType="Int NOT NULL")]
		public int EngineDesignationID
		{
			get
			{
				return this._EngineDesignationID;
			}
			set
			{
				if ((this._EngineDesignationID != value))
				{
					if (this._EngineDesignation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._EngineDesignationID = value;
					this.SendPropertyChanged("EngineDesignationID");
					this.OnEngineDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineVINID", DbType="Int NOT NULL")]
		public int EngineVINID
		{
			get
			{
				return this._EngineVINID;
			}
			set
			{
				if ((this._EngineVINID != value))
				{
					if (this._EngineVIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineVINIDChanging(value);
					this.SendPropertyChanging();
					this._EngineVINID = value;
					this.SendPropertyChanged("EngineVINID");
					this.OnEngineVINIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValvesID", DbType="Int NOT NULL")]
		public int ValvesID
		{
			get
			{
				return this._ValvesID;
			}
			set
			{
				if ((this._ValvesID != value))
				{
					if ((this._Valve.HasLoadedOrAssignedValue || this._Valve1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValvesIDChanging(value);
					this.SendPropertyChanging();
					this._ValvesID = value;
					this.SendPropertyChanged("ValvesID");
					this.OnValvesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineBaseID", DbType="Int NOT NULL")]
		public int EngineBaseID
		{
			get
			{
				return this._EngineBaseID;
			}
			set
			{
				if ((this._EngineBaseID != value))
				{
					if (this._EngineBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineBaseIDChanging(value);
					this.SendPropertyChanging();
					this._EngineBaseID = value;
					this.SendPropertyChanged("EngineBaseID");
					this.OnEngineBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliveryConfigID", DbType="Int NOT NULL")]
		public int FuelDeliveryConfigID
		{
			get
			{
				return this._FuelDeliveryConfigID;
			}
			set
			{
				if ((this._FuelDeliveryConfigID != value))
				{
					if (this._FuelDeliveryConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelDeliveryConfigIDChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliveryConfigID = value;
					this.SendPropertyChanged("FuelDeliveryConfigID");
					this.OnFuelDeliveryConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspirationID", DbType="Int NOT NULL")]
		public int AspirationID
		{
			get
			{
				return this._AspirationID;
			}
			set
			{
				if ((this._AspirationID != value))
				{
					if (this._Aspiration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAspirationIDChanging(value);
					this.SendPropertyChanging();
					this._AspirationID = value;
					this.SendPropertyChanged("AspirationID");
					this.OnAspirationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CylinderHeadTypeID", DbType="Int NOT NULL")]
		public int CylinderHeadTypeID
		{
			get
			{
				return this._CylinderHeadTypeID;
			}
			set
			{
				if ((this._CylinderHeadTypeID != value))
				{
					if (this._CylinderHeadType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCylinderHeadTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CylinderHeadTypeID = value;
					this.SendPropertyChanged("CylinderHeadTypeID");
					this.OnCylinderHeadTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTypeID", DbType="Int NOT NULL")]
		public int FuelTypeID
		{
			get
			{
				return this._FuelTypeID;
			}
			set
			{
				if ((this._FuelTypeID != value))
				{
					if (this._FuelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelTypeID = value;
					this.SendPropertyChanged("FuelTypeID");
					this.OnFuelTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IgnitionSystemTypeID", DbType="Int NOT NULL")]
		public int IgnitionSystemTypeID
		{
			get
			{
				return this._IgnitionSystemTypeID;
			}
			set
			{
				if ((this._IgnitionSystemTypeID != value))
				{
					if (this._IgnitionSystemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIgnitionSystemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._IgnitionSystemTypeID = value;
					this.SendPropertyChanged("IgnitionSystemTypeID");
					this.OnIgnitionSystemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineMfrID", DbType="Int NOT NULL")]
		public int EngineMfrID
		{
			get
			{
				return this._EngineMfrID;
			}
			set
			{
				if ((this._EngineMfrID != value))
				{
					if (this._Mfr.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineMfrIDChanging(value);
					this.SendPropertyChanging();
					this._EngineMfrID = value;
					this.SendPropertyChanged("EngineMfrID");
					this.OnEngineMfrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineVersionID", DbType="Int NOT NULL")]
		public int EngineVersionID
		{
			get
			{
				return this._EngineVersionID;
			}
			set
			{
				if ((this._EngineVersionID != value))
				{
					if (this._EngineVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineVersionIDChanging(value);
					this.SendPropertyChanging();
					this._EngineVersionID = value;
					this.SendPropertyChanged("EngineVersionID");
					this.OnEngineVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerOutputID", DbType="Int NOT NULL")]
		public int PowerOutputID
		{
			get
			{
				return this._PowerOutputID;
			}
			set
			{
				if ((this._PowerOutputID != value))
				{
					this.OnPowerOutputIDChanging(value);
					this.SendPropertyChanging();
					this._PowerOutputID = value;
					this.SendPropertyChanged("PowerOutputID");
					this.OnPowerOutputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aspiration_EngineConfig", Storage="_Aspiration", ThisKey="AspirationID", OtherKey="AspirationID", IsForeignKey=true)]
		public Aspiration Aspiration
		{
			get
			{
				return this._Aspiration.Entity;
			}
			set
			{
				Aspiration previousValue = this._Aspiration.Entity;
				if (((previousValue != value) 
							|| (this._Aspiration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Aspiration.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._Aspiration.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._AspirationID = value.AspirationID;
					}
					else
					{
						this._AspirationID = default(int);
					}
					this.SendPropertyChanged("Aspiration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CylinderHeadType_EngineConfig", Storage="_CylinderHeadType", ThisKey="CylinderHeadTypeID", OtherKey="CylinderHeadTypeID", IsForeignKey=true)]
		public CylinderHeadType CylinderHeadType
		{
			get
			{
				return this._CylinderHeadType.Entity;
			}
			set
			{
				CylinderHeadType previousValue = this._CylinderHeadType.Entity;
				if (((previousValue != value) 
							|| (this._CylinderHeadType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CylinderHeadType.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._CylinderHeadType.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._CylinderHeadTypeID = value.CylinderHeadTypeID;
					}
					else
					{
						this._CylinderHeadTypeID = default(int);
					}
					this.SendPropertyChanged("CylinderHeadType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineBase_EngineConfig", Storage="_EngineBase", ThisKey="EngineBaseID", OtherKey="EngineBaseID", IsForeignKey=true)]
		public EngineBase EngineBase
		{
			get
			{
				return this._EngineBase.Entity;
			}
			set
			{
				EngineBase previousValue = this._EngineBase.Entity;
				if (((previousValue != value) 
							|| (this._EngineBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EngineBase.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._EngineBase.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._EngineBaseID = value.EngineBaseID;
					}
					else
					{
						this._EngineBaseID = default(int);
					}
					this.SendPropertyChanged("EngineBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineDesignation_EngineConfig", Storage="_EngineDesignation", ThisKey="EngineDesignationID", OtherKey="EngineDesignationID", IsForeignKey=true)]
		public EngineDesignation EngineDesignation
		{
			get
			{
				return this._EngineDesignation.Entity;
			}
			set
			{
				EngineDesignation previousValue = this._EngineDesignation.Entity;
				if (((previousValue != value) 
							|| (this._EngineDesignation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EngineDesignation.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._EngineDesignation.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._EngineDesignationID = value.EngineDesignationID;
					}
					else
					{
						this._EngineDesignationID = default(int);
					}
					this.SendPropertyChanged("EngineDesignation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineVersion_EngineConfig", Storage="_EngineVersion", ThisKey="EngineVersionID", OtherKey="EngineVersionID", IsForeignKey=true)]
		public EngineVersion EngineVersion
		{
			get
			{
				return this._EngineVersion.Entity;
			}
			set
			{
				EngineVersion previousValue = this._EngineVersion.Entity;
				if (((previousValue != value) 
							|| (this._EngineVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EngineVersion.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._EngineVersion.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._EngineVersionID = value.EngineVersionID;
					}
					else
					{
						this._EngineVersionID = default(int);
					}
					this.SendPropertyChanged("EngineVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineVIN_EngineConfig", Storage="_EngineVIN", ThisKey="EngineVINID", OtherKey="EngineVINID", IsForeignKey=true)]
		public EngineVIN EngineVIN
		{
			get
			{
				return this._EngineVIN.Entity;
			}
			set
			{
				EngineVIN previousValue = this._EngineVIN.Entity;
				if (((previousValue != value) 
							|| (this._EngineVIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EngineVIN.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._EngineVIN.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._EngineVINID = value.EngineVINID;
					}
					else
					{
						this._EngineVINID = default(int);
					}
					this.SendPropertyChanged("EngineVIN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelDeliveryConfig_EngineConfig", Storage="_FuelDeliveryConfig", ThisKey="FuelDeliveryConfigID", OtherKey="FuelDeliveryConfigID", IsForeignKey=true)]
		public FuelDeliveryConfig FuelDeliveryConfig
		{
			get
			{
				return this._FuelDeliveryConfig.Entity;
			}
			set
			{
				FuelDeliveryConfig previousValue = this._FuelDeliveryConfig.Entity;
				if (((previousValue != value) 
							|| (this._FuelDeliveryConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelDeliveryConfig.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._FuelDeliveryConfig.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._FuelDeliveryConfigID = value.FuelDeliveryConfigID;
					}
					else
					{
						this._FuelDeliveryConfigID = default(int);
					}
					this.SendPropertyChanged("FuelDeliveryConfig");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_EngineConfig", Storage="_FuelType", ThisKey="FuelTypeID", OtherKey="FuelTypeID", IsForeignKey=true)]
		public FuelType FuelType
		{
			get
			{
				return this._FuelType.Entity;
			}
			set
			{
				FuelType previousValue = this._FuelType.Entity;
				if (((previousValue != value) 
							|| (this._FuelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelType.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._FuelType.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._FuelTypeID = value.FuelTypeID;
					}
					else
					{
						this._FuelTypeID = default(int);
					}
					this.SendPropertyChanged("FuelType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IgnitionSystemType_EngineConfig", Storage="_IgnitionSystemType", ThisKey="IgnitionSystemTypeID", OtherKey="IgnitionSystemTypeID", IsForeignKey=true)]
		public IgnitionSystemType IgnitionSystemType
		{
			get
			{
				return this._IgnitionSystemType.Entity;
			}
			set
			{
				IgnitionSystemType previousValue = this._IgnitionSystemType.Entity;
				if (((previousValue != value) 
							|| (this._IgnitionSystemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IgnitionSystemType.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._IgnitionSystemType.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._IgnitionSystemTypeID = value.IgnitionSystemTypeID;
					}
					else
					{
						this._IgnitionSystemTypeID = default(int);
					}
					this.SendPropertyChanged("IgnitionSystemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mfr_EngineConfig", Storage="_Mfr", ThisKey="EngineMfrID", OtherKey="MfrID", IsForeignKey=true)]
		public Mfr Mfr
		{
			get
			{
				return this._Mfr.Entity;
			}
			set
			{
				Mfr previousValue = this._Mfr.Entity;
				if (((previousValue != value) 
							|| (this._Mfr.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mfr.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._Mfr.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._EngineMfrID = value.MfrID;
					}
					else
					{
						this._EngineMfrID = default(int);
					}
					this.SendPropertyChanged("Mfr");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Valve_EngineConfig", Storage="_Valve", ThisKey="ValvesID", OtherKey="ValvesID", IsForeignKey=true)]
		public Valve Valve
		{
			get
			{
				return this._Valve.Entity;
			}
			set
			{
				Valve previousValue = this._Valve.Entity;
				if (((previousValue != value) 
							|| (this._Valve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Valve.Entity = null;
						previousValue.EngineConfigs.Remove(this);
					}
					this._Valve.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs.Add(this);
						this._ValvesID = value.ValvesID;
					}
					else
					{
						this._ValvesID = default(int);
					}
					this.SendPropertyChanged("Valve");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Valve_EngineConfig1", Storage="_Valve1", ThisKey="ValvesID", OtherKey="ValvesID", IsForeignKey=true)]
		public Valve Valve1
		{
			get
			{
				return this._Valve1.Entity;
			}
			set
			{
				Valve previousValue = this._Valve1.Entity;
				if (((previousValue != value) 
							|| (this._Valve1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Valve1.Entity = null;
						previousValue.EngineConfigs1.Remove(this);
					}
					this._Valve1.Entity = value;
					if ((value != null))
					{
						value.EngineConfigs1.Add(this);
						this._ValvesID = value.ValvesID;
					}
					else
					{
						this._ValvesID = default(int);
					}
					this.SendPropertyChanged("Valve1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineDesignation")]
	public partial class EngineDesignation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineDesignationID;
		
		private string _EngineDesignationName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineDesignationIDChanging(int value);
    partial void OnEngineDesignationIDChanged();
    partial void OnEngineDesignationNameChanging(string value);
    partial void OnEngineDesignationNameChanged();
    #endregion
		
		public EngineDesignation()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineDesignationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineDesignationID
		{
			get
			{
				return this._EngineDesignationID;
			}
			set
			{
				if ((this._EngineDesignationID != value))
				{
					this.OnEngineDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._EngineDesignationID = value;
					this.SendPropertyChanged("EngineDesignationID");
					this.OnEngineDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineDesignationName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string EngineDesignationName
		{
			get
			{
				return this._EngineDesignationName;
			}
			set
			{
				if ((this._EngineDesignationName != value))
				{
					this.OnEngineDesignationNameChanging(value);
					this.SendPropertyChanging();
					this._EngineDesignationName = value;
					this.SendPropertyChanged("EngineDesignationName");
					this.OnEngineDesignationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineDesignation_EngineConfig", Storage="_EngineConfigs", ThisKey="EngineDesignationID", OtherKey="EngineDesignationID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineDesignation = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineDesignation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineLegacy")]
	public partial class EngineLegacy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineLegacyID;
		
		private string _EngType;
		
		private string _Liter;
		
		private string _CC;
		
		private string _CID;
		
		private string _Fuel;
		
		private string _FuelDel;
		
		private string _Asp;
		
		private string _EngVIN;
		
		private string _EngDesg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineLegacyIDChanging(int value);
    partial void OnEngineLegacyIDChanged();
    partial void OnEngTypeChanging(string value);
    partial void OnEngTypeChanged();
    partial void OnLiterChanging(string value);
    partial void OnLiterChanged();
    partial void OnCCChanging(string value);
    partial void OnCCChanged();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnFuelChanging(string value);
    partial void OnFuelChanged();
    partial void OnFuelDelChanging(string value);
    partial void OnFuelDelChanged();
    partial void OnAspChanging(string value);
    partial void OnAspChanged();
    partial void OnEngVINChanging(string value);
    partial void OnEngVINChanged();
    partial void OnEngDesgChanging(string value);
    partial void OnEngDesgChanged();
    #endregion
		
		public EngineLegacy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineLegacyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineLegacyID
		{
			get
			{
				return this._EngineLegacyID;
			}
			set
			{
				if ((this._EngineLegacyID != value))
				{
					this.OnEngineLegacyIDChanging(value);
					this.SendPropertyChanging();
					this._EngineLegacyID = value;
					this.SendPropertyChanged("EngineLegacyID");
					this.OnEngineLegacyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EngType
		{
			get
			{
				return this._EngType;
			}
			set
			{
				if ((this._EngType != value))
				{
					this.OnEngTypeChanging(value);
					this.SendPropertyChanging();
					this._EngType = value;
					this.SendPropertyChanged("EngType");
					this.OnEngTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liter", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Liter
		{
			get
			{
				return this._Liter;
			}
			set
			{
				if ((this._Liter != value))
				{
					this.OnLiterChanging(value);
					this.SendPropertyChanging();
					this._Liter = value;
					this.SendPropertyChanged("Liter");
					this.OnLiterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CC
		{
			get
			{
				return this._CC;
			}
			set
			{
				if ((this._CC != value))
				{
					this.OnCCChanging(value);
					this.SendPropertyChanging();
					this._CC = value;
					this.SendPropertyChanged("CC");
					this.OnCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fuel", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Fuel
		{
			get
			{
				return this._Fuel;
			}
			set
			{
				if ((this._Fuel != value))
				{
					this.OnFuelChanging(value);
					this.SendPropertyChanging();
					this._Fuel = value;
					this.SendPropertyChanged("Fuel");
					this.OnFuelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDel", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string FuelDel
		{
			get
			{
				return this._FuelDel;
			}
			set
			{
				if ((this._FuelDel != value))
				{
					this.OnFuelDelChanging(value);
					this.SendPropertyChanging();
					this._FuelDel = value;
					this.SendPropertyChanged("FuelDel");
					this.OnFuelDelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Asp", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Asp
		{
			get
			{
				return this._Asp;
			}
			set
			{
				if ((this._Asp != value))
				{
					this.OnAspChanging(value);
					this.SendPropertyChanging();
					this._Asp = value;
					this.SendPropertyChanged("Asp");
					this.OnAspChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngVIN", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EngVIN
		{
			get
			{
				return this._EngVIN;
			}
			set
			{
				if ((this._EngVIN != value))
				{
					this.OnEngVINChanging(value);
					this.SendPropertyChanging();
					this._EngVIN = value;
					this.SendPropertyChanged("EngVIN");
					this.OnEngVINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngDesg", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EngDesg
		{
			get
			{
				return this._EngDesg;
			}
			set
			{
				if ((this._EngDesg != value))
				{
					this.OnEngDesgChanging(value);
					this.SendPropertyChanging();
					this._EngDesg = value;
					this.SendPropertyChanged("EngDesg");
					this.OnEngDesgChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineVersion")]
	public partial class EngineVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineVersionID;
		
		private string _EngineVersion1;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineVersionIDChanging(int value);
    partial void OnEngineVersionIDChanged();
    partial void OnEngineVersion1Changing(string value);
    partial void OnEngineVersion1Changed();
    #endregion
		
		public EngineVersion()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineVersionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineVersionID
		{
			get
			{
				return this._EngineVersionID;
			}
			set
			{
				if ((this._EngineVersionID != value))
				{
					this.OnEngineVersionIDChanging(value);
					this.SendPropertyChanging();
					this._EngineVersionID = value;
					this.SendPropertyChanged("EngineVersionID");
					this.OnEngineVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EngineVersion", Storage="_EngineVersion1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EngineVersion1
		{
			get
			{
				return this._EngineVersion1;
			}
			set
			{
				if ((this._EngineVersion1 != value))
				{
					this.OnEngineVersion1Changing(value);
					this.SendPropertyChanging();
					this._EngineVersion1 = value;
					this.SendPropertyChanged("EngineVersion1");
					this.OnEngineVersion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineVersion_EngineConfig", Storage="_EngineConfigs", ThisKey="EngineVersionID", OtherKey="EngineVersionID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineVersion = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineVersion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineVIN")]
	public partial class EngineVIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineVINID;
		
		private string _EngineVINName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineVINIDChanging(int value);
    partial void OnEngineVINIDChanged();
    partial void OnEngineVINNameChanging(string value);
    partial void OnEngineVINNameChanged();
    #endregion
		
		public EngineVIN()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineVINID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineVINID
		{
			get
			{
				return this._EngineVINID;
			}
			set
			{
				if ((this._EngineVINID != value))
				{
					this.OnEngineVINIDChanging(value);
					this.SendPropertyChanging();
					this._EngineVINID = value;
					this.SendPropertyChanged("EngineVINID");
					this.OnEngineVINIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineVINName", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string EngineVINName
		{
			get
			{
				return this._EngineVINName;
			}
			set
			{
				if ((this._EngineVINName != value))
				{
					this.OnEngineVINNameChanging(value);
					this.SendPropertyChanging();
					this._EngineVINName = value;
					this.SendPropertyChanged("EngineVINName");
					this.OnEngineVINNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EngineVIN_EngineConfig", Storage="_EngineConfigs", ThisKey="EngineVINID", OtherKey="EngineVINID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineVIN = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.EngineVIN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnglishPhrase")]
	public partial class EnglishPhrase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnglishPhraseID;
		
		private string _EnglishPhrase1;
		
		private EntitySet<LanguageTranslation> _LanguageTranslations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnglishPhraseIDChanging(int value);
    partial void OnEnglishPhraseIDChanged();
    partial void OnEnglishPhrase1Changing(string value);
    partial void OnEnglishPhrase1Changed();
    #endregion
		
		public EnglishPhrase()
		{
			this._LanguageTranslations = new EntitySet<LanguageTranslation>(new Action<LanguageTranslation>(this.attach_LanguageTranslations), new Action<LanguageTranslation>(this.detach_LanguageTranslations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishPhraseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnglishPhraseID
		{
			get
			{
				return this._EnglishPhraseID;
			}
			set
			{
				if ((this._EnglishPhraseID != value))
				{
					this.OnEnglishPhraseIDChanging(value);
					this.SendPropertyChanging();
					this._EnglishPhraseID = value;
					this.SendPropertyChanged("EnglishPhraseID");
					this.OnEnglishPhraseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EnglishPhrase", Storage="_EnglishPhrase1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EnglishPhrase1
		{
			get
			{
				return this._EnglishPhrase1;
			}
			set
			{
				if ((this._EnglishPhrase1 != value))
				{
					this.OnEnglishPhrase1Changing(value);
					this.SendPropertyChanging();
					this._EnglishPhrase1 = value;
					this.SendPropertyChanged("EnglishPhrase1");
					this.OnEnglishPhrase1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnglishPhrase_LanguageTranslation", Storage="_LanguageTranslations", ThisKey="EnglishPhraseID", OtherKey="EnglishPhraseID")]
		public EntitySet<LanguageTranslation> LanguageTranslations
		{
			get
			{
				return this._LanguageTranslations;
			}
			set
			{
				this._LanguageTranslations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LanguageTranslations(LanguageTranslation entity)
		{
			this.SendPropertyChanging();
			entity.EnglishPhrase = this;
		}
		
		private void detach_LanguageTranslations(LanguageTranslation entity)
		{
			this.SendPropertyChanging();
			entity.EnglishPhrase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelDeliveryConfig")]
	public partial class FuelDeliveryConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelDeliveryConfigID;
		
		private int _FuelDeliveryTypeID;
		
		private int _FuelDeliverySubTypeID;
		
		private int _FuelSystemControlTypeID;
		
		private int _FuelSystemDesignID;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
		private EntityRef<FuelDeliverySubType> _FuelDeliverySubType;
		
		private EntityRef<FuelDeliveryType> _FuelDeliveryType;
		
		private EntityRef<FuelSystemControlType> _FuelSystemControlType;
		
		private EntityRef<FuelSystemDesign> _FuelSystemDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelDeliveryConfigIDChanging(int value);
    partial void OnFuelDeliveryConfigIDChanged();
    partial void OnFuelDeliveryTypeIDChanging(int value);
    partial void OnFuelDeliveryTypeIDChanged();
    partial void OnFuelDeliverySubTypeIDChanging(int value);
    partial void OnFuelDeliverySubTypeIDChanged();
    partial void OnFuelSystemControlTypeIDChanging(int value);
    partial void OnFuelSystemControlTypeIDChanged();
    partial void OnFuelSystemDesignIDChanging(int value);
    partial void OnFuelSystemDesignIDChanged();
    #endregion
		
		public FuelDeliveryConfig()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			this._FuelDeliverySubType = default(EntityRef<FuelDeliverySubType>);
			this._FuelDeliveryType = default(EntityRef<FuelDeliveryType>);
			this._FuelSystemControlType = default(EntityRef<FuelSystemControlType>);
			this._FuelSystemDesign = default(EntityRef<FuelSystemDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliveryConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelDeliveryConfigID
		{
			get
			{
				return this._FuelDeliveryConfigID;
			}
			set
			{
				if ((this._FuelDeliveryConfigID != value))
				{
					this.OnFuelDeliveryConfigIDChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliveryConfigID = value;
					this.SendPropertyChanged("FuelDeliveryConfigID");
					this.OnFuelDeliveryConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliveryTypeID", DbType="Int NOT NULL")]
		public int FuelDeliveryTypeID
		{
			get
			{
				return this._FuelDeliveryTypeID;
			}
			set
			{
				if ((this._FuelDeliveryTypeID != value))
				{
					if (this._FuelDeliveryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelDeliveryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliveryTypeID = value;
					this.SendPropertyChanged("FuelDeliveryTypeID");
					this.OnFuelDeliveryTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliverySubTypeID", DbType="Int NOT NULL")]
		public int FuelDeliverySubTypeID
		{
			get
			{
				return this._FuelDeliverySubTypeID;
			}
			set
			{
				if ((this._FuelDeliverySubTypeID != value))
				{
					if (this._FuelDeliverySubType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelDeliverySubTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliverySubTypeID = value;
					this.SendPropertyChanged("FuelDeliverySubTypeID");
					this.OnFuelDeliverySubTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSystemControlTypeID", DbType="Int NOT NULL")]
		public int FuelSystemControlTypeID
		{
			get
			{
				return this._FuelSystemControlTypeID;
			}
			set
			{
				if ((this._FuelSystemControlTypeID != value))
				{
					if (this._FuelSystemControlType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelSystemControlTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelSystemControlTypeID = value;
					this.SendPropertyChanged("FuelSystemControlTypeID");
					this.OnFuelSystemControlTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSystemDesignID", DbType="Int NOT NULL")]
		public int FuelSystemDesignID
		{
			get
			{
				return this._FuelSystemDesignID;
			}
			set
			{
				if ((this._FuelSystemDesignID != value))
				{
					if (this._FuelSystemDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelSystemDesignIDChanging(value);
					this.SendPropertyChanging();
					this._FuelSystemDesignID = value;
					this.SendPropertyChanged("FuelSystemDesignID");
					this.OnFuelSystemDesignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelDeliveryConfig_EngineConfig", Storage="_EngineConfigs", ThisKey="FuelDeliveryConfigID", OtherKey="FuelDeliveryConfigID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelDeliverySubType_FuelDeliveryConfig", Storage="_FuelDeliverySubType", ThisKey="FuelDeliverySubTypeID", OtherKey="FuelDeliverySubTypeID", IsForeignKey=true)]
		public FuelDeliverySubType FuelDeliverySubType
		{
			get
			{
				return this._FuelDeliverySubType.Entity;
			}
			set
			{
				FuelDeliverySubType previousValue = this._FuelDeliverySubType.Entity;
				if (((previousValue != value) 
							|| (this._FuelDeliverySubType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelDeliverySubType.Entity = null;
						previousValue.FuelDeliveryConfigs.Remove(this);
					}
					this._FuelDeliverySubType.Entity = value;
					if ((value != null))
					{
						value.FuelDeliveryConfigs.Add(this);
						this._FuelDeliverySubTypeID = value.FuelDeliverySubTypeID;
					}
					else
					{
						this._FuelDeliverySubTypeID = default(int);
					}
					this.SendPropertyChanged("FuelDeliverySubType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelDeliveryType_FuelDeliveryConfig", Storage="_FuelDeliveryType", ThisKey="FuelDeliveryTypeID", OtherKey="FuelDeliveryTypeID", IsForeignKey=true)]
		public FuelDeliveryType FuelDeliveryType
		{
			get
			{
				return this._FuelDeliveryType.Entity;
			}
			set
			{
				FuelDeliveryType previousValue = this._FuelDeliveryType.Entity;
				if (((previousValue != value) 
							|| (this._FuelDeliveryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelDeliveryType.Entity = null;
						previousValue.FuelDeliveryConfigs.Remove(this);
					}
					this._FuelDeliveryType.Entity = value;
					if ((value != null))
					{
						value.FuelDeliveryConfigs.Add(this);
						this._FuelDeliveryTypeID = value.FuelDeliveryTypeID;
					}
					else
					{
						this._FuelDeliveryTypeID = default(int);
					}
					this.SendPropertyChanged("FuelDeliveryType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelSystemControlType_FuelDeliveryConfig", Storage="_FuelSystemControlType", ThisKey="FuelSystemControlTypeID", OtherKey="FuelSystemControlTypeID", IsForeignKey=true)]
		public FuelSystemControlType FuelSystemControlType
		{
			get
			{
				return this._FuelSystemControlType.Entity;
			}
			set
			{
				FuelSystemControlType previousValue = this._FuelSystemControlType.Entity;
				if (((previousValue != value) 
							|| (this._FuelSystemControlType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelSystemControlType.Entity = null;
						previousValue.FuelDeliveryConfigs.Remove(this);
					}
					this._FuelSystemControlType.Entity = value;
					if ((value != null))
					{
						value.FuelDeliveryConfigs.Add(this);
						this._FuelSystemControlTypeID = value.FuelSystemControlTypeID;
					}
					else
					{
						this._FuelSystemControlTypeID = default(int);
					}
					this.SendPropertyChanged("FuelSystemControlType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelSystemDesign_FuelDeliveryConfig", Storage="_FuelSystemDesign", ThisKey="FuelSystemDesignID", OtherKey="FuelSystemDesignID", IsForeignKey=true)]
		public FuelSystemDesign FuelSystemDesign
		{
			get
			{
				return this._FuelSystemDesign.Entity;
			}
			set
			{
				FuelSystemDesign previousValue = this._FuelSystemDesign.Entity;
				if (((previousValue != value) 
							|| (this._FuelSystemDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelSystemDesign.Entity = null;
						previousValue.FuelDeliveryConfigs.Remove(this);
					}
					this._FuelSystemDesign.Entity = value;
					if ((value != null))
					{
						value.FuelDeliveryConfigs.Add(this);
						this._FuelSystemDesignID = value.FuelSystemDesignID;
					}
					else
					{
						this._FuelSystemDesignID = default(int);
					}
					this.SendPropertyChanged("FuelSystemDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelDeliveryConfig = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelDeliveryConfig = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelDeliverySubType")]
	public partial class FuelDeliverySubType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelDeliverySubTypeID;
		
		private string _FuelDeliverySubTypeName;
		
		private EntitySet<FuelDeliveryConfig> _FuelDeliveryConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelDeliverySubTypeIDChanging(int value);
    partial void OnFuelDeliverySubTypeIDChanged();
    partial void OnFuelDeliverySubTypeNameChanging(string value);
    partial void OnFuelDeliverySubTypeNameChanged();
    #endregion
		
		public FuelDeliverySubType()
		{
			this._FuelDeliveryConfigs = new EntitySet<FuelDeliveryConfig>(new Action<FuelDeliveryConfig>(this.attach_FuelDeliveryConfigs), new Action<FuelDeliveryConfig>(this.detach_FuelDeliveryConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliverySubTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelDeliverySubTypeID
		{
			get
			{
				return this._FuelDeliverySubTypeID;
			}
			set
			{
				if ((this._FuelDeliverySubTypeID != value))
				{
					this.OnFuelDeliverySubTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliverySubTypeID = value;
					this.SendPropertyChanged("FuelDeliverySubTypeID");
					this.OnFuelDeliverySubTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliverySubTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FuelDeliverySubTypeName
		{
			get
			{
				return this._FuelDeliverySubTypeName;
			}
			set
			{
				if ((this._FuelDeliverySubTypeName != value))
				{
					this.OnFuelDeliverySubTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliverySubTypeName = value;
					this.SendPropertyChanged("FuelDeliverySubTypeName");
					this.OnFuelDeliverySubTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelDeliverySubType_FuelDeliveryConfig", Storage="_FuelDeliveryConfigs", ThisKey="FuelDeliverySubTypeID", OtherKey="FuelDeliverySubTypeID")]
		public EntitySet<FuelDeliveryConfig> FuelDeliveryConfigs
		{
			get
			{
				return this._FuelDeliveryConfigs;
			}
			set
			{
				this._FuelDeliveryConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelDeliverySubType = this;
		}
		
		private void detach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelDeliverySubType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelDeliveryType")]
	public partial class FuelDeliveryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelDeliveryTypeID;
		
		private string _FuelDeliveryTypeName;
		
		private EntitySet<FuelDeliveryConfig> _FuelDeliveryConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelDeliveryTypeIDChanging(int value);
    partial void OnFuelDeliveryTypeIDChanged();
    partial void OnFuelDeliveryTypeNameChanging(string value);
    partial void OnFuelDeliveryTypeNameChanged();
    #endregion
		
		public FuelDeliveryType()
		{
			this._FuelDeliveryConfigs = new EntitySet<FuelDeliveryConfig>(new Action<FuelDeliveryConfig>(this.attach_FuelDeliveryConfigs), new Action<FuelDeliveryConfig>(this.detach_FuelDeliveryConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliveryTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelDeliveryTypeID
		{
			get
			{
				return this._FuelDeliveryTypeID;
			}
			set
			{
				if ((this._FuelDeliveryTypeID != value))
				{
					this.OnFuelDeliveryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliveryTypeID = value;
					this.SendPropertyChanged("FuelDeliveryTypeID");
					this.OnFuelDeliveryTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelDeliveryTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FuelDeliveryTypeName
		{
			get
			{
				return this._FuelDeliveryTypeName;
			}
			set
			{
				if ((this._FuelDeliveryTypeName != value))
				{
					this.OnFuelDeliveryTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FuelDeliveryTypeName = value;
					this.SendPropertyChanged("FuelDeliveryTypeName");
					this.OnFuelDeliveryTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelDeliveryType_FuelDeliveryConfig", Storage="_FuelDeliveryConfigs", ThisKey="FuelDeliveryTypeID", OtherKey="FuelDeliveryTypeID")]
		public EntitySet<FuelDeliveryConfig> FuelDeliveryConfigs
		{
			get
			{
				return this._FuelDeliveryConfigs;
			}
			set
			{
				this._FuelDeliveryConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelDeliveryType = this;
		}
		
		private void detach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelDeliveryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelSystemControlType")]
	public partial class FuelSystemControlType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelSystemControlTypeID;
		
		private string _FuelSystemControlTypeName;
		
		private EntitySet<FuelDeliveryConfig> _FuelDeliveryConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelSystemControlTypeIDChanging(int value);
    partial void OnFuelSystemControlTypeIDChanged();
    partial void OnFuelSystemControlTypeNameChanging(string value);
    partial void OnFuelSystemControlTypeNameChanged();
    #endregion
		
		public FuelSystemControlType()
		{
			this._FuelDeliveryConfigs = new EntitySet<FuelDeliveryConfig>(new Action<FuelDeliveryConfig>(this.attach_FuelDeliveryConfigs), new Action<FuelDeliveryConfig>(this.detach_FuelDeliveryConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSystemControlTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelSystemControlTypeID
		{
			get
			{
				return this._FuelSystemControlTypeID;
			}
			set
			{
				if ((this._FuelSystemControlTypeID != value))
				{
					this.OnFuelSystemControlTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelSystemControlTypeID = value;
					this.SendPropertyChanged("FuelSystemControlTypeID");
					this.OnFuelSystemControlTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSystemControlTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FuelSystemControlTypeName
		{
			get
			{
				return this._FuelSystemControlTypeName;
			}
			set
			{
				if ((this._FuelSystemControlTypeName != value))
				{
					this.OnFuelSystemControlTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FuelSystemControlTypeName = value;
					this.SendPropertyChanged("FuelSystemControlTypeName");
					this.OnFuelSystemControlTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelSystemControlType_FuelDeliveryConfig", Storage="_FuelDeliveryConfigs", ThisKey="FuelSystemControlTypeID", OtherKey="FuelSystemControlTypeID")]
		public EntitySet<FuelDeliveryConfig> FuelDeliveryConfigs
		{
			get
			{
				return this._FuelDeliveryConfigs;
			}
			set
			{
				this._FuelDeliveryConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelSystemControlType = this;
		}
		
		private void detach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelSystemControlType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelSystemDesign")]
	public partial class FuelSystemDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelSystemDesignID;
		
		private string _FuelSystemDesignName;
		
		private EntitySet<FuelDeliveryConfig> _FuelDeliveryConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelSystemDesignIDChanging(int value);
    partial void OnFuelSystemDesignIDChanged();
    partial void OnFuelSystemDesignNameChanging(string value);
    partial void OnFuelSystemDesignNameChanged();
    #endregion
		
		public FuelSystemDesign()
		{
			this._FuelDeliveryConfigs = new EntitySet<FuelDeliveryConfig>(new Action<FuelDeliveryConfig>(this.attach_FuelDeliveryConfigs), new Action<FuelDeliveryConfig>(this.detach_FuelDeliveryConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSystemDesignID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelSystemDesignID
		{
			get
			{
				return this._FuelSystemDesignID;
			}
			set
			{
				if ((this._FuelSystemDesignID != value))
				{
					this.OnFuelSystemDesignIDChanging(value);
					this.SendPropertyChanging();
					this._FuelSystemDesignID = value;
					this.SendPropertyChanged("FuelSystemDesignID");
					this.OnFuelSystemDesignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSystemDesignName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FuelSystemDesignName
		{
			get
			{
				return this._FuelSystemDesignName;
			}
			set
			{
				if ((this._FuelSystemDesignName != value))
				{
					this.OnFuelSystemDesignNameChanging(value);
					this.SendPropertyChanging();
					this._FuelSystemDesignName = value;
					this.SendPropertyChanged("FuelSystemDesignName");
					this.OnFuelSystemDesignNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelSystemDesign_FuelDeliveryConfig", Storage="_FuelDeliveryConfigs", ThisKey="FuelSystemDesignID", OtherKey="FuelSystemDesignID")]
		public EntitySet<FuelDeliveryConfig> FuelDeliveryConfigs
		{
			get
			{
				return this._FuelDeliveryConfigs;
			}
			set
			{
				this._FuelDeliveryConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelSystemDesign = this;
		}
		
		private void detach_FuelDeliveryConfigs(FuelDeliveryConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelSystemDesign = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelType")]
	public partial class FuelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelTypeID;
		
		private string _FuelTypeName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelTypeIDChanging(int value);
    partial void OnFuelTypeIDChanged();
    partial void OnFuelTypeNameChanging(string value);
    partial void OnFuelTypeNameChanged();
    #endregion
		
		public FuelType()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelTypeID
		{
			get
			{
				return this._FuelTypeID;
			}
			set
			{
				if ((this._FuelTypeID != value))
				{
					this.OnFuelTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelTypeID = value;
					this.SendPropertyChanged("FuelTypeID");
					this.OnFuelTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FuelTypeName
		{
			get
			{
				return this._FuelTypeName;
			}
			set
			{
				if ((this._FuelTypeName != value))
				{
					this.OnFuelTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FuelTypeName = value;
					this.SendPropertyChanged("FuelTypeName");
					this.OnFuelTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_EngineConfig", Storage="_EngineConfigs", ThisKey="FuelTypeID", OtherKey="FuelTypeID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IgnitionSystemType")]
	public partial class IgnitionSystemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IgnitionSystemTypeID;
		
		private string _IgnitionSystemTypeName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIgnitionSystemTypeIDChanging(int value);
    partial void OnIgnitionSystemTypeIDChanged();
    partial void OnIgnitionSystemTypeNameChanging(string value);
    partial void OnIgnitionSystemTypeNameChanged();
    #endregion
		
		public IgnitionSystemType()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IgnitionSystemTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IgnitionSystemTypeID
		{
			get
			{
				return this._IgnitionSystemTypeID;
			}
			set
			{
				if ((this._IgnitionSystemTypeID != value))
				{
					this.OnIgnitionSystemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._IgnitionSystemTypeID = value;
					this.SendPropertyChanged("IgnitionSystemTypeID");
					this.OnIgnitionSystemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IgnitionSystemTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string IgnitionSystemTypeName
		{
			get
			{
				return this._IgnitionSystemTypeName;
			}
			set
			{
				if ((this._IgnitionSystemTypeName != value))
				{
					this.OnIgnitionSystemTypeNameChanging(value);
					this.SendPropertyChanging();
					this._IgnitionSystemTypeName = value;
					this.SendPropertyChanged("IgnitionSystemTypeName");
					this.OnIgnitionSystemTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IgnitionSystemType_EngineConfig", Storage="_EngineConfigs", ThisKey="IgnitionSystemTypeID", OtherKey="IgnitionSystemTypeID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.IgnitionSystemType = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.IgnitionSystemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _LanguageName;
		
		private string _DialectName;
		
		private EntitySet<LanguageTranslation> _LanguageTranslations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    partial void OnDialectNameChanging(string value);
    partial void OnDialectNameChanged();
    #endregion
		
		public Language()
		{
			this._LanguageTranslations = new EntitySet<LanguageTranslation>(new Action<LanguageTranslation>(this.attach_LanguageTranslations), new Action<LanguageTranslation>(this.detach_LanguageTranslations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DialectName", DbType="VarChar(20)")]
		public string DialectName
		{
			get
			{
				return this._DialectName;
			}
			set
			{
				if ((this._DialectName != value))
				{
					this.OnDialectNameChanging(value);
					this.SendPropertyChanging();
					this._DialectName = value;
					this.SendPropertyChanged("DialectName");
					this.OnDialectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_LanguageTranslation", Storage="_LanguageTranslations", ThisKey="LanguageID", OtherKey="LanguageID")]
		public EntitySet<LanguageTranslation> LanguageTranslations
		{
			get
			{
				return this._LanguageTranslations;
			}
			set
			{
				this._LanguageTranslations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LanguageTranslations(LanguageTranslation entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_LanguageTranslations(LanguageTranslation entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LanguageTranslation")]
	public partial class LanguageTranslation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageTranslationID;
		
		private int _EnglishPhraseID;
		
		private int _LanguageID;
		
		private string _Translation;
		
		private EntitySet<LanguageTranslationAttachment> _LanguageTranslationAttachments;
		
		private EntityRef<EnglishPhrase> _EnglishPhrase;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageTranslationIDChanging(int value);
    partial void OnLanguageTranslationIDChanged();
    partial void OnEnglishPhraseIDChanging(int value);
    partial void OnEnglishPhraseIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnTranslationChanging(string value);
    partial void OnTranslationChanged();
    #endregion
		
		public LanguageTranslation()
		{
			this._LanguageTranslationAttachments = new EntitySet<LanguageTranslationAttachment>(new Action<LanguageTranslationAttachment>(this.attach_LanguageTranslationAttachments), new Action<LanguageTranslationAttachment>(this.detach_LanguageTranslationAttachments));
			this._EnglishPhrase = default(EntityRef<EnglishPhrase>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageTranslationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageTranslationID
		{
			get
			{
				return this._LanguageTranslationID;
			}
			set
			{
				if ((this._LanguageTranslationID != value))
				{
					this.OnLanguageTranslationIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageTranslationID = value;
					this.SendPropertyChanged("LanguageTranslationID");
					this.OnLanguageTranslationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishPhraseID", DbType="Int NOT NULL")]
		public int EnglishPhraseID
		{
			get
			{
				return this._EnglishPhraseID;
			}
			set
			{
				if ((this._EnglishPhraseID != value))
				{
					if (this._EnglishPhrase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnglishPhraseIDChanging(value);
					this.SendPropertyChanging();
					this._EnglishPhraseID = value;
					this.SendPropertyChanged("EnglishPhraseID");
					this.OnEnglishPhraseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Translation", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Translation
		{
			get
			{
				return this._Translation;
			}
			set
			{
				if ((this._Translation != value))
				{
					this.OnTranslationChanging(value);
					this.SendPropertyChanging();
					this._Translation = value;
					this.SendPropertyChanged("Translation");
					this.OnTranslationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LanguageTranslation_LanguageTranslationAttachment", Storage="_LanguageTranslationAttachments", ThisKey="LanguageTranslationID", OtherKey="LanguageTranslationID")]
		public EntitySet<LanguageTranslationAttachment> LanguageTranslationAttachments
		{
			get
			{
				return this._LanguageTranslationAttachments;
			}
			set
			{
				this._LanguageTranslationAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnglishPhrase_LanguageTranslation", Storage="_EnglishPhrase", ThisKey="EnglishPhraseID", OtherKey="EnglishPhraseID", IsForeignKey=true)]
		public EnglishPhrase EnglishPhrase
		{
			get
			{
				return this._EnglishPhrase.Entity;
			}
			set
			{
				EnglishPhrase previousValue = this._EnglishPhrase.Entity;
				if (((previousValue != value) 
							|| (this._EnglishPhrase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnglishPhrase.Entity = null;
						previousValue.LanguageTranslations.Remove(this);
					}
					this._EnglishPhrase.Entity = value;
					if ((value != null))
					{
						value.LanguageTranslations.Add(this);
						this._EnglishPhraseID = value.EnglishPhraseID;
					}
					else
					{
						this._EnglishPhraseID = default(int);
					}
					this.SendPropertyChanged("EnglishPhrase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_LanguageTranslation", Storage="_Language", ThisKey="LanguageID", OtherKey="LanguageID", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.LanguageTranslations.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.LanguageTranslations.Add(this);
						this._LanguageID = value.LanguageID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LanguageTranslationAttachments(LanguageTranslationAttachment entity)
		{
			this.SendPropertyChanging();
			entity.LanguageTranslation = this;
		}
		
		private void detach_LanguageTranslationAttachments(LanguageTranslationAttachment entity)
		{
			this.SendPropertyChanging();
			entity.LanguageTranslation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LanguageTranslationAttachment")]
	public partial class LanguageTranslationAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageTranslationAttachmentID;
		
		private int _LanguageTranslationID;
		
		private int _AttachmentID;
		
		private EntityRef<Attachment> _Attachment;
		
		private EntityRef<LanguageTranslation> _LanguageTranslation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageTranslationAttachmentIDChanging(int value);
    partial void OnLanguageTranslationAttachmentIDChanged();
    partial void OnLanguageTranslationIDChanging(int value);
    partial void OnLanguageTranslationIDChanged();
    partial void OnAttachmentIDChanging(int value);
    partial void OnAttachmentIDChanged();
    #endregion
		
		public LanguageTranslationAttachment()
		{
			this._Attachment = default(EntityRef<Attachment>);
			this._LanguageTranslation = default(EntityRef<LanguageTranslation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageTranslationAttachmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageTranslationAttachmentID
		{
			get
			{
				return this._LanguageTranslationAttachmentID;
			}
			set
			{
				if ((this._LanguageTranslationAttachmentID != value))
				{
					this.OnLanguageTranslationAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageTranslationAttachmentID = value;
					this.SendPropertyChanged("LanguageTranslationAttachmentID");
					this.OnLanguageTranslationAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageTranslationID", DbType="Int NOT NULL")]
		public int LanguageTranslationID
		{
			get
			{
				return this._LanguageTranslationID;
			}
			set
			{
				if ((this._LanguageTranslationID != value))
				{
					if (this._LanguageTranslation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageTranslationIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageTranslationID = value;
					this.SendPropertyChanged("LanguageTranslationID");
					this.OnLanguageTranslationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentID", DbType="Int NOT NULL")]
		public int AttachmentID
		{
			get
			{
				return this._AttachmentID;
			}
			set
			{
				if ((this._AttachmentID != value))
				{
					if (this._Attachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentID = value;
					this.SendPropertyChanged("AttachmentID");
					this.OnAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_LanguageTranslationAttachment", Storage="_Attachment", ThisKey="AttachmentID", OtherKey="AttachmentID", IsForeignKey=true)]
		public Attachment Attachment
		{
			get
			{
				return this._Attachment.Entity;
			}
			set
			{
				Attachment previousValue = this._Attachment.Entity;
				if (((previousValue != value) 
							|| (this._Attachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attachment.Entity = null;
						previousValue.LanguageTranslationAttachments.Remove(this);
					}
					this._Attachment.Entity = value;
					if ((value != null))
					{
						value.LanguageTranslationAttachments.Add(this);
						this._AttachmentID = value.AttachmentID;
					}
					else
					{
						this._AttachmentID = default(int);
					}
					this.SendPropertyChanged("Attachment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LanguageTranslation_LanguageTranslationAttachment", Storage="_LanguageTranslation", ThisKey="LanguageTranslationID", OtherKey="LanguageTranslationID", IsForeignKey=true)]
		public LanguageTranslation LanguageTranslation
		{
			get
			{
				return this._LanguageTranslation.Entity;
			}
			set
			{
				LanguageTranslation previousValue = this._LanguageTranslation.Entity;
				if (((previousValue != value) 
							|| (this._LanguageTranslation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LanguageTranslation.Entity = null;
						previousValue.LanguageTranslationAttachments.Remove(this);
					}
					this._LanguageTranslation.Entity = value;
					if ((value != null))
					{
						value.LanguageTranslationAttachments.Add(this);
						this._LanguageTranslationID = value.LanguageTranslationID;
					}
					else
					{
						this._LanguageTranslationID = default(int);
					}
					this.SendPropertyChanged("LanguageTranslation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LegacyVehicle")]
	public partial class LegacyVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegacyVehicleID;
		
		private string _Year;
		
		private string _Make;
		
		private string _Model;
		
		private string _Submodel;
		
		private int _EngineLegacyID;
		
		private string _Country;
		
		private EntitySet<VehEngCfgToLegacyVehicle> _VehEngCfgToLegacyVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegacyVehicleIDChanging(int value);
    partial void OnLegacyVehicleIDChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnMakeChanging(string value);
    partial void OnMakeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnSubmodelChanging(string value);
    partial void OnSubmodelChanged();
    partial void OnEngineLegacyIDChanging(int value);
    partial void OnEngineLegacyIDChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public LegacyVehicle()
		{
			this._VehEngCfgToLegacyVehicles = new EntitySet<VehEngCfgToLegacyVehicle>(new Action<VehEngCfgToLegacyVehicle>(this.attach_VehEngCfgToLegacyVehicles), new Action<VehEngCfgToLegacyVehicle>(this.detach_VehEngCfgToLegacyVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegacyVehicleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LegacyVehicleID
		{
			get
			{
				return this._LegacyVehicleID;
			}
			set
			{
				if ((this._LegacyVehicleID != value))
				{
					this.OnLegacyVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._LegacyVehicleID = value;
					this.SendPropertyChanged("LegacyVehicleID");
					this.OnLegacyVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this.OnMakeChanging(value);
					this.SendPropertyChanging();
					this._Make = value;
					this.SendPropertyChanged("Make");
					this.OnMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Submodel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Submodel
		{
			get
			{
				return this._Submodel;
			}
			set
			{
				if ((this._Submodel != value))
				{
					this.OnSubmodelChanging(value);
					this.SendPropertyChanging();
					this._Submodel = value;
					this.SendPropertyChanged("Submodel");
					this.OnSubmodelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineLegacyID", DbType="Int NOT NULL")]
		public int EngineLegacyID
		{
			get
			{
				return this._EngineLegacyID;
			}
			set
			{
				if ((this._EngineLegacyID != value))
				{
					this.OnEngineLegacyIDChanging(value);
					this.SendPropertyChanging();
					this._EngineLegacyID = value;
					this.SendPropertyChanged("EngineLegacyID");
					this.OnEngineLegacyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LegacyVehicle_VehEngCfgToLegacyVehicle", Storage="_VehEngCfgToLegacyVehicles", ThisKey="LegacyVehicleID", OtherKey="LegacyVehicleID")]
		public EntitySet<VehEngCfgToLegacyVehicle> VehEngCfgToLegacyVehicles
		{
			get
			{
				return this._VehEngCfgToLegacyVehicles;
			}
			set
			{
				this._VehEngCfgToLegacyVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehEngCfgToLegacyVehicles(VehEngCfgToLegacyVehicle entity)
		{
			this.SendPropertyChanging();
			entity.LegacyVehicle = this;
		}
		
		private void detach_VehEngCfgToLegacyVehicles(VehEngCfgToLegacyVehicle entity)
		{
			this.SendPropertyChanging();
			entity.LegacyVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Make")]
	public partial class Make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MakeID;
		
		private string _MakeName;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMakeIDChanging(int value);
    partial void OnMakeIDChanged();
    partial void OnMakeNameChanging(string value);
    partial void OnMakeNameChanged();
    #endregion
		
		public Make()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MakeID
		{
			get
			{
				return this._MakeID;
			}
			set
			{
				if ((this._MakeID != value))
				{
					this.OnMakeIDChanging(value);
					this.SendPropertyChanging();
					this._MakeID = value;
					this.SendPropertyChanged("MakeID");
					this.OnMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MakeName
		{
			get
			{
				return this._MakeName;
			}
			set
			{
				if ((this._MakeName != value))
				{
					this.OnMakeNameChanging(value);
					this.SendPropertyChanging();
					this._MakeName = value;
					this.SendPropertyChanged("MakeName");
					this.OnMakeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_BaseVehicle", Storage="_BaseVehicles", ThisKey="MakeID", OtherKey="MakeID")]
		public EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Make = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mfr")]
	public partial class Mfr : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MfrID;
		
		private string _MfrName;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
		private EntitySet<Transmission> _Transmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMfrIDChanging(int value);
    partial void OnMfrIDChanged();
    partial void OnMfrNameChanging(string value);
    partial void OnMfrNameChanged();
    #endregion
		
		public Mfr()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			this._Transmissions = new EntitySet<Transmission>(new Action<Transmission>(this.attach_Transmissions), new Action<Transmission>(this.detach_Transmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfrID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MfrID
		{
			get
			{
				return this._MfrID;
			}
			set
			{
				if ((this._MfrID != value))
				{
					this.OnMfrIDChanging(value);
					this.SendPropertyChanging();
					this._MfrID = value;
					this.SendPropertyChanged("MfrID");
					this.OnMfrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfrName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string MfrName
		{
			get
			{
				return this._MfrName;
			}
			set
			{
				if ((this._MfrName != value))
				{
					this.OnMfrNameChanging(value);
					this.SendPropertyChanging();
					this._MfrName = value;
					this.SendPropertyChanged("MfrName");
					this.OnMfrNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mfr_EngineConfig", Storage="_EngineConfigs", ThisKey="MfrID", OtherKey="EngineMfrID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mfr_Transmission", Storage="_Transmissions", ThisKey="MfrID", OtherKey="TransmissionMfrID")]
		public EntitySet<Transmission> Transmissions
		{
			get
			{
				return this._Transmissions;
			}
			set
			{
				this._Transmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Mfr = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Mfr = null;
		}
		
		private void attach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.Mfr = this;
		}
		
		private void detach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.Mfr = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MfrBodyCode")]
	public partial class MfrBodyCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MfrBodyCodeID;
		
		private string _MfrBodyCodeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMfrBodyCodeIDChanging(int value);
    partial void OnMfrBodyCodeIDChanged();
    partial void OnMfrBodyCodeNameChanging(string value);
    partial void OnMfrBodyCodeNameChanged();
    #endregion
		
		public MfrBodyCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfrBodyCodeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MfrBodyCodeID
		{
			get
			{
				return this._MfrBodyCodeID;
			}
			set
			{
				if ((this._MfrBodyCodeID != value))
				{
					this.OnMfrBodyCodeIDChanging(value);
					this.SendPropertyChanging();
					this._MfrBodyCodeID = value;
					this.SendPropertyChanged("MfrBodyCodeID");
					this.OnMfrBodyCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfrBodyCodeName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MfrBodyCodeName
		{
			get
			{
				return this._MfrBodyCodeName;
			}
			set
			{
				if ((this._MfrBodyCodeName != value))
				{
					this.OnMfrBodyCodeNameChanging(value);
					this.SendPropertyChanging();
					this._MfrBodyCodeName = value;
					this.SendPropertyChanged("MfrBodyCodeName");
					this.OnMfrBodyCodeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Model")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModelID;
		
		private string _ModelName;
		
		private int _VehicleTypeID;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
		private EntityRef<VehicleType> _VehicleType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    partial void OnVehicleTypeIDChanging(int value);
    partial void OnVehicleTypeIDChanged();
    #endregion
		
		public Model()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			this._VehicleType = default(EntityRef<VehicleType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelName", DbType="VarChar(100)")]
		public string ModelName
		{
			get
			{
				return this._ModelName;
			}
			set
			{
				if ((this._ModelName != value))
				{
					this.OnModelNameChanging(value);
					this.SendPropertyChanging();
					this._ModelName = value;
					this.SendPropertyChanged("ModelName");
					this.OnModelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", DbType="Int NOT NULL")]
		public int VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					if (this._VehicleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_BaseVehicle", Storage="_BaseVehicles", ThisKey="ModelID", OtherKey="ModelID")]
		public EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleType_Model", Storage="_VehicleType", ThisKey="VehicleTypeID", OtherKey="VehicleTypeID", IsForeignKey=true)]
		public VehicleType VehicleType
		{
			get
			{
				return this._VehicleType.Entity;
			}
			set
			{
				VehicleType previousValue = this._VehicleType.Entity;
				if (((previousValue != value) 
							|| (this._VehicleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleType.Entity = null;
						previousValue.Models.Remove(this);
					}
					this._VehicleType.Entity = value;
					if ((value != null))
					{
						value.Models.Add(this);
						this._VehicleTypeID = value.VehicleTypeID;
					}
					else
					{
						this._VehicleTypeID = default(int);
					}
					this.SendPropertyChanged("VehicleType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerOutput")]
	public partial class PowerOutput
	{
		
		private int _PowerOutputID;
		
		private string _HorsePower;
		
		private string _KilowattPower;
		
		public PowerOutput()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerOutputID", DbType="Int NOT NULL")]
		public int PowerOutputID
		{
			get
			{
				return this._PowerOutputID;
			}
			set
			{
				if ((this._PowerOutputID != value))
				{
					this._PowerOutputID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorsePower", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string HorsePower
		{
			get
			{
				return this._HorsePower;
			}
			set
			{
				if ((this._HorsePower != value))
				{
					this._HorsePower = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KilowattPower", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string KilowattPower
		{
			get
			{
				return this._KilowattPower;
			}
			set
			{
				if ((this._KilowattPower != value))
				{
					this._KilowattPower = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationStage")]
	public partial class PublicationStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PublicationStageID;
		
		private string _PublicationStageName;
		
		private EntitySet<Vehicle> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublicationStageIDChanging(int value);
    partial void OnPublicationStageIDChanged();
    partial void OnPublicationStageNameChanging(string value);
    partial void OnPublicationStageNameChanged();
    #endregion
		
		public PublicationStage()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationStageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PublicationStageID
		{
			get
			{
				return this._PublicationStageID;
			}
			set
			{
				if ((this._PublicationStageID != value))
				{
					this.OnPublicationStageIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationStageID = value;
					this.SendPropertyChanged("PublicationStageID");
					this.OnPublicationStageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationStageName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PublicationStageName
		{
			get
			{
				return this._PublicationStageName;
			}
			set
			{
				if ((this._PublicationStageName != value))
				{
					this.OnPublicationStageNameChanging(value);
					this.SendPropertyChanging();
					this._PublicationStageName = value;
					this.SendPropertyChanged("PublicationStageName");
					this.OnPublicationStageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PublicationStage_Vehicle", Storage="_Vehicles", ThisKey="PublicationStageID", OtherKey="PublicationStageID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.PublicationStage = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.PublicationStage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegionID;
		
		private System.Nullable<int> _ParentID;
		
		private string _RegionAbbr;
		
		private string _RegionName;
		
		private EntitySet<Region> _Regions;
		
		private EntitySet<Vehicle> _Vehicles;
		
		private EntityRef<Region> _Region1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnRegionAbbrChanging(string value);
    partial void OnRegionAbbrChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    #endregion
		
		public Region()
		{
			this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			this._Region1 = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Region1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionAbbr", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string RegionAbbr
		{
			get
			{
				return this._RegionAbbr;
			}
			set
			{
				if ((this._RegionAbbr != value))
				{
					this.OnRegionAbbrChanging(value);
					this.SendPropertyChanging();
					this._RegionAbbr = value;
					this.SendPropertyChanged("RegionAbbr");
					this.OnRegionAbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(30)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this.OnRegionNameChanging(value);
					this.SendPropertyChanging();
					this._RegionName = value;
					this.SendPropertyChanged("RegionName");
					this.OnRegionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Region", Storage="_Regions", ThisKey="RegionID", OtherKey="ParentID")]
		public EntitySet<Region> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Vehicle", Storage="_Vehicles", ThisKey="RegionID", OtherKey="RegionID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Region", Storage="_Region1", ThisKey="ParentID", OtherKey="RegionID", IsForeignKey=true)]
		public Region Region1
		{
			get
			{
				return this._Region1.Entity;
			}
			set
			{
				Region previousValue = this._Region1.Entity;
				if (((previousValue != value) 
							|| (this._Region1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region1.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Region1.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._ParentID = value.RegionID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Region1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Region1 = this;
		}
		
		private void detach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Region1 = null;
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpringType")]
	public partial class SpringType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpringTypeID;
		
		private string _SpringTypeName;
		
		private EntitySet<SpringTypeConfig> _SpringTypeConfigs;
		
		private EntitySet<SpringTypeConfig> _SpringTypeConfigs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpringTypeIDChanging(int value);
    partial void OnSpringTypeIDChanged();
    partial void OnSpringTypeNameChanging(string value);
    partial void OnSpringTypeNameChanged();
    #endregion
		
		public SpringType()
		{
			this._SpringTypeConfigs = new EntitySet<SpringTypeConfig>(new Action<SpringTypeConfig>(this.attach_SpringTypeConfigs), new Action<SpringTypeConfig>(this.detach_SpringTypeConfigs));
			this._SpringTypeConfigs1 = new EntitySet<SpringTypeConfig>(new Action<SpringTypeConfig>(this.attach_SpringTypeConfigs1), new Action<SpringTypeConfig>(this.detach_SpringTypeConfigs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SpringTypeID
		{
			get
			{
				return this._SpringTypeID;
			}
			set
			{
				if ((this._SpringTypeID != value))
				{
					this.OnSpringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SpringTypeID = value;
					this.SendPropertyChanged("SpringTypeID");
					this.OnSpringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SpringTypeName
		{
			get
			{
				return this._SpringTypeName;
			}
			set
			{
				if ((this._SpringTypeName != value))
				{
					this.OnSpringTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SpringTypeName = value;
					this.SendPropertyChanged("SpringTypeName");
					this.OnSpringTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpringType_SpringTypeConfig", Storage="_SpringTypeConfigs", ThisKey="SpringTypeID", OtherKey="FrontSpringTypeID")]
		public EntitySet<SpringTypeConfig> SpringTypeConfigs
		{
			get
			{
				return this._SpringTypeConfigs;
			}
			set
			{
				this._SpringTypeConfigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpringType_SpringTypeConfig1", Storage="_SpringTypeConfigs1", ThisKey="SpringTypeID", OtherKey="RearSpringTypeID")]
		public EntitySet<SpringTypeConfig> SpringTypeConfigs1
		{
			get
			{
				return this._SpringTypeConfigs1;
			}
			set
			{
				this._SpringTypeConfigs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpringTypeConfigs(SpringTypeConfig entity)
		{
			this.SendPropertyChanging();
			entity.SpringType = this;
		}
		
		private void detach_SpringTypeConfigs(SpringTypeConfig entity)
		{
			this.SendPropertyChanging();
			entity.SpringType = null;
		}
		
		private void attach_SpringTypeConfigs1(SpringTypeConfig entity)
		{
			this.SendPropertyChanging();
			entity.SpringType1 = this;
		}
		
		private void detach_SpringTypeConfigs1(SpringTypeConfig entity)
		{
			this.SendPropertyChanging();
			entity.SpringType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpringTypeConfig")]
	public partial class SpringTypeConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpringTypeConfigID;
		
		private int _FrontSpringTypeID;
		
		private int _RearSpringTypeID;
		
		private EntityRef<SpringType> _SpringType;
		
		private EntityRef<SpringType> _SpringType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpringTypeConfigIDChanging(int value);
    partial void OnSpringTypeConfigIDChanged();
    partial void OnFrontSpringTypeIDChanging(int value);
    partial void OnFrontSpringTypeIDChanged();
    partial void OnRearSpringTypeIDChanging(int value);
    partial void OnRearSpringTypeIDChanged();
    #endregion
		
		public SpringTypeConfig()
		{
			this._SpringType = default(EntityRef<SpringType>);
			this._SpringType1 = default(EntityRef<SpringType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringTypeConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SpringTypeConfigID
		{
			get
			{
				return this._SpringTypeConfigID;
			}
			set
			{
				if ((this._SpringTypeConfigID != value))
				{
					this.OnSpringTypeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._SpringTypeConfigID = value;
					this.SendPropertyChanged("SpringTypeConfigID");
					this.OnSpringTypeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrontSpringTypeID", DbType="Int NOT NULL")]
		public int FrontSpringTypeID
		{
			get
			{
				return this._FrontSpringTypeID;
			}
			set
			{
				if ((this._FrontSpringTypeID != value))
				{
					if (this._SpringType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrontSpringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FrontSpringTypeID = value;
					this.SendPropertyChanged("FrontSpringTypeID");
					this.OnFrontSpringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RearSpringTypeID", DbType="Int NOT NULL")]
		public int RearSpringTypeID
		{
			get
			{
				return this._RearSpringTypeID;
			}
			set
			{
				if ((this._RearSpringTypeID != value))
				{
					if (this._SpringType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRearSpringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RearSpringTypeID = value;
					this.SendPropertyChanged("RearSpringTypeID");
					this.OnRearSpringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpringType_SpringTypeConfig", Storage="_SpringType", ThisKey="FrontSpringTypeID", OtherKey="SpringTypeID", IsForeignKey=true)]
		public SpringType SpringType
		{
			get
			{
				return this._SpringType.Entity;
			}
			set
			{
				SpringType previousValue = this._SpringType.Entity;
				if (((previousValue != value) 
							|| (this._SpringType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpringType.Entity = null;
						previousValue.SpringTypeConfigs.Remove(this);
					}
					this._SpringType.Entity = value;
					if ((value != null))
					{
						value.SpringTypeConfigs.Add(this);
						this._FrontSpringTypeID = value.SpringTypeID;
					}
					else
					{
						this._FrontSpringTypeID = default(int);
					}
					this.SendPropertyChanged("SpringType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpringType_SpringTypeConfig1", Storage="_SpringType1", ThisKey="RearSpringTypeID", OtherKey="SpringTypeID", IsForeignKey=true)]
		public SpringType SpringType1
		{
			get
			{
				return this._SpringType1.Entity;
			}
			set
			{
				SpringType previousValue = this._SpringType1.Entity;
				if (((previousValue != value) 
							|| (this._SpringType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpringType1.Entity = null;
						previousValue.SpringTypeConfigs1.Remove(this);
					}
					this._SpringType1.Entity = value;
					if ((value != null))
					{
						value.SpringTypeConfigs1.Add(this);
						this._RearSpringTypeID = value.SpringTypeID;
					}
					else
					{
						this._RearSpringTypeID = default(int);
					}
					this.SendPropertyChanged("SpringType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SteeringConfig")]
	public partial class SteeringConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SteeringConfigID;
		
		private int _SteeringTypeID;
		
		private int _SteeringSystemID;
		
		private EntityRef<SteeringSystem> _SteeringSystem;
		
		private EntityRef<SteeringType> _SteeringType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSteeringConfigIDChanging(int value);
    partial void OnSteeringConfigIDChanged();
    partial void OnSteeringTypeIDChanging(int value);
    partial void OnSteeringTypeIDChanged();
    partial void OnSteeringSystemIDChanging(int value);
    partial void OnSteeringSystemIDChanged();
    #endregion
		
		public SteeringConfig()
		{
			this._SteeringSystem = default(EntityRef<SteeringSystem>);
			this._SteeringType = default(EntityRef<SteeringType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SteeringConfigID
		{
			get
			{
				return this._SteeringConfigID;
			}
			set
			{
				if ((this._SteeringConfigID != value))
				{
					this.OnSteeringConfigIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringConfigID = value;
					this.SendPropertyChanged("SteeringConfigID");
					this.OnSteeringConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringTypeID", DbType="Int NOT NULL")]
		public int SteeringTypeID
		{
			get
			{
				return this._SteeringTypeID;
			}
			set
			{
				if ((this._SteeringTypeID != value))
				{
					if (this._SteeringType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSteeringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringTypeID = value;
					this.SendPropertyChanged("SteeringTypeID");
					this.OnSteeringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringSystemID", DbType="Int NOT NULL")]
		public int SteeringSystemID
		{
			get
			{
				return this._SteeringSystemID;
			}
			set
			{
				if ((this._SteeringSystemID != value))
				{
					if (this._SteeringSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSteeringSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringSystemID = value;
					this.SendPropertyChanged("SteeringSystemID");
					this.OnSteeringSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SteeringSystem_SteeringConfig", Storage="_SteeringSystem", ThisKey="SteeringSystemID", OtherKey="SteeringSystemID", IsForeignKey=true)]
		public SteeringSystem SteeringSystem
		{
			get
			{
				return this._SteeringSystem.Entity;
			}
			set
			{
				SteeringSystem previousValue = this._SteeringSystem.Entity;
				if (((previousValue != value) 
							|| (this._SteeringSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SteeringSystem.Entity = null;
						previousValue.SteeringConfigs.Remove(this);
					}
					this._SteeringSystem.Entity = value;
					if ((value != null))
					{
						value.SteeringConfigs.Add(this);
						this._SteeringSystemID = value.SteeringSystemID;
					}
					else
					{
						this._SteeringSystemID = default(int);
					}
					this.SendPropertyChanged("SteeringSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SteeringType_SteeringConfig", Storage="_SteeringType", ThisKey="SteeringTypeID", OtherKey="SteeringTypeID", IsForeignKey=true)]
		public SteeringType SteeringType
		{
			get
			{
				return this._SteeringType.Entity;
			}
			set
			{
				SteeringType previousValue = this._SteeringType.Entity;
				if (((previousValue != value) 
							|| (this._SteeringType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SteeringType.Entity = null;
						previousValue.SteeringConfigs.Remove(this);
					}
					this._SteeringType.Entity = value;
					if ((value != null))
					{
						value.SteeringConfigs.Add(this);
						this._SteeringTypeID = value.SteeringTypeID;
					}
					else
					{
						this._SteeringTypeID = default(int);
					}
					this.SendPropertyChanged("SteeringType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SteeringSystem")]
	public partial class SteeringSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SteeringSystemID;
		
		private string _SteeringSystemName;
		
		private EntitySet<SteeringConfig> _SteeringConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSteeringSystemIDChanging(int value);
    partial void OnSteeringSystemIDChanged();
    partial void OnSteeringSystemNameChanging(string value);
    partial void OnSteeringSystemNameChanged();
    #endregion
		
		public SteeringSystem()
		{
			this._SteeringConfigs = new EntitySet<SteeringConfig>(new Action<SteeringConfig>(this.attach_SteeringConfigs), new Action<SteeringConfig>(this.detach_SteeringConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringSystemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SteeringSystemID
		{
			get
			{
				return this._SteeringSystemID;
			}
			set
			{
				if ((this._SteeringSystemID != value))
				{
					this.OnSteeringSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringSystemID = value;
					this.SendPropertyChanged("SteeringSystemID");
					this.OnSteeringSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringSystemName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string SteeringSystemName
		{
			get
			{
				return this._SteeringSystemName;
			}
			set
			{
				if ((this._SteeringSystemName != value))
				{
					this.OnSteeringSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SteeringSystemName = value;
					this.SendPropertyChanged("SteeringSystemName");
					this.OnSteeringSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SteeringSystem_SteeringConfig", Storage="_SteeringConfigs", ThisKey="SteeringSystemID", OtherKey="SteeringSystemID")]
		public EntitySet<SteeringConfig> SteeringConfigs
		{
			get
			{
				return this._SteeringConfigs;
			}
			set
			{
				this._SteeringConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SteeringConfigs(SteeringConfig entity)
		{
			this.SendPropertyChanging();
			entity.SteeringSystem = this;
		}
		
		private void detach_SteeringConfigs(SteeringConfig entity)
		{
			this.SendPropertyChanging();
			entity.SteeringSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SteeringType")]
	public partial class SteeringType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SteeringTypeID;
		
		private string _SteeringTypeName;
		
		private EntitySet<SteeringConfig> _SteeringConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSteeringTypeIDChanging(int value);
    partial void OnSteeringTypeIDChanged();
    partial void OnSteeringTypeNameChanging(string value);
    partial void OnSteeringTypeNameChanged();
    #endregion
		
		public SteeringType()
		{
			this._SteeringConfigs = new EntitySet<SteeringConfig>(new Action<SteeringConfig>(this.attach_SteeringConfigs), new Action<SteeringConfig>(this.detach_SteeringConfigs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SteeringTypeID
		{
			get
			{
				return this._SteeringTypeID;
			}
			set
			{
				if ((this._SteeringTypeID != value))
				{
					this.OnSteeringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringTypeID = value;
					this.SendPropertyChanged("SteeringTypeID");
					this.OnSteeringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string SteeringTypeName
		{
			get
			{
				return this._SteeringTypeName;
			}
			set
			{
				if ((this._SteeringTypeName != value))
				{
					this.OnSteeringTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SteeringTypeName = value;
					this.SendPropertyChanged("SteeringTypeName");
					this.OnSteeringTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SteeringType_SteeringConfig", Storage="_SteeringConfigs", ThisKey="SteeringTypeID", OtherKey="SteeringTypeID")]
		public EntitySet<SteeringConfig> SteeringConfigs
		{
			get
			{
				return this._SteeringConfigs;
			}
			set
			{
				this._SteeringConfigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SteeringConfigs(SteeringConfig entity)
		{
			this.SendPropertyChanging();
			entity.SteeringType = this;
		}
		
		private void detach_SteeringConfigs(SteeringConfig entity)
		{
			this.SendPropertyChanging();
			entity.SteeringType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submodel")]
	public partial class Submodel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubmodelID;
		
		private string _SubmodelName;
		
		private EntitySet<Vehicle> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmodelIDChanging(int value);
    partial void OnSubmodelIDChanged();
    partial void OnSubmodelNameChanging(string value);
    partial void OnSubmodelNameChanged();
    #endregion
		
		public Submodel()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmodelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubmodelID
		{
			get
			{
				return this._SubmodelID;
			}
			set
			{
				if ((this._SubmodelID != value))
				{
					this.OnSubmodelIDChanging(value);
					this.SendPropertyChanging();
					this._SubmodelID = value;
					this.SendPropertyChanged("SubmodelID");
					this.OnSubmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmodelName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubmodelName
		{
			get
			{
				return this._SubmodelName;
			}
			set
			{
				if ((this._SubmodelName != value))
				{
					this.OnSubmodelNameChanging(value);
					this.SendPropertyChanging();
					this._SubmodelName = value;
					this.SendPropertyChanged("SubmodelName");
					this.OnSubmodelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submodel_Vehicle", Storage="_Vehicles", ThisKey="SubmodelID", OtherKey="SubmodelID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Submodel = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Submodel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transmission")]
	public partial class Transmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransmissionID;
		
		private int _TransmissionBaseID;
		
		private int _TransmissionMfrCodeID;
		
		private int _TransmissionElecControlledID;
		
		private int _TransmissionMfrID;
		
		private EntityRef<Mfr> _Mfr;
		
		private EntityRef<ElecControlled> _ElecControlled;
		
		private EntityRef<TransmissionBase> _TransmissionBase;
		
		private EntityRef<TransmissionMfrCode> _TransmissionMfrCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransmissionIDChanging(int value);
    partial void OnTransmissionIDChanged();
    partial void OnTransmissionBaseIDChanging(int value);
    partial void OnTransmissionBaseIDChanged();
    partial void OnTransmissionMfrCodeIDChanging(int value);
    partial void OnTransmissionMfrCodeIDChanged();
    partial void OnTransmissionElecControlledIDChanging(int value);
    partial void OnTransmissionElecControlledIDChanged();
    partial void OnTransmissionMfrIDChanging(int value);
    partial void OnTransmissionMfrIDChanged();
    #endregion
		
		public Transmission()
		{
			this._Mfr = default(EntityRef<Mfr>);
			this._ElecControlled = default(EntityRef<ElecControlled>);
			this._TransmissionBase = default(EntityRef<TransmissionBase>);
			this._TransmissionMfrCode = default(EntityRef<TransmissionMfrCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransmissionID
		{
			get
			{
				return this._TransmissionID;
			}
			set
			{
				if ((this._TransmissionID != value))
				{
					this.OnTransmissionIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionID = value;
					this.SendPropertyChanged("TransmissionID");
					this.OnTransmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionBaseID", DbType="Int NOT NULL")]
		public int TransmissionBaseID
		{
			get
			{
				return this._TransmissionBaseID;
			}
			set
			{
				if ((this._TransmissionBaseID != value))
				{
					if (this._TransmissionBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionBaseIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionBaseID = value;
					this.SendPropertyChanged("TransmissionBaseID");
					this.OnTransmissionBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionMfrCodeID", DbType="Int NOT NULL")]
		public int TransmissionMfrCodeID
		{
			get
			{
				return this._TransmissionMfrCodeID;
			}
			set
			{
				if ((this._TransmissionMfrCodeID != value))
				{
					if (this._TransmissionMfrCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionMfrCodeIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionMfrCodeID = value;
					this.SendPropertyChanged("TransmissionMfrCodeID");
					this.OnTransmissionMfrCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionElecControlledID", DbType="Int NOT NULL")]
		public int TransmissionElecControlledID
		{
			get
			{
				return this._TransmissionElecControlledID;
			}
			set
			{
				if ((this._TransmissionElecControlledID != value))
				{
					if (this._ElecControlled.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionElecControlledIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionElecControlledID = value;
					this.SendPropertyChanged("TransmissionElecControlledID");
					this.OnTransmissionElecControlledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionMfrID", DbType="Int NOT NULL")]
		public int TransmissionMfrID
		{
			get
			{
				return this._TransmissionMfrID;
			}
			set
			{
				if ((this._TransmissionMfrID != value))
				{
					if (this._Mfr.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionMfrIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionMfrID = value;
					this.SendPropertyChanged("TransmissionMfrID");
					this.OnTransmissionMfrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mfr_Transmission", Storage="_Mfr", ThisKey="TransmissionMfrID", OtherKey="MfrID", IsForeignKey=true)]
		public Mfr Mfr
		{
			get
			{
				return this._Mfr.Entity;
			}
			set
			{
				Mfr previousValue = this._Mfr.Entity;
				if (((previousValue != value) 
							|| (this._Mfr.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mfr.Entity = null;
						previousValue.Transmissions.Remove(this);
					}
					this._Mfr.Entity = value;
					if ((value != null))
					{
						value.Transmissions.Add(this);
						this._TransmissionMfrID = value.MfrID;
					}
					else
					{
						this._TransmissionMfrID = default(int);
					}
					this.SendPropertyChanged("Mfr");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElecControlled_Transmission", Storage="_ElecControlled", ThisKey="TransmissionElecControlledID", OtherKey="ElecControlledID", IsForeignKey=true)]
		public ElecControlled ElecControlled
		{
			get
			{
				return this._ElecControlled.Entity;
			}
			set
			{
				ElecControlled previousValue = this._ElecControlled.Entity;
				if (((previousValue != value) 
							|| (this._ElecControlled.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElecControlled.Entity = null;
						previousValue.Transmissions.Remove(this);
					}
					this._ElecControlled.Entity = value;
					if ((value != null))
					{
						value.Transmissions.Add(this);
						this._TransmissionElecControlledID = value.ElecControlledID;
					}
					else
					{
						this._TransmissionElecControlledID = default(int);
					}
					this.SendPropertyChanged("ElecControlled");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionBase_Transmission", Storage="_TransmissionBase", ThisKey="TransmissionBaseID", OtherKey="TransmissionBaseID", IsForeignKey=true)]
		public TransmissionBase TransmissionBase
		{
			get
			{
				return this._TransmissionBase.Entity;
			}
			set
			{
				TransmissionBase previousValue = this._TransmissionBase.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionBase.Entity = null;
						previousValue.Transmissions.Remove(this);
					}
					this._TransmissionBase.Entity = value;
					if ((value != null))
					{
						value.Transmissions.Add(this);
						this._TransmissionBaseID = value.TransmissionBaseID;
					}
					else
					{
						this._TransmissionBaseID = default(int);
					}
					this.SendPropertyChanged("TransmissionBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionMfrCode_Transmission", Storage="_TransmissionMfrCode", ThisKey="TransmissionMfrCodeID", OtherKey="TransmissionMfrCodeID", IsForeignKey=true)]
		public TransmissionMfrCode TransmissionMfrCode
		{
			get
			{
				return this._TransmissionMfrCode.Entity;
			}
			set
			{
				TransmissionMfrCode previousValue = this._TransmissionMfrCode.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionMfrCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionMfrCode.Entity = null;
						previousValue.Transmissions.Remove(this);
					}
					this._TransmissionMfrCode.Entity = value;
					if ((value != null))
					{
						value.Transmissions.Add(this);
						this._TransmissionMfrCodeID = value.TransmissionMfrCodeID;
					}
					else
					{
						this._TransmissionMfrCodeID = default(int);
					}
					this.SendPropertyChanged("TransmissionMfrCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransmissionBase")]
	public partial class TransmissionBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransmissionBaseID;
		
		private int _TransmissionTypeID;
		
		private int _TransmissionNumSpeedsID;
		
		private int _TransmissionControlTypeID;
		
		private EntitySet<Transmission> _Transmissions;
		
		private EntityRef<TransmissionControlType> _TransmissionControlType;
		
		private EntityRef<TransmissionNumSpeed> _TransmissionNumSpeed;
		
		private EntityRef<TransmissionType> _TransmissionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransmissionBaseIDChanging(int value);
    partial void OnTransmissionBaseIDChanged();
    partial void OnTransmissionTypeIDChanging(int value);
    partial void OnTransmissionTypeIDChanged();
    partial void OnTransmissionNumSpeedsIDChanging(int value);
    partial void OnTransmissionNumSpeedsIDChanged();
    partial void OnTransmissionControlTypeIDChanging(int value);
    partial void OnTransmissionControlTypeIDChanged();
    #endregion
		
		public TransmissionBase()
		{
			this._Transmissions = new EntitySet<Transmission>(new Action<Transmission>(this.attach_Transmissions), new Action<Transmission>(this.detach_Transmissions));
			this._TransmissionControlType = default(EntityRef<TransmissionControlType>);
			this._TransmissionNumSpeed = default(EntityRef<TransmissionNumSpeed>);
			this._TransmissionType = default(EntityRef<TransmissionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionBaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransmissionBaseID
		{
			get
			{
				return this._TransmissionBaseID;
			}
			set
			{
				if ((this._TransmissionBaseID != value))
				{
					this.OnTransmissionBaseIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionBaseID = value;
					this.SendPropertyChanged("TransmissionBaseID");
					this.OnTransmissionBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionTypeID", DbType="Int NOT NULL")]
		public int TransmissionTypeID
		{
			get
			{
				return this._TransmissionTypeID;
			}
			set
			{
				if ((this._TransmissionTypeID != value))
				{
					if (this._TransmissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionTypeID = value;
					this.SendPropertyChanged("TransmissionTypeID");
					this.OnTransmissionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionNumSpeedsID", DbType="Int NOT NULL")]
		public int TransmissionNumSpeedsID
		{
			get
			{
				return this._TransmissionNumSpeedsID;
			}
			set
			{
				if ((this._TransmissionNumSpeedsID != value))
				{
					if (this._TransmissionNumSpeed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionNumSpeedsIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionNumSpeedsID = value;
					this.SendPropertyChanged("TransmissionNumSpeedsID");
					this.OnTransmissionNumSpeedsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionControlTypeID", DbType="Int NOT NULL")]
		public int TransmissionControlTypeID
		{
			get
			{
				return this._TransmissionControlTypeID;
			}
			set
			{
				if ((this._TransmissionControlTypeID != value))
				{
					if (this._TransmissionControlType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionControlTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionControlTypeID = value;
					this.SendPropertyChanged("TransmissionControlTypeID");
					this.OnTransmissionControlTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionBase_Transmission", Storage="_Transmissions", ThisKey="TransmissionBaseID", OtherKey="TransmissionBaseID")]
		public EntitySet<Transmission> Transmissions
		{
			get
			{
				return this._Transmissions;
			}
			set
			{
				this._Transmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionControlType_TransmissionBase", Storage="_TransmissionControlType", ThisKey="TransmissionControlTypeID", OtherKey="TransmissionControlTypeID", IsForeignKey=true)]
		public TransmissionControlType TransmissionControlType
		{
			get
			{
				return this._TransmissionControlType.Entity;
			}
			set
			{
				TransmissionControlType previousValue = this._TransmissionControlType.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionControlType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionControlType.Entity = null;
						previousValue.TransmissionBases.Remove(this);
					}
					this._TransmissionControlType.Entity = value;
					if ((value != null))
					{
						value.TransmissionBases.Add(this);
						this._TransmissionControlTypeID = value.TransmissionControlTypeID;
					}
					else
					{
						this._TransmissionControlTypeID = default(int);
					}
					this.SendPropertyChanged("TransmissionControlType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionNumSpeed_TransmissionBase", Storage="_TransmissionNumSpeed", ThisKey="TransmissionNumSpeedsID", OtherKey="TransmissionNumSpeedsID", IsForeignKey=true)]
		public TransmissionNumSpeed TransmissionNumSpeed
		{
			get
			{
				return this._TransmissionNumSpeed.Entity;
			}
			set
			{
				TransmissionNumSpeed previousValue = this._TransmissionNumSpeed.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionNumSpeed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionNumSpeed.Entity = null;
						previousValue.TransmissionBases.Remove(this);
					}
					this._TransmissionNumSpeed.Entity = value;
					if ((value != null))
					{
						value.TransmissionBases.Add(this);
						this._TransmissionNumSpeedsID = value.TransmissionNumSpeedsID;
					}
					else
					{
						this._TransmissionNumSpeedsID = default(int);
					}
					this.SendPropertyChanged("TransmissionNumSpeed");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionType_TransmissionBase", Storage="_TransmissionType", ThisKey="TransmissionTypeID", OtherKey="TransmissionTypeID", IsForeignKey=true)]
		public TransmissionType TransmissionType
		{
			get
			{
				return this._TransmissionType.Entity;
			}
			set
			{
				TransmissionType previousValue = this._TransmissionType.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionType.Entity = null;
						previousValue.TransmissionBases.Remove(this);
					}
					this._TransmissionType.Entity = value;
					if ((value != null))
					{
						value.TransmissionBases.Add(this);
						this._TransmissionTypeID = value.TransmissionTypeID;
					}
					else
					{
						this._TransmissionTypeID = default(int);
					}
					this.SendPropertyChanged("TransmissionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionBase = this;
		}
		
		private void detach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransmissionControlType")]
	public partial class TransmissionControlType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransmissionControlTypeID;
		
		private string _TransmissionControlTypeName;
		
		private EntitySet<TransmissionBase> _TransmissionBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransmissionControlTypeIDChanging(int value);
    partial void OnTransmissionControlTypeIDChanged();
    partial void OnTransmissionControlTypeNameChanging(string value);
    partial void OnTransmissionControlTypeNameChanged();
    #endregion
		
		public TransmissionControlType()
		{
			this._TransmissionBases = new EntitySet<TransmissionBase>(new Action<TransmissionBase>(this.attach_TransmissionBases), new Action<TransmissionBase>(this.detach_TransmissionBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionControlTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransmissionControlTypeID
		{
			get
			{
				return this._TransmissionControlTypeID;
			}
			set
			{
				if ((this._TransmissionControlTypeID != value))
				{
					this.OnTransmissionControlTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionControlTypeID = value;
					this.SendPropertyChanged("TransmissionControlTypeID");
					this.OnTransmissionControlTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionControlTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string TransmissionControlTypeName
		{
			get
			{
				return this._TransmissionControlTypeName;
			}
			set
			{
				if ((this._TransmissionControlTypeName != value))
				{
					this.OnTransmissionControlTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TransmissionControlTypeName = value;
					this.SendPropertyChanged("TransmissionControlTypeName");
					this.OnTransmissionControlTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionControlType_TransmissionBase", Storage="_TransmissionBases", ThisKey="TransmissionControlTypeID", OtherKey="TransmissionControlTypeID")]
		public EntitySet<TransmissionBase> TransmissionBases
		{
			get
			{
				return this._TransmissionBases;
			}
			set
			{
				this._TransmissionBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionBases(TransmissionBase entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionControlType = this;
		}
		
		private void detach_TransmissionBases(TransmissionBase entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionControlType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransmissionMfrCode")]
	public partial class TransmissionMfrCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransmissionMfrCodeID;
		
		private string _TransmissionMfrCode1;
		
		private EntitySet<Transmission> _Transmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransmissionMfrCodeIDChanging(int value);
    partial void OnTransmissionMfrCodeIDChanged();
    partial void OnTransmissionMfrCode1Changing(string value);
    partial void OnTransmissionMfrCode1Changed();
    #endregion
		
		public TransmissionMfrCode()
		{
			this._Transmissions = new EntitySet<Transmission>(new Action<Transmission>(this.attach_Transmissions), new Action<Transmission>(this.detach_Transmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionMfrCodeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransmissionMfrCodeID
		{
			get
			{
				return this._TransmissionMfrCodeID;
			}
			set
			{
				if ((this._TransmissionMfrCodeID != value))
				{
					this.OnTransmissionMfrCodeIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionMfrCodeID = value;
					this.SendPropertyChanged("TransmissionMfrCodeID");
					this.OnTransmissionMfrCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TransmissionMfrCode", Storage="_TransmissionMfrCode1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string TransmissionMfrCode1
		{
			get
			{
				return this._TransmissionMfrCode1;
			}
			set
			{
				if ((this._TransmissionMfrCode1 != value))
				{
					this.OnTransmissionMfrCode1Changing(value);
					this.SendPropertyChanging();
					this._TransmissionMfrCode1 = value;
					this.SendPropertyChanged("TransmissionMfrCode1");
					this.OnTransmissionMfrCode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionMfrCode_Transmission", Storage="_Transmissions", ThisKey="TransmissionMfrCodeID", OtherKey="TransmissionMfrCodeID")]
		public EntitySet<Transmission> Transmissions
		{
			get
			{
				return this._Transmissions;
			}
			set
			{
				this._Transmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionMfrCode = this;
		}
		
		private void detach_Transmissions(Transmission entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionMfrCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransmissionNumSpeeds")]
	public partial class TransmissionNumSpeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransmissionNumSpeedsID;
		
		private string _TransmissionNumSpeeds;
		
		private EntitySet<TransmissionBase> _TransmissionBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransmissionNumSpeedsIDChanging(int value);
    partial void OnTransmissionNumSpeedsIDChanged();
    partial void OnTransmissionNumSpeedsChanging(string value);
    partial void OnTransmissionNumSpeedsChanged();
    #endregion
		
		public TransmissionNumSpeed()
		{
			this._TransmissionBases = new EntitySet<TransmissionBase>(new Action<TransmissionBase>(this.attach_TransmissionBases), new Action<TransmissionBase>(this.detach_TransmissionBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionNumSpeedsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransmissionNumSpeedsID
		{
			get
			{
				return this._TransmissionNumSpeedsID;
			}
			set
			{
				if ((this._TransmissionNumSpeedsID != value))
				{
					this.OnTransmissionNumSpeedsIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionNumSpeedsID = value;
					this.SendPropertyChanged("TransmissionNumSpeedsID");
					this.OnTransmissionNumSpeedsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionNumSpeeds", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string TransmissionNumSpeeds
		{
			get
			{
				return this._TransmissionNumSpeeds;
			}
			set
			{
				if ((this._TransmissionNumSpeeds != value))
				{
					this.OnTransmissionNumSpeedsChanging(value);
					this.SendPropertyChanging();
					this._TransmissionNumSpeeds = value;
					this.SendPropertyChanged("TransmissionNumSpeeds");
					this.OnTransmissionNumSpeedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionNumSpeed_TransmissionBase", Storage="_TransmissionBases", ThisKey="TransmissionNumSpeedsID", OtherKey="TransmissionNumSpeedsID")]
		public EntitySet<TransmissionBase> TransmissionBases
		{
			get
			{
				return this._TransmissionBases;
			}
			set
			{
				this._TransmissionBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionBases(TransmissionBase entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionNumSpeed = this;
		}
		
		private void detach_TransmissionBases(TransmissionBase entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionNumSpeed = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransmissionType")]
	public partial class TransmissionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransmissionTypeID;
		
		private string _TransmissionTypeName;
		
		private EntitySet<TransmissionBase> _TransmissionBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransmissionTypeIDChanging(int value);
    partial void OnTransmissionTypeIDChanged();
    partial void OnTransmissionTypeNameChanging(string value);
    partial void OnTransmissionTypeNameChanged();
    #endregion
		
		public TransmissionType()
		{
			this._TransmissionBases = new EntitySet<TransmissionBase>(new Action<TransmissionBase>(this.attach_TransmissionBases), new Action<TransmissionBase>(this.detach_TransmissionBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransmissionTypeID
		{
			get
			{
				return this._TransmissionTypeID;
			}
			set
			{
				if ((this._TransmissionTypeID != value))
				{
					this.OnTransmissionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionTypeID = value;
					this.SendPropertyChanged("TransmissionTypeID");
					this.OnTransmissionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string TransmissionTypeName
		{
			get
			{
				return this._TransmissionTypeName;
			}
			set
			{
				if ((this._TransmissionTypeName != value))
				{
					this.OnTransmissionTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TransmissionTypeName = value;
					this.SendPropertyChanged("TransmissionTypeName");
					this.OnTransmissionTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionType_TransmissionBase", Storage="_TransmissionBases", ThisKey="TransmissionTypeID", OtherKey="TransmissionTypeID")]
		public EntitySet<TransmissionBase> TransmissionBases
		{
			get
			{
				return this._TransmissionBases;
			}
			set
			{
				this._TransmissionBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionBases(TransmissionBase entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionType = this;
		}
		
		private void detach_TransmissionBases(TransmissionBase entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Valves")]
	public partial class Valve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ValvesID;
		
		private string _ValvesPerEngine;
		
		private EntitySet<EngineConfig> _EngineConfigs;
		
		private EntitySet<EngineConfig> _EngineConfigs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValvesIDChanging(int value);
    partial void OnValvesIDChanged();
    partial void OnValvesPerEngineChanging(string value);
    partial void OnValvesPerEngineChanged();
    #endregion
		
		public Valve()
		{
			this._EngineConfigs = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs), new Action<EngineConfig>(this.detach_EngineConfigs));
			this._EngineConfigs1 = new EntitySet<EngineConfig>(new Action<EngineConfig>(this.attach_EngineConfigs1), new Action<EngineConfig>(this.detach_EngineConfigs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValvesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ValvesID
		{
			get
			{
				return this._ValvesID;
			}
			set
			{
				if ((this._ValvesID != value))
				{
					this.OnValvesIDChanging(value);
					this.SendPropertyChanging();
					this._ValvesID = value;
					this.SendPropertyChanged("ValvesID");
					this.OnValvesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValvesPerEngine", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string ValvesPerEngine
		{
			get
			{
				return this._ValvesPerEngine;
			}
			set
			{
				if ((this._ValvesPerEngine != value))
				{
					this.OnValvesPerEngineChanging(value);
					this.SendPropertyChanging();
					this._ValvesPerEngine = value;
					this.SendPropertyChanged("ValvesPerEngine");
					this.OnValvesPerEngineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Valve_EngineConfig", Storage="_EngineConfigs", ThisKey="ValvesID", OtherKey="ValvesID")]
		public EntitySet<EngineConfig> EngineConfigs
		{
			get
			{
				return this._EngineConfigs;
			}
			set
			{
				this._EngineConfigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Valve_EngineConfig1", Storage="_EngineConfigs1", ThisKey="ValvesID", OtherKey="ValvesID")]
		public EntitySet<EngineConfig> EngineConfigs1
		{
			get
			{
				return this._EngineConfigs1;
			}
			set
			{
				this._EngineConfigs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Valve = this;
		}
		
		private void detach_EngineConfigs(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Valve = null;
		}
		
		private void attach_EngineConfigs1(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Valve1 = this;
		}
		
		private void detach_EngineConfigs1(EngineConfig entity)
		{
			this.SendPropertyChanging();
			entity.Valve1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdbchanges")]
	public partial class vcdbchange
	{
		
		private System.DateTime _versiondate;
		
		private string _tablename;
		
		private int _id;
		
		private char _action;
		
		public vcdbchange()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_versiondate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime versiondate
		{
			get
			{
				return this._versiondate;
			}
			set
			{
				if ((this._versiondate != value))
				{
					this._versiondate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tablename", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string tablename
		{
			get
			{
				return this._tablename;
			}
			set
			{
				if ((this._tablename != value))
				{
					this._tablename = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action", DbType="Char(1) NOT NULL")]
		public char action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this._action = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehEngCfgToLegacyVehicle")]
	public partial class VehEngCfgToLegacyVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehEngCfgToLegacyVehicleID;
		
		private int _VehicleToEngineConfigID;
		
		private int _LegacyVehicleID;
		
		private EntityRef<LegacyVehicle> _LegacyVehicle;
		
		private EntityRef<VehicleToEngineConfig> _VehicleToEngineConfig;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehEngCfgToLegacyVehicleIDChanging(int value);
    partial void OnVehEngCfgToLegacyVehicleIDChanged();
    partial void OnVehicleToEngineConfigIDChanging(int value);
    partial void OnVehicleToEngineConfigIDChanged();
    partial void OnLegacyVehicleIDChanging(int value);
    partial void OnLegacyVehicleIDChanged();
    #endregion
		
		public VehEngCfgToLegacyVehicle()
		{
			this._LegacyVehicle = default(EntityRef<LegacyVehicle>);
			this._VehicleToEngineConfig = default(EntityRef<VehicleToEngineConfig>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehEngCfgToLegacyVehicleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehEngCfgToLegacyVehicleID
		{
			get
			{
				return this._VehEngCfgToLegacyVehicleID;
			}
			set
			{
				if ((this._VehEngCfgToLegacyVehicleID != value))
				{
					this.OnVehEngCfgToLegacyVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehEngCfgToLegacyVehicleID = value;
					this.SendPropertyChanged("VehEngCfgToLegacyVehicleID");
					this.OnVehEngCfgToLegacyVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToEngineConfigID", DbType="Int NOT NULL")]
		public int VehicleToEngineConfigID
		{
			get
			{
				return this._VehicleToEngineConfigID;
			}
			set
			{
				if ((this._VehicleToEngineConfigID != value))
				{
					if (this._VehicleToEngineConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleToEngineConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToEngineConfigID = value;
					this.SendPropertyChanged("VehicleToEngineConfigID");
					this.OnVehicleToEngineConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegacyVehicleID", DbType="Int NOT NULL")]
		public int LegacyVehicleID
		{
			get
			{
				return this._LegacyVehicleID;
			}
			set
			{
				if ((this._LegacyVehicleID != value))
				{
					if (this._LegacyVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegacyVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._LegacyVehicleID = value;
					this.SendPropertyChanged("LegacyVehicleID");
					this.OnLegacyVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LegacyVehicle_VehEngCfgToLegacyVehicle", Storage="_LegacyVehicle", ThisKey="LegacyVehicleID", OtherKey="LegacyVehicleID", IsForeignKey=true)]
		public LegacyVehicle LegacyVehicle
		{
			get
			{
				return this._LegacyVehicle.Entity;
			}
			set
			{
				LegacyVehicle previousValue = this._LegacyVehicle.Entity;
				if (((previousValue != value) 
							|| (this._LegacyVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegacyVehicle.Entity = null;
						previousValue.VehEngCfgToLegacyVehicles.Remove(this);
					}
					this._LegacyVehicle.Entity = value;
					if ((value != null))
					{
						value.VehEngCfgToLegacyVehicles.Add(this);
						this._LegacyVehicleID = value.LegacyVehicleID;
					}
					else
					{
						this._LegacyVehicleID = default(int);
					}
					this.SendPropertyChanged("LegacyVehicle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleToEngineConfig_VehEngCfgToLegacyVehicle", Storage="_VehicleToEngineConfig", ThisKey="VehicleToEngineConfigID", OtherKey="VehicleToEngineConfigID", IsForeignKey=true)]
		public VehicleToEngineConfig VehicleToEngineConfig
		{
			get
			{
				return this._VehicleToEngineConfig.Entity;
			}
			set
			{
				VehicleToEngineConfig previousValue = this._VehicleToEngineConfig.Entity;
				if (((previousValue != value) 
							|| (this._VehicleToEngineConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleToEngineConfig.Entity = null;
						previousValue.VehEngCfgToLegacyVehicles.Remove(this);
					}
					this._VehicleToEngineConfig.Entity = value;
					if ((value != null))
					{
						value.VehEngCfgToLegacyVehicles.Add(this);
						this._VehicleToEngineConfigID = value.VehicleToEngineConfigID;
					}
					else
					{
						this._VehicleToEngineConfigID = default(int);
					}
					this.SendPropertyChanged("VehicleToEngineConfig");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicle")]
	public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleID;
		
		private int _BaseVehicleID;
		
		private int _SubmodelID;
		
		private int _RegionID;
		
		private string _Source;
		
		private int _PublicationStageID;
		
		private string _PublicationStageSource;
		
		private System.DateTime _PublicationStageDate;
		
		private EntityRef<BaseVehicle> _BaseVehicle;
		
		private EntityRef<PublicationStage> _PublicationStage;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<Submodel> _Submodel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnBaseVehicleIDChanging(int value);
    partial void OnBaseVehicleIDChanged();
    partial void OnSubmodelIDChanging(int value);
    partial void OnSubmodelIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnPublicationStageIDChanging(int value);
    partial void OnPublicationStageIDChanged();
    partial void OnPublicationStageSourceChanging(string value);
    partial void OnPublicationStageSourceChanged();
    partial void OnPublicationStageDateChanging(System.DateTime value);
    partial void OnPublicationStageDateChanged();
    #endregion
		
		public Vehicle()
		{
			this._BaseVehicle = default(EntityRef<BaseVehicle>);
			this._PublicationStage = default(EntityRef<PublicationStage>);
			this._Region = default(EntityRef<Region>);
			this._Submodel = default(EntityRef<Submodel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseVehicleID", DbType="Int NOT NULL")]
		public int BaseVehicleID
		{
			get
			{
				return this._BaseVehicleID;
			}
			set
			{
				if ((this._BaseVehicleID != value))
				{
					if (this._BaseVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._BaseVehicleID = value;
					this.SendPropertyChanged("BaseVehicleID");
					this.OnBaseVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmodelID", DbType="Int NOT NULL")]
		public int SubmodelID
		{
			get
			{
				return this._SubmodelID;
			}
			set
			{
				if ((this._SubmodelID != value))
				{
					if (this._Submodel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmodelIDChanging(value);
					this.SendPropertyChanging();
					this._SubmodelID = value;
					this.SendPropertyChanged("SubmodelID");
					this.OnSubmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationStageID", DbType="Int NOT NULL")]
		public int PublicationStageID
		{
			get
			{
				return this._PublicationStageID;
			}
			set
			{
				if ((this._PublicationStageID != value))
				{
					if (this._PublicationStage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationStageIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationStageID = value;
					this.SendPropertyChanged("PublicationStageID");
					this.OnPublicationStageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationStageSource", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PublicationStageSource
		{
			get
			{
				return this._PublicationStageSource;
			}
			set
			{
				if ((this._PublicationStageSource != value))
				{
					this.OnPublicationStageSourceChanging(value);
					this.SendPropertyChanging();
					this._PublicationStageSource = value;
					this.SendPropertyChanged("PublicationStageSource");
					this.OnPublicationStageSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationStageDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PublicationStageDate
		{
			get
			{
				return this._PublicationStageDate;
			}
			set
			{
				if ((this._PublicationStageDate != value))
				{
					this.OnPublicationStageDateChanging(value);
					this.SendPropertyChanging();
					this._PublicationStageDate = value;
					this.SendPropertyChanged("PublicationStageDate");
					this.OnPublicationStageDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVehicle_Vehicle", Storage="_BaseVehicle", ThisKey="BaseVehicleID", OtherKey="BaseVehicleID", IsForeignKey=true)]
		public BaseVehicle BaseVehicle
		{
			get
			{
				return this._BaseVehicle.Entity;
			}
			set
			{
				BaseVehicle previousValue = this._BaseVehicle.Entity;
				if (((previousValue != value) 
							|| (this._BaseVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseVehicle.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._BaseVehicle.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._BaseVehicleID = value.BaseVehicleID;
					}
					else
					{
						this._BaseVehicleID = default(int);
					}
					this.SendPropertyChanged("BaseVehicle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PublicationStage_Vehicle", Storage="_PublicationStage", ThisKey="PublicationStageID", OtherKey="PublicationStageID", IsForeignKey=true)]
		public PublicationStage PublicationStage
		{
			get
			{
				return this._PublicationStage.Entity;
			}
			set
			{
				PublicationStage previousValue = this._PublicationStage.Entity;
				if (((previousValue != value) 
							|| (this._PublicationStage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PublicationStage.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._PublicationStage.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._PublicationStageID = value.PublicationStageID;
					}
					else
					{
						this._PublicationStageID = default(int);
					}
					this.SendPropertyChanged("PublicationStage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Vehicle", Storage="_Region", ThisKey="RegionID", OtherKey="RegionID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._RegionID = value.RegionID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submodel_Vehicle", Storage="_Submodel", ThisKey="SubmodelID", OtherKey="SubmodelID", IsForeignKey=true)]
		public Submodel Submodel
		{
			get
			{
				return this._Submodel.Entity;
			}
			set
			{
				Submodel previousValue = this._Submodel.Entity;
				if (((previousValue != value) 
							|| (this._Submodel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submodel.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Submodel.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._SubmodelID = value.SubmodelID;
					}
					else
					{
						this._SubmodelID = default(int);
					}
					this.SendPropertyChanged("Submodel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleConfig")]
	public partial class VehicleConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleConfigID;
		
		private int _VehicleID;
		
		private int _BedConfigID;
		
		private int _BodyStyleConfigID;
		
		private int _BrakeConfigID;
		
		private int _DriveTypeID;
		
		private int _EngineConfigID;
		
		private int _MfrBodyCodeID;
		
		private int _SpringTypeConfigID;
		
		private int _SteeringConfigID;
		
		private int _TransmissionID;
		
		private int _WheelbaseID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleConfigIDChanging(int value);
    partial void OnVehicleConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnBedConfigIDChanging(int value);
    partial void OnBedConfigIDChanged();
    partial void OnBodyStyleConfigIDChanging(int value);
    partial void OnBodyStyleConfigIDChanged();
    partial void OnBrakeConfigIDChanging(int value);
    partial void OnBrakeConfigIDChanged();
    partial void OnDriveTypeIDChanging(int value);
    partial void OnDriveTypeIDChanged();
    partial void OnEngineConfigIDChanging(int value);
    partial void OnEngineConfigIDChanged();
    partial void OnMfrBodyCodeIDChanging(int value);
    partial void OnMfrBodyCodeIDChanged();
    partial void OnSpringTypeConfigIDChanging(int value);
    partial void OnSpringTypeConfigIDChanged();
    partial void OnSteeringConfigIDChanging(int value);
    partial void OnSteeringConfigIDChanged();
    partial void OnTransmissionIDChanging(int value);
    partial void OnTransmissionIDChanged();
    partial void OnWheelbaseIDChanging(int value);
    partial void OnWheelbaseIDChanged();
    #endregion
		
		public VehicleConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleConfigID
		{
			get
			{
				return this._VehicleConfigID;
			}
			set
			{
				if ((this._VehicleConfigID != value))
				{
					this.OnVehicleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleConfigID = value;
					this.SendPropertyChanged("VehicleConfigID");
					this.OnVehicleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedConfigID", DbType="Int NOT NULL")]
		public int BedConfigID
		{
			get
			{
				return this._BedConfigID;
			}
			set
			{
				if ((this._BedConfigID != value))
				{
					this.OnBedConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BedConfigID = value;
					this.SendPropertyChanged("BedConfigID");
					this.OnBedConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleConfigID", DbType="Int NOT NULL")]
		public int BodyStyleConfigID
		{
			get
			{
				return this._BodyStyleConfigID;
			}
			set
			{
				if ((this._BodyStyleConfigID != value))
				{
					this.OnBodyStyleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleConfigID = value;
					this.SendPropertyChanged("BodyStyleConfigID");
					this.OnBodyStyleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeConfigID", DbType="Int NOT NULL")]
		public int BrakeConfigID
		{
			get
			{
				return this._BrakeConfigID;
			}
			set
			{
				if ((this._BrakeConfigID != value))
				{
					this.OnBrakeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeConfigID = value;
					this.SendPropertyChanged("BrakeConfigID");
					this.OnBrakeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveTypeID", DbType="Int NOT NULL")]
		public int DriveTypeID
		{
			get
			{
				return this._DriveTypeID;
			}
			set
			{
				if ((this._DriveTypeID != value))
				{
					this.OnDriveTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DriveTypeID = value;
					this.SendPropertyChanged("DriveTypeID");
					this.OnDriveTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineConfigID", DbType="Int NOT NULL")]
		public int EngineConfigID
		{
			get
			{
				return this._EngineConfigID;
			}
			set
			{
				if ((this._EngineConfigID != value))
				{
					this.OnEngineConfigIDChanging(value);
					this.SendPropertyChanging();
					this._EngineConfigID = value;
					this.SendPropertyChanged("EngineConfigID");
					this.OnEngineConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfrBodyCodeID", DbType="Int NOT NULL")]
		public int MfrBodyCodeID
		{
			get
			{
				return this._MfrBodyCodeID;
			}
			set
			{
				if ((this._MfrBodyCodeID != value))
				{
					this.OnMfrBodyCodeIDChanging(value);
					this.SendPropertyChanging();
					this._MfrBodyCodeID = value;
					this.SendPropertyChanged("MfrBodyCodeID");
					this.OnMfrBodyCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringTypeConfigID", DbType="Int NOT NULL")]
		public int SpringTypeConfigID
		{
			get
			{
				return this._SpringTypeConfigID;
			}
			set
			{
				if ((this._SpringTypeConfigID != value))
				{
					this.OnSpringTypeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._SpringTypeConfigID = value;
					this.SendPropertyChanged("SpringTypeConfigID");
					this.OnSpringTypeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringConfigID", DbType="Int NOT NULL")]
		public int SteeringConfigID
		{
			get
			{
				return this._SteeringConfigID;
			}
			set
			{
				if ((this._SteeringConfigID != value))
				{
					this.OnSteeringConfigIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringConfigID = value;
					this.SendPropertyChanged("SteeringConfigID");
					this.OnSteeringConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionID", DbType="Int NOT NULL")]
		public int TransmissionID
		{
			get
			{
				return this._TransmissionID;
			}
			set
			{
				if ((this._TransmissionID != value))
				{
					this.OnTransmissionIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionID = value;
					this.SendPropertyChanged("TransmissionID");
					this.OnTransmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WheelbaseID", DbType="Int NOT NULL")]
		public int WheelbaseID
		{
			get
			{
				return this._WheelbaseID;
			}
			set
			{
				if ((this._WheelbaseID != value))
				{
					this.OnWheelbaseIDChanging(value);
					this.SendPropertyChanging();
					this._WheelbaseID = value;
					this.SendPropertyChanged("WheelbaseID");
					this.OnWheelbaseIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToBedConfig")]
	public partial class VehicleToBedConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToBedConfigID;
		
		private int _VehicleID;
		
		private int _BedConfigID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToBedConfigIDChanging(int value);
    partial void OnVehicleToBedConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnBedConfigIDChanging(int value);
    partial void OnBedConfigIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToBedConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToBedConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToBedConfigID
		{
			get
			{
				return this._VehicleToBedConfigID;
			}
			set
			{
				if ((this._VehicleToBedConfigID != value))
				{
					this.OnVehicleToBedConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToBedConfigID = value;
					this.SendPropertyChanged("VehicleToBedConfigID");
					this.OnVehicleToBedConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedConfigID", DbType="Int NOT NULL")]
		public int BedConfigID
		{
			get
			{
				return this._BedConfigID;
			}
			set
			{
				if ((this._BedConfigID != value))
				{
					this.OnBedConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BedConfigID = value;
					this.SendPropertyChanged("BedConfigID");
					this.OnBedConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToBodyStyleConfig")]
	public partial class VehicleToBodyStyleConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToBodyStyleConfigID;
		
		private int _VehicleID;
		
		private int _BodyStyleConfigID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToBodyStyleConfigIDChanging(int value);
    partial void OnVehicleToBodyStyleConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnBodyStyleConfigIDChanging(int value);
    partial void OnBodyStyleConfigIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToBodyStyleConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToBodyStyleConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToBodyStyleConfigID
		{
			get
			{
				return this._VehicleToBodyStyleConfigID;
			}
			set
			{
				if ((this._VehicleToBodyStyleConfigID != value))
				{
					this.OnVehicleToBodyStyleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToBodyStyleConfigID = value;
					this.SendPropertyChanged("VehicleToBodyStyleConfigID");
					this.OnVehicleToBodyStyleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleConfigID", DbType="Int NOT NULL")]
		public int BodyStyleConfigID
		{
			get
			{
				return this._BodyStyleConfigID;
			}
			set
			{
				if ((this._BodyStyleConfigID != value))
				{
					this.OnBodyStyleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleConfigID = value;
					this.SendPropertyChanged("BodyStyleConfigID");
					this.OnBodyStyleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToBrakeConfig")]
	public partial class VehicleToBrakeConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToBrakeConfigID;
		
		private int _VehicleID;
		
		private int _BrakeConfigID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToBrakeConfigIDChanging(int value);
    partial void OnVehicleToBrakeConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnBrakeConfigIDChanging(int value);
    partial void OnBrakeConfigIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToBrakeConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToBrakeConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToBrakeConfigID
		{
			get
			{
				return this._VehicleToBrakeConfigID;
			}
			set
			{
				if ((this._VehicleToBrakeConfigID != value))
				{
					this.OnVehicleToBrakeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToBrakeConfigID = value;
					this.SendPropertyChanged("VehicleToBrakeConfigID");
					this.OnVehicleToBrakeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrakeConfigID", DbType="Int NOT NULL")]
		public int BrakeConfigID
		{
			get
			{
				return this._BrakeConfigID;
			}
			set
			{
				if ((this._BrakeConfigID != value))
				{
					this.OnBrakeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BrakeConfigID = value;
					this.SendPropertyChanged("BrakeConfigID");
					this.OnBrakeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToDriveType")]
	public partial class VehicleToDriveType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToDriveTypeID;
		
		private int _VehicleID;
		
		private int _DriveTypeID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToDriveTypeIDChanging(int value);
    partial void OnVehicleToDriveTypeIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnDriveTypeIDChanging(int value);
    partial void OnDriveTypeIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToDriveType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToDriveTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToDriveTypeID
		{
			get
			{
				return this._VehicleToDriveTypeID;
			}
			set
			{
				if ((this._VehicleToDriveTypeID != value))
				{
					this.OnVehicleToDriveTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToDriveTypeID = value;
					this.SendPropertyChanged("VehicleToDriveTypeID");
					this.OnVehicleToDriveTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveTypeID", DbType="Int NOT NULL")]
		public int DriveTypeID
		{
			get
			{
				return this._DriveTypeID;
			}
			set
			{
				if ((this._DriveTypeID != value))
				{
					this.OnDriveTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DriveTypeID = value;
					this.SendPropertyChanged("DriveTypeID");
					this.OnDriveTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToEngineConfig")]
	public partial class VehicleToEngineConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToEngineConfigID;
		
		private int _VehicleID;
		
		private int _EngineConfigID;
		
		private string _Source;
		
		private EntitySet<VehEngCfgToLegacyVehicle> _VehEngCfgToLegacyVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToEngineConfigIDChanging(int value);
    partial void OnVehicleToEngineConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnEngineConfigIDChanging(int value);
    partial void OnEngineConfigIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToEngineConfig()
		{
			this._VehEngCfgToLegacyVehicles = new EntitySet<VehEngCfgToLegacyVehicle>(new Action<VehEngCfgToLegacyVehicle>(this.attach_VehEngCfgToLegacyVehicles), new Action<VehEngCfgToLegacyVehicle>(this.detach_VehEngCfgToLegacyVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToEngineConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToEngineConfigID
		{
			get
			{
				return this._VehicleToEngineConfigID;
			}
			set
			{
				if ((this._VehicleToEngineConfigID != value))
				{
					this.OnVehicleToEngineConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToEngineConfigID = value;
					this.SendPropertyChanged("VehicleToEngineConfigID");
					this.OnVehicleToEngineConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineConfigID", DbType="Int NOT NULL")]
		public int EngineConfigID
		{
			get
			{
				return this._EngineConfigID;
			}
			set
			{
				if ((this._EngineConfigID != value))
				{
					this.OnEngineConfigIDChanging(value);
					this.SendPropertyChanging();
					this._EngineConfigID = value;
					this.SendPropertyChanged("EngineConfigID");
					this.OnEngineConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleToEngineConfig_VehEngCfgToLegacyVehicle", Storage="_VehEngCfgToLegacyVehicles", ThisKey="VehicleToEngineConfigID", OtherKey="VehicleToEngineConfigID")]
		public EntitySet<VehEngCfgToLegacyVehicle> VehEngCfgToLegacyVehicles
		{
			get
			{
				return this._VehEngCfgToLegacyVehicles;
			}
			set
			{
				this._VehEngCfgToLegacyVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehEngCfgToLegacyVehicles(VehEngCfgToLegacyVehicle entity)
		{
			this.SendPropertyChanging();
			entity.VehicleToEngineConfig = this;
		}
		
		private void detach_VehEngCfgToLegacyVehicles(VehEngCfgToLegacyVehicle entity)
		{
			this.SendPropertyChanging();
			entity.VehicleToEngineConfig = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToMfrBodyCode")]
	public partial class VehicleToMfrBodyCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToMfrBodyCodeID;
		
		private int _VehicleID;
		
		private int _MfrBodyCodeID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToMfrBodyCodeIDChanging(int value);
    partial void OnVehicleToMfrBodyCodeIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnMfrBodyCodeIDChanging(int value);
    partial void OnMfrBodyCodeIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToMfrBodyCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToMfrBodyCodeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToMfrBodyCodeID
		{
			get
			{
				return this._VehicleToMfrBodyCodeID;
			}
			set
			{
				if ((this._VehicleToMfrBodyCodeID != value))
				{
					this.OnVehicleToMfrBodyCodeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToMfrBodyCodeID = value;
					this.SendPropertyChanged("VehicleToMfrBodyCodeID");
					this.OnVehicleToMfrBodyCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfrBodyCodeID", DbType="Int NOT NULL")]
		public int MfrBodyCodeID
		{
			get
			{
				return this._MfrBodyCodeID;
			}
			set
			{
				if ((this._MfrBodyCodeID != value))
				{
					this.OnMfrBodyCodeIDChanging(value);
					this.SendPropertyChanging();
					this._MfrBodyCodeID = value;
					this.SendPropertyChanged("MfrBodyCodeID");
					this.OnMfrBodyCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToSpringTypeConfig")]
	public partial class VehicleToSpringTypeConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToSpringTypeConfigID;
		
		private int _VehicleID;
		
		private int _SpringTypeConfigID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToSpringTypeConfigIDChanging(int value);
    partial void OnVehicleToSpringTypeConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnSpringTypeConfigIDChanging(int value);
    partial void OnSpringTypeConfigIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToSpringTypeConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToSpringTypeConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToSpringTypeConfigID
		{
			get
			{
				return this._VehicleToSpringTypeConfigID;
			}
			set
			{
				if ((this._VehicleToSpringTypeConfigID != value))
				{
					this.OnVehicleToSpringTypeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToSpringTypeConfigID = value;
					this.SendPropertyChanged("VehicleToSpringTypeConfigID");
					this.OnVehicleToSpringTypeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringTypeConfigID", DbType="Int NOT NULL")]
		public int SpringTypeConfigID
		{
			get
			{
				return this._SpringTypeConfigID;
			}
			set
			{
				if ((this._SpringTypeConfigID != value))
				{
					this.OnSpringTypeConfigIDChanging(value);
					this.SendPropertyChanging();
					this._SpringTypeConfigID = value;
					this.SendPropertyChanged("SpringTypeConfigID");
					this.OnSpringTypeConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToSteeringConfig")]
	public partial class VehicleToSteeringConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToSteeringConfigID;
		
		private int _VehicleID;
		
		private int _SteeringConfigID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToSteeringConfigIDChanging(int value);
    partial void OnVehicleToSteeringConfigIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnSteeringConfigIDChanging(int value);
    partial void OnSteeringConfigIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToSteeringConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToSteeringConfigID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToSteeringConfigID
		{
			get
			{
				return this._VehicleToSteeringConfigID;
			}
			set
			{
				if ((this._VehicleToSteeringConfigID != value))
				{
					this.OnVehicleToSteeringConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToSteeringConfigID = value;
					this.SendPropertyChanged("VehicleToSteeringConfigID");
					this.OnVehicleToSteeringConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteeringConfigID", DbType="Int NOT NULL")]
		public int SteeringConfigID
		{
			get
			{
				return this._SteeringConfigID;
			}
			set
			{
				if ((this._SteeringConfigID != value))
				{
					this.OnSteeringConfigIDChanging(value);
					this.SendPropertyChanging();
					this._SteeringConfigID = value;
					this.SendPropertyChanged("SteeringConfigID");
					this.OnSteeringConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToTransmission")]
	public partial class VehicleToTransmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToTransmissionID;
		
		private int _VehicleID;
		
		private int _TransmissionID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToTransmissionIDChanging(int value);
    partial void OnVehicleToTransmissionIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnTransmissionIDChanging(int value);
    partial void OnTransmissionIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToTransmission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToTransmissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToTransmissionID
		{
			get
			{
				return this._VehicleToTransmissionID;
			}
			set
			{
				if ((this._VehicleToTransmissionID != value))
				{
					this.OnVehicleToTransmissionIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToTransmissionID = value;
					this.SendPropertyChanged("VehicleToTransmissionID");
					this.OnVehicleToTransmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionID", DbType="Int NOT NULL")]
		public int TransmissionID
		{
			get
			{
				return this._TransmissionID;
			}
			set
			{
				if ((this._TransmissionID != value))
				{
					this.OnTransmissionIDChanging(value);
					this.SendPropertyChanging();
					this._TransmissionID = value;
					this.SendPropertyChanged("TransmissionID");
					this.OnTransmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleToWheelbase")]
	public partial class VehicleToWheelbase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleToWheelbaseID;
		
		private int _VehicleID;
		
		private int _WheelbaseID;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleToWheelbaseIDChanging(int value);
    partial void OnVehicleToWheelbaseIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnWheelbaseIDChanging(int value);
    partial void OnWheelbaseIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public VehicleToWheelbase()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleToWheelbaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleToWheelbaseID
		{
			get
			{
				return this._VehicleToWheelbaseID;
			}
			set
			{
				if ((this._VehicleToWheelbaseID != value))
				{
					this.OnVehicleToWheelbaseIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleToWheelbaseID = value;
					this.SendPropertyChanged("VehicleToWheelbaseID");
					this.OnVehicleToWheelbaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WheelbaseID", DbType="Int NOT NULL")]
		public int WheelbaseID
		{
			get
			{
				return this._WheelbaseID;
			}
			set
			{
				if ((this._WheelbaseID != value))
				{
					this.OnWheelbaseIDChanging(value);
					this.SendPropertyChanging();
					this._WheelbaseID = value;
					this.SendPropertyChanged("WheelbaseID");
					this.OnWheelbaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Char(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleType")]
	public partial class VehicleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleTypeID;
		
		private string _VehicleTypeName;
		
		private System.Nullable<int> _VehicleTypeGroupID;
		
		private EntitySet<Model> _Models;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleTypeIDChanging(int value);
    partial void OnVehicleTypeIDChanged();
    partial void OnVehicleTypeNameChanging(string value);
    partial void OnVehicleTypeNameChanged();
    partial void OnVehicleTypeGroupIDChanging(System.Nullable<int> value);
    partial void OnVehicleTypeGroupIDChanged();
    #endregion
		
		public VehicleType()
		{
			this._Models = new EntitySet<Model>(new Action<Model>(this.attach_Models), new Action<Model>(this.detach_Models));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleTypeName
		{
			get
			{
				return this._VehicleTypeName;
			}
			set
			{
				if ((this._VehicleTypeName != value))
				{
					this.OnVehicleTypeNameChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeName = value;
					this.SendPropertyChanged("VehicleTypeName");
					this.OnVehicleTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeGroupID", DbType="Int")]
		public System.Nullable<int> VehicleTypeGroupID
		{
			get
			{
				return this._VehicleTypeGroupID;
			}
			set
			{
				if ((this._VehicleTypeGroupID != value))
				{
					this.OnVehicleTypeGroupIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeGroupID = value;
					this.SendPropertyChanged("VehicleTypeGroupID");
					this.OnVehicleTypeGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleType_Model", Storage="_Models", ThisKey="VehicleTypeID", OtherKey="VehicleTypeID")]
		public EntitySet<Model> Models
		{
			get
			{
				return this._Models;
			}
			set
			{
				this._Models.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.VehicleType = this;
		}
		
		private void detach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.VehicleType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleTypeGroup")]
	public partial class VehicleTypeGroup
	{
		
		private int _VehicleTypeGroupID;
		
		private string _VehicleTypeGroupName;
		
		public VehicleTypeGroup()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeGroupID", DbType="Int NOT NULL")]
		public int VehicleTypeGroupID
		{
			get
			{
				return this._VehicleTypeGroupID;
			}
			set
			{
				if ((this._VehicleTypeGroupID != value))
				{
					this._VehicleTypeGroupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeGroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleTypeGroupName
		{
			get
			{
				return this._VehicleTypeGroupName;
			}
			set
			{
				if ((this._VehicleTypeGroupName != value))
				{
					this._VehicleTypeGroupName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Version")]
	public partial class VCDBVersion
	{
		
		private System.DateTime _VersionDate;
		
		public VCDBVersion()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this._VersionDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WheelBase")]
	public partial class WheelBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WheelBaseID;
		
		private string _WheelBase1;
		
		private string _WheelBaseMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWheelBaseIDChanging(int value);
    partial void OnWheelBaseIDChanged();
    partial void OnWheelBase1Changing(string value);
    partial void OnWheelBase1Changed();
    partial void OnWheelBaseMetricChanging(string value);
    partial void OnWheelBaseMetricChanged();
    #endregion
		
		public WheelBase()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WheelBaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WheelBaseID
		{
			get
			{
				return this._WheelBaseID;
			}
			set
			{
				if ((this._WheelBaseID != value))
				{
					this.OnWheelBaseIDChanging(value);
					this.SendPropertyChanging();
					this._WheelBaseID = value;
					this.SendPropertyChanged("WheelBaseID");
					this.OnWheelBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="WheelBase", Storage="_WheelBase1", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string WheelBase1
		{
			get
			{
				return this._WheelBase1;
			}
			set
			{
				if ((this._WheelBase1 != value))
				{
					this.OnWheelBase1Changing(value);
					this.SendPropertyChanging();
					this._WheelBase1 = value;
					this.SendPropertyChanged("WheelBase1");
					this.OnWheelBase1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WheelBaseMetric", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string WheelBaseMetric
		{
			get
			{
				return this._WheelBaseMetric;
			}
			set
			{
				if ((this._WheelBaseMetric != value))
				{
					this.OnWheelBaseMetricChanging(value);
					this.SendPropertyChanging();
					this._WheelBaseMetric = value;
					this.SendPropertyChanged("WheelBaseMetric");
					this.OnWheelBaseMetricChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
