#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reporting.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="")]
	public partial class CurtDevDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertPart(Part instance);
    partial void UpdatePart(Part instance);
    partial void DeletePart(Part instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertContentBridge(ContentBridge instance);
    partial void UpdateContentBridge(ContentBridge instance);
    partial void DeleteContentBridge(ContentBridge instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    partial void InsertCustomerPricing(CustomerPricing instance);
    partial void UpdateCustomerPricing(CustomerPricing instance);
    partial void DeleteCustomerPricing(CustomerPricing instance);
    partial void InsertPartImage(PartImage instance);
    partial void UpdatePartImage(PartImage instance);
    partial void DeletePartImage(PartImage instance);
    partial void InsertPartImageSize(PartImageSize instance);
    partial void UpdatePartImageSize(PartImageSize instance);
    partial void DeletePartImageSize(PartImageSize instance);
    partial void InsertPartAttribute(PartAttribute instance);
    partial void UpdatePartAttribute(PartAttribute instance);
    partial void DeletePartAttribute(PartAttribute instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void Insertvcdb_Make(vcdb_Make instance);
    partial void Updatevcdb_Make(vcdb_Make instance);
    partial void Deletevcdb_Make(vcdb_Make instance);
    partial void Insertvcdb_Model(vcdb_Model instance);
    partial void Updatevcdb_Model(vcdb_Model instance);
    partial void Deletevcdb_Model(vcdb_Model instance);
    partial void Insertvcdb_Vehicle(vcdb_Vehicle instance);
    partial void Updatevcdb_Vehicle(vcdb_Vehicle instance);
    partial void Deletevcdb_Vehicle(vcdb_Vehicle instance);
    partial void Insertvcdb_VehiclePart(vcdb_VehiclePart instance);
    partial void Updatevcdb_VehiclePart(vcdb_VehiclePart instance);
    partial void Deletevcdb_VehiclePart(vcdb_VehiclePart instance);
    partial void Insertvcdb_Year(vcdb_Year instance);
    partial void Updatevcdb_Year(vcdb_Year instance);
    partial void Deletevcdb_Year(vcdb_Year instance);
    partial void InsertVehicleConfig(VehicleConfig instance);
    partial void UpdateVehicleConfig(VehicleConfig instance);
    partial void DeleteVehicleConfig(VehicleConfig instance);
    partial void InsertVehicleConfigAttribute(VehicleConfigAttribute instance);
    partial void UpdateVehicleConfigAttribute(VehicleConfigAttribute instance);
    partial void DeleteVehicleConfigAttribute(VehicleConfigAttribute instance);
    partial void InsertSubmodel(Submodel instance);
    partial void UpdateSubmodel(Submodel instance);
    partial void DeleteSubmodel(Submodel instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertConfigAttribute(ConfigAttribute instance);
    partial void UpdateConfigAttribute(ConfigAttribute instance);
    partial void DeleteConfigAttribute(ConfigAttribute instance);
    partial void InsertConfigAttributeType(ConfigAttributeType instance);
    partial void UpdateConfigAttributeType(ConfigAttributeType instance);
    partial void DeleteConfigAttributeType(ConfigAttributeType instance);
    partial void InsertAcesType(AcesType instance);
    partial void UpdateAcesType(AcesType instance);
    partial void DeleteAcesType(AcesType instance);
    partial void InsertBaseVehicle(BaseVehicle instance);
    partial void UpdateBaseVehicle(BaseVehicle instance);
    partial void DeleteBaseVehicle(BaseVehicle instance);
    partial void InsertPartPackage(PartPackage instance);
    partial void UpdatePartPackage(PartPackage instance);
    partial void DeletePartPackage(PartPackage instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertUnitOfMeasure(UnitOfMeasure instance);
    partial void UpdateUnitOfMeasure(UnitOfMeasure instance);
    partial void DeleteUnitOfMeasure(UnitOfMeasure instance);
    partial void InsertPartVideo(PartVideo instance);
    partial void UpdatePartVideo(PartVideo instance);
    partial void DeletePartVideo(PartVideo instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertVehiclePart(VehiclePart instance);
    partial void UpdateVehiclePart(VehiclePart instance);
    partial void DeleteVehiclePart(VehiclePart instance);
    partial void InsertCatPart(CatPart instance);
    partial void UpdateCatPart(CatPart instance);
    partial void DeleteCatPart(CatPart instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertMake(Make instance);
    partial void UpdateMake(Make instance);
    partial void DeleteMake(Make instance);
    partial void InsertStyle(Style instance);
    partial void UpdateStyle(Style instance);
    partial void DeleteStyle(Style instance);
    partial void InsertYear(Year instance);
    partial void UpdateYear(Year instance);
    partial void DeleteYear(Year instance);
    partial void InsertVehicle(Vehicle instance);
    partial void UpdateVehicle(Vehicle instance);
    partial void DeleteVehicle(Vehicle instance);
    partial void InsertRelatedPart(RelatedPart instance);
    partial void UpdateRelatedPart(RelatedPart instance);
    partial void DeleteRelatedPart(RelatedPart instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertCustomerUser(CustomerUser instance);
    partial void UpdateCustomerUser(CustomerUser instance);
    partial void DeleteCustomerUser(CustomerUser instance);
    partial void InsertCustomerLoadsheet(CustomerLoadsheet instance);
    partial void UpdateCustomerLoadsheet(CustomerLoadsheet instance);
    partial void DeleteCustomerLoadsheet(CustomerLoadsheet instance);
    partial void InsertCustomerLoadsheetField(CustomerLoadsheetField instance);
    partial void UpdateCustomerLoadsheetField(CustomerLoadsheetField instance);
    partial void DeleteCustomerLoadsheetField(CustomerLoadsheetField instance);
    partial void InsertLoadsheetField(LoadsheetField instance);
    partial void UpdateLoadsheetField(LoadsheetField instance);
    partial void DeleteLoadsheetField(LoadsheetField instance);
    #endregion
		
		public CurtDevDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Part> Parts
		{
			get
			{
				return this.GetTable<Part>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<ContentBridge> ContentBridges
		{
			get
			{
				return this.GetTable<ContentBridge>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
		
		public System.Data.Linq.Table<CustomerPricing> CustomerPricings
		{
			get
			{
				return this.GetTable<CustomerPricing>();
			}
		}
		
		public System.Data.Linq.Table<PartImage> PartImages
		{
			get
			{
				return this.GetTable<PartImage>();
			}
		}
		
		public System.Data.Linq.Table<PartImageSize> PartImageSizes
		{
			get
			{
				return this.GetTable<PartImageSize>();
			}
		}
		
		public System.Data.Linq.Table<PartAttribute> PartAttributes
		{
			get
			{
				return this.GetTable<PartAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Make> vcdb_Makes
		{
			get
			{
				return this.GetTable<vcdb_Make>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Model> vcdb_Models
		{
			get
			{
				return this.GetTable<vcdb_Model>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this.GetTable<vcdb_Vehicle>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_VehiclePart> vcdb_VehicleParts
		{
			get
			{
				return this.GetTable<vcdb_VehiclePart>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Year> vcdb_Years
		{
			get
			{
				return this.GetTable<vcdb_Year>();
			}
		}
		
		public System.Data.Linq.Table<VehicleConfig> VehicleConfigs
		{
			get
			{
				return this.GetTable<VehicleConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleConfigAttribute> VehicleConfigAttributes
		{
			get
			{
				return this.GetTable<VehicleConfigAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Submodel> Submodels
		{
			get
			{
				return this.GetTable<Submodel>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<ConfigAttribute> ConfigAttributes
		{
			get
			{
				return this.GetTable<ConfigAttribute>();
			}
		}
		
		public System.Data.Linq.Table<ConfigAttributeType> ConfigAttributeTypes
		{
			get
			{
				return this.GetTable<ConfigAttributeType>();
			}
		}
		
		public System.Data.Linq.Table<AcesType> AcesTypes
		{
			get
			{
				return this.GetTable<AcesType>();
			}
		}
		
		public System.Data.Linq.Table<BaseVehicle> BaseVehicles
		{
			get
			{
				return this.GetTable<BaseVehicle>();
			}
		}
		
		public System.Data.Linq.Table<PartPackage> PartPackages
		{
			get
			{
				return this.GetTable<PartPackage>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<UnitOfMeasure> UnitOfMeasures
		{
			get
			{
				return this.GetTable<UnitOfMeasure>();
			}
		}
		
		public System.Data.Linq.Table<PartVideo> PartVideos
		{
			get
			{
				return this.GetTable<PartVideo>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<VehiclePart> VehicleParts
		{
			get
			{
				return this.GetTable<VehiclePart>();
			}
		}
		
		public System.Data.Linq.Table<CatPart> CatParts
		{
			get
			{
				return this.GetTable<CatPart>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<Make> Makes
		{
			get
			{
				return this.GetTable<Make>();
			}
		}
		
		public System.Data.Linq.Table<Style> Styles
		{
			get
			{
				return this.GetTable<Style>();
			}
		}
		
		public System.Data.Linq.Table<Year> Years
		{
			get
			{
				return this.GetTable<Year>();
			}
		}
		
		public System.Data.Linq.Table<Vehicle> Vehicles
		{
			get
			{
				return this.GetTable<Vehicle>();
			}
		}
		
		public System.Data.Linq.Table<RelatedPart> RelatedParts
		{
			get
			{
				return this.GetTable<RelatedPart>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<CustomerUser> CustomerUsers
		{
			get
			{
				return this.GetTable<CustomerUser>();
			}
		}
		
		public System.Data.Linq.Table<CustomerLoadsheet> CustomerLoadsheets
		{
			get
			{
				return this.GetTable<CustomerLoadsheet>();
			}
		}
		
		public System.Data.Linq.Table<CustomerLoadsheetField> CustomerLoadsheetFields
		{
			get
			{
				return this.GetTable<CustomerLoadsheetField>();
			}
		}
		
		public System.Data.Linq.Table<LoadsheetField> LoadsheetFields
		{
			get
			{
				return this.GetTable<LoadsheetField>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cust_id;
		
		private string _name;
		
		private string _email;
		
		private string _address;
		
		private string _city;
		
		private int _stateID;
		
		private string _phone;
		
		private string _fax;
		
		private string _contact_person;
		
		private int _dealer_type;
		
		private string _latitude;
		
		private string _longitude;
		
		private string _password;
		
		private string _website;
		
		private System.Nullable<int> _customerID;
		
		private bool _isDummy;
		
		private System.Nullable<int> _parentID;
		
		private string _searchURL;
		
		private string _eLocalURL;
		
		private string _logo;
		
		private string _address2;
		
		private string _postal_code;
		
		private int _mCodeID;
		
		private System.Nullable<int> _salesRepID;
		
		private System.Nullable<System.Guid> _APIKey;
		
		private int _tier;
		
		private EntitySet<CustomerLoadsheet> _CustomerLoadsheets;
		
		private EntityRef<CustomerPricing> _CustomerPricing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void Oncontact_personChanging(string value);
    partial void Oncontact_personChanged();
    partial void Ondealer_typeChanging(int value);
    partial void Ondealer_typeChanged();
    partial void OnlatitudeChanging(string value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(string value);
    partial void OnlongitudeChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OncustomerIDChanging(System.Nullable<int> value);
    partial void OncustomerIDChanged();
    partial void OnisDummyChanging(bool value);
    partial void OnisDummyChanged();
    partial void OnparentIDChanging(System.Nullable<int> value);
    partial void OnparentIDChanged();
    partial void OnsearchURLChanging(string value);
    partial void OnsearchURLChanged();
    partial void OneLocalURLChanging(string value);
    partial void OneLocalURLChanged();
    partial void OnlogoChanging(string value);
    partial void OnlogoChanged();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void Onpostal_codeChanging(string value);
    partial void Onpostal_codeChanged();
    partial void OnmCodeIDChanging(int value);
    partial void OnmCodeIDChanged();
    partial void OnsalesRepIDChanging(System.Nullable<int> value);
    partial void OnsalesRepIDChanged();
    partial void OnAPIKeyChanging(System.Nullable<System.Guid> value);
    partial void OnAPIKeyChanged();
    partial void OntierChanging(int value);
    partial void OntierChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerLoadsheets = new EntitySet<CustomerLoadsheet>(new Action<CustomerLoadsheet>(this.attach_CustomerLoadsheets), new Action<CustomerLoadsheet>(this.detach_CustomerLoadsheets));
			this._CustomerPricing = default(EntityRef<CustomerPricing>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(500)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(150)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", DbType="Int NOT NULL")]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(50)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="VarChar(50)")]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contact_person", DbType="VarChar(300)")]
		public string contact_person
		{
			get
			{
				return this._contact_person;
			}
			set
			{
				if ((this._contact_person != value))
				{
					this.Oncontact_personChanging(value);
					this.SendPropertyChanging();
					this._contact_person = value;
					this.SendPropertyChanged("contact_person");
					this.Oncontact_personChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dealer_type", DbType="Int NOT NULL")]
		public int dealer_type
		{
			get
			{
				return this._dealer_type;
			}
			set
			{
				if ((this._dealer_type != value))
				{
					this.Ondealer_typeChanging(value);
					this.SendPropertyChanging();
					this._dealer_type = value;
					this.SendPropertyChanged("dealer_type");
					this.Ondealer_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="VarChar(200)")]
		public string latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="VarChar(200)")]
		public string longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="VarChar(500)")]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int")]
		public System.Nullable<int> customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					if (this._CustomerPricing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDummy", DbType="Bit NOT NULL")]
		public bool isDummy
		{
			get
			{
				return this._isDummy;
			}
			set
			{
				if ((this._isDummy != value))
				{
					this.OnisDummyChanging(value);
					this.SendPropertyChanging();
					this._isDummy = value;
					this.SendPropertyChanged("isDummy");
					this.OnisDummyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int")]
		public System.Nullable<int> parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_searchURL", DbType="VarChar(500)")]
		public string searchURL
		{
			get
			{
				return this._searchURL;
			}
			set
			{
				if ((this._searchURL != value))
				{
					this.OnsearchURLChanging(value);
					this.SendPropertyChanging();
					this._searchURL = value;
					this.SendPropertyChanged("searchURL");
					this.OnsearchURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eLocalURL", DbType="VarChar(500)")]
		public string eLocalURL
		{
			get
			{
				return this._eLocalURL;
			}
			set
			{
				if ((this._eLocalURL != value))
				{
					this.OneLocalURLChanging(value);
					this.SendPropertyChanging();
					this._eLocalURL = value;
					this.SendPropertyChanged("eLocalURL");
					this.OneLocalURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logo", DbType="VarChar(500)")]
		public string logo
		{
			get
			{
				return this._logo;
			}
			set
			{
				if ((this._logo != value))
				{
					this.OnlogoChanging(value);
					this.SendPropertyChanging();
					this._logo = value;
					this.SendPropertyChanged("logo");
					this.OnlogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="VarChar(500)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postal_code", DbType="VarChar(25)")]
		public string postal_code
		{
			get
			{
				return this._postal_code;
			}
			set
			{
				if ((this._postal_code != value))
				{
					this.Onpostal_codeChanging(value);
					this.SendPropertyChanging();
					this._postal_code = value;
					this.SendPropertyChanged("postal_code");
					this.Onpostal_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mCodeID", DbType="Int NOT NULL")]
		public int mCodeID
		{
			get
			{
				return this._mCodeID;
			}
			set
			{
				if ((this._mCodeID != value))
				{
					this.OnmCodeIDChanging(value);
					this.SendPropertyChanging();
					this._mCodeID = value;
					this.SendPropertyChanged("mCodeID");
					this.OnmCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salesRepID", DbType="Int")]
		public System.Nullable<int> salesRepID
		{
			get
			{
				return this._salesRepID;
			}
			set
			{
				if ((this._salesRepID != value))
				{
					this.OnsalesRepIDChanging(value);
					this.SendPropertyChanging();
					this._salesRepID = value;
					this.SendPropertyChanged("salesRepID");
					this.OnsalesRepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APIKey", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> APIKey
		{
			get
			{
				return this._APIKey;
			}
			set
			{
				if ((this._APIKey != value))
				{
					this.OnAPIKeyChanging(value);
					this.SendPropertyChanging();
					this._APIKey = value;
					this.SendPropertyChanged("APIKey");
					this.OnAPIKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tier", DbType="Int NOT NULL")]
		public int tier
		{
			get
			{
				return this._tier;
			}
			set
			{
				if ((this._tier != value))
				{
					this.OntierChanging(value);
					this.SendPropertyChanging();
					this._tier = value;
					this.SendPropertyChanged("tier");
					this.OntierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerLoadsheet", Storage="_CustomerLoadsheets", ThisKey="cust_id", OtherKey="cust_ID")]
		public EntitySet<CustomerLoadsheet> CustomerLoadsheets
		{
			get
			{
				return this._CustomerLoadsheets;
			}
			set
			{
				this._CustomerLoadsheets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerPricing_Customer", Storage="_CustomerPricing", ThisKey="customerID", OtherKey="cust_id", IsForeignKey=true)]
		public CustomerPricing CustomerPricing
		{
			get
			{
				return this._CustomerPricing.Entity;
			}
			set
			{
				CustomerPricing previousValue = this._CustomerPricing.Entity;
				if (((previousValue != value) 
							|| (this._CustomerPricing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerPricing.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerPricing.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._customerID = value.cust_id;
					}
					else
					{
						this._customerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerPricing");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerLoadsheets(CustomerLoadsheet entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerLoadsheets(CustomerLoadsheet entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Part")]
	public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _partID;
		
		private int _status;
		
		private System.DateTime _dateModified;
		
		private System.DateTime _dateAdded;
		
		private string _shortDesc;
		
		private string _oldPartNumber;
		
		private System.Nullable<int> _priceCode;
		
		private int _classID;
		
		private bool _featured;
		
		private System.Nullable<int> _ACESPartTypeID;
		
		private EntitySet<ContentBridge> _ContentBridges;
		
		private EntitySet<PartImage> _PartImages;
		
		private EntitySet<PartAttribute> _PartAttributes;
		
		private EntitySet<vcdb_VehiclePart> _vcdb_VehicleParts;
		
		private EntitySet<PartPackage> _PartPackages;
		
		private EntitySet<Price> _Prices;
		
		private EntitySet<PartVideo> _PartVideos;
		
		private EntitySet<VehiclePart> _VehicleParts;
		
		private EntitySet<CatPart> _CatParts;
		
		private EntitySet<RelatedPart> _RelatedParts;
		
		private EntitySet<Class> _Classes;
		
		private EntityRef<CustomerPricing> _CustomerPricing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndateModifiedChanging(System.DateTime value);
    partial void OndateModifiedChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnshortDescChanging(string value);
    partial void OnshortDescChanged();
    partial void OnoldPartNumberChanging(string value);
    partial void OnoldPartNumberChanged();
    partial void OnpriceCodeChanging(System.Nullable<int> value);
    partial void OnpriceCodeChanged();
    partial void OnclassIDChanging(int value);
    partial void OnclassIDChanged();
    partial void OnfeaturedChanging(bool value);
    partial void OnfeaturedChanged();
    partial void OnACESPartTypeIDChanging(System.Nullable<int> value);
    partial void OnACESPartTypeIDChanged();
    #endregion
		
		public Part()
		{
			this._ContentBridges = new EntitySet<ContentBridge>(new Action<ContentBridge>(this.attach_ContentBridges), new Action<ContentBridge>(this.detach_ContentBridges));
			this._PartImages = new EntitySet<PartImage>(new Action<PartImage>(this.attach_PartImages), new Action<PartImage>(this.detach_PartImages));
			this._PartAttributes = new EntitySet<PartAttribute>(new Action<PartAttribute>(this.attach_PartAttributes), new Action<PartAttribute>(this.detach_PartAttributes));
			this._vcdb_VehicleParts = new EntitySet<vcdb_VehiclePart>(new Action<vcdb_VehiclePart>(this.attach_vcdb_VehicleParts), new Action<vcdb_VehiclePart>(this.detach_vcdb_VehicleParts));
			this._PartPackages = new EntitySet<PartPackage>(new Action<PartPackage>(this.attach_PartPackages), new Action<PartPackage>(this.detach_PartPackages));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._PartVideos = new EntitySet<PartVideo>(new Action<PartVideo>(this.attach_PartVideos), new Action<PartVideo>(this.detach_PartVideos));
			this._VehicleParts = new EntitySet<VehiclePart>(new Action<VehiclePart>(this.attach_VehicleParts), new Action<VehiclePart>(this.detach_VehicleParts));
			this._CatParts = new EntitySet<CatPart>(new Action<CatPart>(this.attach_CatParts), new Action<CatPart>(this.detach_CatParts));
			this._RelatedParts = new EntitySet<RelatedPart>(new Action<RelatedPart>(this.attach_RelatedParts), new Action<RelatedPart>(this.detach_RelatedParts));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._CustomerPricing = default(EntityRef<CustomerPricing>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._CustomerPricing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModified", DbType="DateTime NOT NULL")]
		public System.DateTime dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this.OndateModifiedChanging(value);
					this.SendPropertyChanging();
					this._dateModified = value;
					this.SendPropertyChanged("dateModified");
					this.OndateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortDesc", DbType="VarChar(255)")]
		public string shortDesc
		{
			get
			{
				return this._shortDesc;
			}
			set
			{
				if ((this._shortDesc != value))
				{
					this.OnshortDescChanging(value);
					this.SendPropertyChanging();
					this._shortDesc = value;
					this.SendPropertyChanged("shortDesc");
					this.OnshortDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldPartNumber", DbType="VarChar(100)")]
		public string oldPartNumber
		{
			get
			{
				return this._oldPartNumber;
			}
			set
			{
				if ((this._oldPartNumber != value))
				{
					this.OnoldPartNumberChanging(value);
					this.SendPropertyChanging();
					this._oldPartNumber = value;
					this.SendPropertyChanged("oldPartNumber");
					this.OnoldPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceCode", DbType="Int")]
		public System.Nullable<int> priceCode
		{
			get
			{
				return this._priceCode;
			}
			set
			{
				if ((this._priceCode != value))
				{
					this.OnpriceCodeChanging(value);
					this.SendPropertyChanging();
					this._priceCode = value;
					this.SendPropertyChanged("priceCode");
					this.OnpriceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", DbType="Int NOT NULL")]
		public int classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featured", DbType="Bit NOT NULL")]
		public bool featured
		{
			get
			{
				return this._featured;
			}
			set
			{
				if ((this._featured != value))
				{
					this.OnfeaturedChanging(value);
					this.SendPropertyChanging();
					this._featured = value;
					this.SendPropertyChanged("featured");
					this.OnfeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACESPartTypeID", DbType="Int")]
		public System.Nullable<int> ACESPartTypeID
		{
			get
			{
				return this._ACESPartTypeID;
			}
			set
			{
				if ((this._ACESPartTypeID != value))
				{
					this.OnACESPartTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ACESPartTypeID = value;
					this.SendPropertyChanged("ACESPartTypeID");
					this.OnACESPartTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_ContentBridge", Storage="_ContentBridges", ThisKey="partID", OtherKey="partID")]
		public EntitySet<ContentBridge> ContentBridges
		{
			get
			{
				return this._ContentBridges;
			}
			set
			{
				this._ContentBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartImage", Storage="_PartImages", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartImage> PartImages
		{
			get
			{
				return this._PartImages;
			}
			set
			{
				this._PartImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartAttribute", Storage="_PartAttributes", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartAttribute> PartAttributes
		{
			get
			{
				return this._PartAttributes;
			}
			set
			{
				this._PartAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_vcdb_VehiclePart", Storage="_vcdb_VehicleParts", ThisKey="partID", OtherKey="PartNumber")]
		public EntitySet<vcdb_VehiclePart> vcdb_VehicleParts
		{
			get
			{
				return this._vcdb_VehicleParts;
			}
			set
			{
				this._vcdb_VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartPackage", Storage="_PartPackages", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartPackage> PartPackages
		{
			get
			{
				return this._PartPackages;
			}
			set
			{
				this._PartPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Price", Storage="_Prices", ThisKey="partID", OtherKey="partID")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartVideo", Storage="_PartVideos", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartVideo> PartVideos
		{
			get
			{
				return this._PartVideos;
			}
			set
			{
				this._PartVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_VehiclePart", Storage="_VehicleParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<VehiclePart> VehicleParts
		{
			get
			{
				return this._VehicleParts;
			}
			set
			{
				this._VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_CatPart", Storage="_CatParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<CatPart> CatParts
		{
			get
			{
				return this._CatParts;
			}
			set
			{
				this._CatParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_RelatedPart", Storage="_RelatedParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<RelatedPart> RelatedParts
		{
			get
			{
				return this._RelatedParts;
			}
			set
			{
				this._RelatedParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Class", Storage="_Classes", ThisKey="classID", OtherKey="classID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerPricing_Part", Storage="_CustomerPricing", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public CustomerPricing CustomerPricing
		{
			get
			{
				return this._CustomerPricing.Entity;
			}
			set
			{
				CustomerPricing previousValue = this._CustomerPricing.Entity;
				if (((previousValue != value) 
							|| (this._CustomerPricing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerPricing.Entity = null;
						previousValue.Parts.Remove(this);
					}
					this._CustomerPricing.Entity = value;
					if ((value != null))
					{
						value.Parts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("CustomerPricing");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartAttributes(PartAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartAttributes(PartAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartPackages(PartPackage entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartPackages(PartPackage entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartVideos(PartVideo entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartVideos(PartVideo entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_CatParts(CatPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_CatParts(CatPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_RelatedParts(RelatedPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_RelatedParts(RelatedPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contentID;
		
		private string _text;
		
		private int _cTypeID;
		
		private EntitySet<ContentBridge> _ContentBridges;
		
		private EntityRef<ContentType> _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontentIDChanging(int value);
    partial void OncontentIDChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OncTypeIDChanging(int value);
    partial void OncTypeIDChanged();
    #endregion
		
		public Content()
		{
			this._ContentBridges = new EntitySet<ContentBridge>(new Action<ContentBridge>(this.attach_ContentBridges), new Action<ContentBridge>(this.detach_ContentBridges));
			this._ContentType = default(EntityRef<ContentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cTypeID", DbType="Int NOT NULL")]
		public int cTypeID
		{
			get
			{
				return this._cTypeID;
			}
			set
			{
				if ((this._cTypeID != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncTypeIDChanging(value);
					this.SendPropertyChanging();
					this._cTypeID = value;
					this.SendPropertyChanged("cTypeID");
					this.OncTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentBridge", Storage="_ContentBridges", ThisKey="contentID", OtherKey="contentID")]
		public EntitySet<ContentBridge> ContentBridges
		{
			get
			{
				return this._ContentBridges;
			}
			set
			{
				this._ContentBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Content", Storage="_ContentType", ThisKey="cTypeID", OtherKey="cTypeID", IsForeignKey=true)]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.Contents.Remove(this);
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.Contents.Add(this);
						this._cTypeID = value.cTypeID;
					}
					else
					{
						this._cTypeID = default(int);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Content = this;
		}
		
		private void detach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Content = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentBridge")]
	public partial class ContentBridge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cBridgeID;
		
		private System.Nullable<int> _catID;
		
		private System.Nullable<int> _partID;
		
		private int _contentID;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncBridgeIDChanging(int value);
    partial void OncBridgeIDChanged();
    partial void OncatIDChanging(System.Nullable<int> value);
    partial void OncatIDChanged();
    partial void OnpartIDChanging(System.Nullable<int> value);
    partial void OnpartIDChanged();
    partial void OncontentIDChanging(int value);
    partial void OncontentIDChanged();
    #endregion
		
		public ContentBridge()
		{
			this._Content = default(EntityRef<Content>);
			this._Part = default(EntityRef<Part>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cBridgeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cBridgeID
		{
			get
			{
				return this._cBridgeID;
			}
			set
			{
				if ((this._cBridgeID != value))
				{
					this.OncBridgeIDChanging(value);
					this.SendPropertyChanging();
					this._cBridgeID = value;
					this.SendPropertyChanged("cBridgeID");
					this.OncBridgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int")]
		public System.Nullable<int> catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int")]
		public System.Nullable<int> partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", DbType="Int NOT NULL")]
		public int contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					if (this._Content.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentBridge", Storage="_Content", ThisKey="contentID", OtherKey="contentID", IsForeignKey=true)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.ContentBridges.Remove(this);
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.ContentBridges.Add(this);
						this._contentID = value.contentID;
					}
					else
					{
						this._contentID = default(int);
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_ContentBridge", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.ContentBridges.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.ContentBridges.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ContentBridge", Storage="_Category", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ContentBridges.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ContentBridges.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentType")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cTypeID;
		
		private string _type;
		
		private bool _allowHTML;
		
		private EntitySet<Content> _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncTypeIDChanging(int value);
    partial void OncTypeIDChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnallowHTMLChanging(bool value);
    partial void OnallowHTMLChanged();
    #endregion
		
		public ContentType()
		{
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cTypeID
		{
			get
			{
				return this._cTypeID;
			}
			set
			{
				if ((this._cTypeID != value))
				{
					this.OncTypeIDChanging(value);
					this.SendPropertyChanging();
					this._cTypeID = value;
					this.SendPropertyChanged("cTypeID");
					this.OncTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowHTML", DbType="Bit NOT NULL")]
		public bool allowHTML
		{
			get
			{
				return this._allowHTML;
			}
			set
			{
				if ((this._allowHTML != value))
				{
					this.OnallowHTMLChanging(value);
					this.SendPropertyChanging();
					this._allowHTML = value;
					this.SendPropertyChanged("allowHTML");
					this.OnallowHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Content", Storage="_Contents", ThisKey="cTypeID", OtherKey="cTypeID")]
		public EntitySet<Content> Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerPricing")]
	public partial class CustomerPricing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cust_price_id;
		
		private int _cust_id;
		
		private int _partID;
		
		private decimal _price;
		
		private int _isSale;
		
		private System.Nullable<System.DateTime> _sale_start;
		
		private System.Nullable<System.DateTime> _sale_end;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Part> _Parts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncust_price_idChanging(int value);
    partial void Oncust_price_idChanged();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnisSaleChanging(int value);
    partial void OnisSaleChanged();
    partial void Onsale_startChanging(System.Nullable<System.DateTime> value);
    partial void Onsale_startChanged();
    partial void Onsale_endChanging(System.Nullable<System.DateTime> value);
    partial void Onsale_endChanged();
    #endregion
		
		public CustomerPricing()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Parts = new EntitySet<Part>(new Action<Part>(this.attach_Parts), new Action<Part>(this.detach_Parts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_price_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cust_price_id
		{
			get
			{
				return this._cust_price_id;
			}
			set
			{
				if ((this._cust_price_id != value))
				{
					this.Oncust_price_idChanging(value);
					this.SendPropertyChanging();
					this._cust_price_id = value;
					this.SendPropertyChanged("cust_price_id");
					this.Oncust_price_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id", DbType="Int NOT NULL")]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSale", DbType="Int NOT NULL")]
		public int isSale
		{
			get
			{
				return this._isSale;
			}
			set
			{
				if ((this._isSale != value))
				{
					this.OnisSaleChanging(value);
					this.SendPropertyChanging();
					this._isSale = value;
					this.SendPropertyChanged("isSale");
					this.OnisSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sale_start", DbType="Date")]
		public System.Nullable<System.DateTime> sale_start
		{
			get
			{
				return this._sale_start;
			}
			set
			{
				if ((this._sale_start != value))
				{
					this.Onsale_startChanging(value);
					this.SendPropertyChanging();
					this._sale_start = value;
					this.SendPropertyChanged("sale_start");
					this.Onsale_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sale_end", DbType="Date")]
		public System.Nullable<System.DateTime> sale_end
		{
			get
			{
				return this._sale_end;
			}
			set
			{
				if ((this._sale_end != value))
				{
					this.Onsale_endChanging(value);
					this.SendPropertyChanging();
					this._sale_end = value;
					this.SendPropertyChanged("sale_end");
					this.Onsale_endChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerPricing_Customer", Storage="_Customers", ThisKey="cust_id", OtherKey="customerID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerPricing_Part", Storage="_Parts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<Part> Parts
		{
			get
			{
				return this._Parts;
			}
			set
			{
				this._Parts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerPricing = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerPricing = null;
		}
		
		private void attach_Parts(Part entity)
		{
			this.SendPropertyChanging();
			entity.CustomerPricing = this;
		}
		
		private void detach_Parts(Part entity)
		{
			this.SendPropertyChanging();
			entity.CustomerPricing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartImages")]
	public partial class PartImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _imageID;
		
		private int _sizeID;
		
		private char _sort;
		
		private string _path;
		
		private int _height;
		
		private int _width;
		
		private int _partID;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<PartImageSize> _PartImageSize;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnimageIDChanging(int value);
    partial void OnimageIDChanged();
    partial void OnsizeIDChanging(int value);
    partial void OnsizeIDChanged();
    partial void OnsortChanging(char value);
    partial void OnsortChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void OnheightChanging(int value);
    partial void OnheightChanged();
    partial void OnwidthChanging(int value);
    partial void OnwidthChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    #endregion
		
		public PartImage()
		{
			this._Part = default(EntityRef<Part>);
			this._PartImageSize = default(EntityRef<PartImageSize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int imageID
		{
			get
			{
				return this._imageID;
			}
			set
			{
				if ((this._imageID != value))
				{
					this.OnimageIDChanging(value);
					this.SendPropertyChanging();
					this._imageID = value;
					this.SendPropertyChanged("imageID");
					this.OnimageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sizeID", DbType="Int NOT NULL")]
		public int sizeID
		{
			get
			{
				return this._sizeID;
			}
			set
			{
				if ((this._sizeID != value))
				{
					if (this._PartImageSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsizeIDChanging(value);
					this.SendPropertyChanging();
					this._sizeID = value;
					this.SendPropertyChanged("sizeID");
					this.OnsizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="NChar(1) NOT NULL")]
		public char sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Int NOT NULL")]
		public int height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int NOT NULL")]
		public int width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartImage", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartImages.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartImages.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartImageSize_PartImage", Storage="_PartImageSize", ThisKey="sizeID", OtherKey="sizeID", IsForeignKey=true)]
		public PartImageSize PartImageSize
		{
			get
			{
				return this._PartImageSize.Entity;
			}
			set
			{
				PartImageSize previousValue = this._PartImageSize.Entity;
				if (((previousValue != value) 
							|| (this._PartImageSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartImageSize.Entity = null;
						previousValue.PartImages.Remove(this);
					}
					this._PartImageSize.Entity = value;
					if ((value != null))
					{
						value.PartImages.Add(this);
						this._sizeID = value.sizeID;
					}
					else
					{
						this._sizeID = default(int);
					}
					this.SendPropertyChanged("PartImageSize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartImageSizes")]
	public partial class PartImageSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sizeID;
		
		private string _size;
		
		private string _dimensions;
		
		private EntitySet<PartImage> _PartImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsizeIDChanging(int value);
    partial void OnsizeIDChanged();
    partial void OnsizeChanging(string value);
    partial void OnsizeChanged();
    partial void OndimensionsChanging(string value);
    partial void OndimensionsChanged();
    #endregion
		
		public PartImageSize()
		{
			this._PartImages = new EntitySet<PartImage>(new Action<PartImage>(this.attach_PartImages), new Action<PartImage>(this.detach_PartImages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sizeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sizeID
		{
			get
			{
				return this._sizeID;
			}
			set
			{
				if ((this._sizeID != value))
				{
					this.OnsizeIDChanging(value);
					this.SendPropertyChanging();
					this._sizeID = value;
					this.SendPropertyChanged("sizeID");
					this.OnsizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="VarChar(25)")]
		public string size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimensions", DbType="VarChar(20)")]
		public string dimensions
		{
			get
			{
				return this._dimensions;
			}
			set
			{
				if ((this._dimensions != value))
				{
					this.OndimensionsChanging(value);
					this.SendPropertyChanging();
					this._dimensions = value;
					this.SendPropertyChanged("dimensions");
					this.OndimensionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartImageSize_PartImage", Storage="_PartImages", ThisKey="sizeID", OtherKey="sizeID")]
		public EntitySet<PartImage> PartImages
		{
			get
			{
				return this._PartImages;
			}
			set
			{
				this._PartImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.PartImageSize = this;
		}
		
		private void detach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.PartImageSize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartAttribute")]
	public partial class PartAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pAttrID;
		
		private int _partID;
		
		private string _value;
		
		private string _field;
		
		private int _sort;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpAttrIDChanging(int value);
    partial void OnpAttrIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnfieldChanging(string value);
    partial void OnfieldChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public PartAttribute()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pAttrID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pAttrID
		{
			get
			{
				return this._pAttrID;
			}
			set
			{
				if ((this._pAttrID != value))
				{
					this.OnpAttrIDChanging(value);
					this.SendPropertyChanging();
					this._pAttrID = value;
					this.SendPropertyChanged("pAttrID");
					this.OnpAttrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(255)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_field", DbType="VarChar(255)")]
		public string field
		{
			get
			{
				return this._field;
			}
			set
			{
				if ((this._field != value))
				{
					this.OnfieldChanging(value);
					this.SendPropertyChanging();
					this._field = value;
					this.SendPropertyChanged("field");
					this.OnfieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartAttribute", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartAttributes.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartAttributes.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _countryID;
		
		private string _name;
		
		private string _abbr;
		
		private EntitySet<State> _States;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryIDChanging(int value);
    partial void OncountryIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnabbrChanging(string value);
    partial void OnabbrChanged();
    #endregion
		
		public Country()
		{
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int countryID
		{
			get
			{
				return this._countryID;
			}
			set
			{
				if ((this._countryID != value))
				{
					this.OncountryIDChanging(value);
					this.SendPropertyChanging();
					this._countryID = value;
					this.SendPropertyChanged("countryID");
					this.OncountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbr", DbType="VarChar(10)")]
		public string abbr
		{
			get
			{
				return this._abbr;
			}
			set
			{
				if ((this._abbr != value))
				{
					this.OnabbrChanging(value);
					this.SendPropertyChanging();
					this._abbr = value;
					this.SendPropertyChanged("abbr");
					this.OnabbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_State", Storage="_States", ThisKey="countryID", OtherKey="countryID")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stateID;
		
		private string _state1;
		
		private string _abbr;
		
		private int _countryID;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void Onstate1Changing(string value);
    partial void Onstate1Changed();
    partial void OnabbrChanging(string value);
    partial void OnabbrChanged();
    partial void OncountryIDChanging(int value);
    partial void OncountryIDChanged();
    #endregion
		
		public State()
		{
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="state", Storage="_state1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string state1
		{
			get
			{
				return this._state1;
			}
			set
			{
				if ((this._state1 != value))
				{
					this.Onstate1Changing(value);
					this.SendPropertyChanging();
					this._state1 = value;
					this.SendPropertyChanged("state1");
					this.Onstate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbr", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string abbr
		{
			get
			{
				return this._abbr;
			}
			set
			{
				if ((this._abbr != value))
				{
					this.OnabbrChanging(value);
					this.SendPropertyChanging();
					this._abbr = value;
					this.SendPropertyChanged("abbr");
					this.OnabbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryID", DbType="Int NOT NULL")]
		public int countryID
		{
			get
			{
				return this._countryID;
			}
			set
			{
				if ((this._countryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountryIDChanging(value);
					this.SendPropertyChanging();
					this._countryID = value;
					this.SendPropertyChanged("countryID");
					this.OncountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_State", Storage="_Country", ThisKey="countryID", OtherKey="countryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._countryID = value.countryID;
					}
					else
					{
						this._countryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Make")]
	public partial class vcdb_Make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIAMakeID;
		
		private string _MakeName;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIAMakeIDChanging(System.Nullable<int> value);
    partial void OnAAIAMakeIDChanged();
    partial void OnMakeNameChanging(string value);
    partial void OnMakeNameChanged();
    #endregion
		
		public vcdb_Make()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIAMakeID", DbType="Int")]
		public System.Nullable<int> AAIAMakeID
		{
			get
			{
				return this._AAIAMakeID;
			}
			set
			{
				if ((this._AAIAMakeID != value))
				{
					this.OnAAIAMakeIDChanging(value);
					this.SendPropertyChanging();
					this._AAIAMakeID = value;
					this.SendPropertyChanged("AAIAMakeID");
					this.OnAAIAMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MakeName
		{
			get
			{
				return this._MakeName;
			}
			set
			{
				if ((this._MakeName != value))
				{
					this.OnMakeNameChanging(value);
					this.SendPropertyChanging();
					this._MakeName = value;
					this.SendPropertyChanged("MakeName");
					this.OnMakeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Make_BaseVehicle", Storage="_BaseVehicles", ThisKey="ID", OtherKey="MakeID")]
		public EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Make = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Model")]
	public partial class vcdb_Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIAModelID;
		
		private string _ModelName;
		
		private int _VehicleTypeID;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIAModelIDChanging(System.Nullable<int> value);
    partial void OnAAIAModelIDChanged();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    partial void OnVehicleTypeIDChanging(int value);
    partial void OnVehicleTypeIDChanged();
    #endregion
		
		public vcdb_Model()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIAModelID", DbType="Int")]
		public System.Nullable<int> AAIAModelID
		{
			get
			{
				return this._AAIAModelID;
			}
			set
			{
				if ((this._AAIAModelID != value))
				{
					this.OnAAIAModelIDChanging(value);
					this.SendPropertyChanging();
					this._AAIAModelID = value;
					this.SendPropertyChanged("AAIAModelID");
					this.OnAAIAModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelName", DbType="VarChar(100)")]
		public string ModelName
		{
			get
			{
				return this._ModelName;
			}
			set
			{
				if ((this._ModelName != value))
				{
					this.OnModelNameChanging(value);
					this.SendPropertyChanging();
					this._ModelName = value;
					this.SendPropertyChanged("ModelName");
					this.OnModelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", DbType="Int NOT NULL")]
		public int VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Model_BaseVehicle", Storage="_BaseVehicles", ThisKey="ID", OtherKey="ModelID")]
		public EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Model = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Vehicle")]
	public partial class vcdb_Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BaseVehicleID;
		
		private System.Nullable<int> _SubModelID;
		
		private System.Nullable<int> _ConfigID;
		
		private System.Nullable<int> _AppID;
		
		private EntitySet<vcdb_VehiclePart> _vcdb_VehicleParts;
		
		private EntityRef<VehicleConfig> _VehicleConfig;
		
		private EntityRef<Submodel> _Submodel;
		
		private EntityRef<BaseVehicle> _BaseVehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBaseVehicleIDChanging(int value);
    partial void OnBaseVehicleIDChanged();
    partial void OnSubModelIDChanging(System.Nullable<int> value);
    partial void OnSubModelIDChanged();
    partial void OnConfigIDChanging(System.Nullable<int> value);
    partial void OnConfigIDChanged();
    partial void OnAppIDChanging(System.Nullable<int> value);
    partial void OnAppIDChanged();
    #endregion
		
		public vcdb_Vehicle()
		{
			this._vcdb_VehicleParts = new EntitySet<vcdb_VehiclePart>(new Action<vcdb_VehiclePart>(this.attach_vcdb_VehicleParts), new Action<vcdb_VehiclePart>(this.detach_vcdb_VehicleParts));
			this._VehicleConfig = default(EntityRef<VehicleConfig>);
			this._Submodel = default(EntityRef<Submodel>);
			this._BaseVehicle = default(EntityRef<BaseVehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseVehicleID", DbType="Int NOT NULL")]
		public int BaseVehicleID
		{
			get
			{
				return this._BaseVehicleID;
			}
			set
			{
				if ((this._BaseVehicleID != value))
				{
					if (this._BaseVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._BaseVehicleID = value;
					this.SendPropertyChanged("BaseVehicleID");
					this.OnBaseVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubModelID", DbType="Int")]
		public System.Nullable<int> SubModelID
		{
			get
			{
				return this._SubModelID;
			}
			set
			{
				if ((this._SubModelID != value))
				{
					if (this._Submodel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubModelIDChanging(value);
					this.SendPropertyChanging();
					this._SubModelID = value;
					this.SendPropertyChanged("SubModelID");
					this.OnSubModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigID", DbType="Int")]
		public System.Nullable<int> ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					if (this._VehicleConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int")]
		public System.Nullable<int> AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Vehicle_vcdb_VehiclePart", Storage="_vcdb_VehicleParts", ThisKey="ID", OtherKey="VehicleID")]
		public EntitySet<vcdb_VehiclePart> vcdb_VehicleParts
		{
			get
			{
				return this._vcdb_VehicleParts;
			}
			set
			{
				this._vcdb_VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_vcdb_Vehicle", Storage="_VehicleConfig", ThisKey="ConfigID", OtherKey="ID", IsForeignKey=true)]
		public VehicleConfig VehicleConfig
		{
			get
			{
				return this._VehicleConfig.Entity;
			}
			set
			{
				VehicleConfig previousValue = this._VehicleConfig.Entity;
				if (((previousValue != value) 
							|| (this._VehicleConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleConfig.Entity = null;
						previousValue.vcdb_Vehicles.Remove(this);
					}
					this._VehicleConfig.Entity = value;
					if ((value != null))
					{
						value.vcdb_Vehicles.Add(this);
						this._ConfigID = value.ID;
					}
					else
					{
						this._ConfigID = default(Nullable<int>);
					}
					this.SendPropertyChanged("VehicleConfig");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submodel_vcdb_Vehicle", Storage="_Submodel", ThisKey="SubModelID", OtherKey="ID", IsForeignKey=true)]
		public Submodel Submodel
		{
			get
			{
				return this._Submodel.Entity;
			}
			set
			{
				Submodel previousValue = this._Submodel.Entity;
				if (((previousValue != value) 
							|| (this._Submodel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submodel.Entity = null;
						previousValue.vcdb_Vehicles.Remove(this);
					}
					this._Submodel.Entity = value;
					if ((value != null))
					{
						value.vcdb_Vehicles.Add(this);
						this._SubModelID = value.ID;
					}
					else
					{
						this._SubModelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Submodel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVehicle_vcdb_Vehicle", Storage="_BaseVehicle", ThisKey="BaseVehicleID", OtherKey="ID", IsForeignKey=true)]
		public BaseVehicle BaseVehicle
		{
			get
			{
				return this._BaseVehicle.Entity;
			}
			set
			{
				BaseVehicle previousValue = this._BaseVehicle.Entity;
				if (((previousValue != value) 
							|| (this._BaseVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseVehicle.Entity = null;
						previousValue.vcdb_Vehicles.Remove(this);
					}
					this._BaseVehicle.Entity = value;
					if ((value != null))
					{
						value.vcdb_Vehicles.Add(this);
						this._BaseVehicleID = value.ID;
					}
					else
					{
						this._BaseVehicleID = default(int);
					}
					this.SendPropertyChanged("BaseVehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Vehicle = this;
		}
		
		private void detach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Vehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_VehiclePart")]
	public partial class vcdb_VehiclePart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VehicleID;
		
		private int _PartNumber;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<vcdb_Vehicle> _vcdb_Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnPartNumberChanging(int value);
    partial void OnPartNumberChanged();
    #endregion
		
		public vcdb_VehiclePart()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._Part = default(EntityRef<Part>);
			this._vcdb_Vehicle = default(EntityRef<vcdb_Vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					if (this._vcdb_Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="Int NOT NULL")]
		public int PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_VehiclePart_Note", Storage="_Notes", ThisKey="ID", OtherKey="vehiclePartID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_vcdb_VehiclePart", Storage="_Part", ThisKey="PartNumber", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.vcdb_VehicleParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.vcdb_VehicleParts.Add(this);
						this._PartNumber = value.partID;
					}
					else
					{
						this._PartNumber = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Vehicle_vcdb_VehiclePart", Storage="_vcdb_Vehicle", ThisKey="VehicleID", OtherKey="ID", IsForeignKey=true)]
		public vcdb_Vehicle vcdb_Vehicle
		{
			get
			{
				return this._vcdb_Vehicle.Entity;
			}
			set
			{
				vcdb_Vehicle previousValue = this._vcdb_Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Vehicle.Entity = null;
						previousValue.vcdb_VehicleParts.Remove(this);
					}
					this._vcdb_Vehicle.Entity = value;
					if ((value != null))
					{
						value.vcdb_VehicleParts.Add(this);
						this._VehicleID = value.ID;
					}
					else
					{
						this._VehicleID = default(int);
					}
					this.SendPropertyChanged("vcdb_Vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_VehiclePart = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_VehiclePart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Year")]
	public partial class vcdb_Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearID;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public vcdb_Year()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Year_BaseVehicle", Storage="_BaseVehicles", ThisKey="YearID", OtherKey="YearID")]
		public EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Year = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleConfig")]
	public partial class VehicleConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIAVehicleConfigID;
		
		private EntitySet<vcdb_Vehicle> _vcdb_Vehicles;
		
		private EntitySet<VehicleConfigAttribute> _VehicleConfigAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIAVehicleConfigIDChanging(System.Nullable<int> value);
    partial void OnAAIAVehicleConfigIDChanged();
    #endregion
		
		public VehicleConfig()
		{
			this._vcdb_Vehicles = new EntitySet<vcdb_Vehicle>(new Action<vcdb_Vehicle>(this.attach_vcdb_Vehicles), new Action<vcdb_Vehicle>(this.detach_vcdb_Vehicles));
			this._VehicleConfigAttributes = new EntitySet<VehicleConfigAttribute>(new Action<VehicleConfigAttribute>(this.attach_VehicleConfigAttributes), new Action<VehicleConfigAttribute>(this.detach_VehicleConfigAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIAVehicleConfigID", DbType="Int")]
		public System.Nullable<int> AAIAVehicleConfigID
		{
			get
			{
				return this._AAIAVehicleConfigID;
			}
			set
			{
				if ((this._AAIAVehicleConfigID != value))
				{
					this.OnAAIAVehicleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._AAIAVehicleConfigID = value;
					this.SendPropertyChanged("AAIAVehicleConfigID");
					this.OnAAIAVehicleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_vcdb_Vehicle", Storage="_vcdb_Vehicles", ThisKey="ID", OtherKey="ConfigID")]
		public EntitySet<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this._vcdb_Vehicles;
			}
			set
			{
				this._vcdb_Vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_VehicleConfigAttribute", Storage="_VehicleConfigAttributes", ThisKey="ID", OtherKey="VehicleConfigID")]
		public EntitySet<VehicleConfigAttribute> VehicleConfigAttributes
		{
			get
			{
				return this._VehicleConfigAttributes;
			}
			set
			{
				this._VehicleConfigAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = this;
		}
		
		private void detach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = null;
		}
		
		private void attach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = this;
		}
		
		private void detach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleConfigAttribute")]
	public partial class VehicleConfigAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AttributeID;
		
		private int _VehicleConfigID;
		
		private EntityRef<VehicleConfig> _VehicleConfig;
		
		private EntityRef<ConfigAttribute> _ConfigAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttributeIDChanging(int value);
    partial void OnAttributeIDChanged();
    partial void OnVehicleConfigIDChanging(int value);
    partial void OnVehicleConfigIDChanged();
    #endregion
		
		public VehicleConfigAttribute()
		{
			this._VehicleConfig = default(EntityRef<VehicleConfig>);
			this._ConfigAttribute = default(EntityRef<ConfigAttribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._ConfigAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleConfigID", DbType="Int NOT NULL")]
		public int VehicleConfigID
		{
			get
			{
				return this._VehicleConfigID;
			}
			set
			{
				if ((this._VehicleConfigID != value))
				{
					if (this._VehicleConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleConfigID = value;
					this.SendPropertyChanged("VehicleConfigID");
					this.OnVehicleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_VehicleConfigAttribute", Storage="_VehicleConfig", ThisKey="VehicleConfigID", OtherKey="ID", IsForeignKey=true)]
		public VehicleConfig VehicleConfig
		{
			get
			{
				return this._VehicleConfig.Entity;
			}
			set
			{
				VehicleConfig previousValue = this._VehicleConfig.Entity;
				if (((previousValue != value) 
							|| (this._VehicleConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleConfig.Entity = null;
						previousValue.VehicleConfigAttributes.Remove(this);
					}
					this._VehicleConfig.Entity = value;
					if ((value != null))
					{
						value.VehicleConfigAttributes.Add(this);
						this._VehicleConfigID = value.ID;
					}
					else
					{
						this._VehicleConfigID = default(int);
					}
					this.SendPropertyChanged("VehicleConfig");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttribute_VehicleConfigAttribute", Storage="_ConfigAttribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true)]
		public ConfigAttribute ConfigAttribute
		{
			get
			{
				return this._ConfigAttribute.Entity;
			}
			set
			{
				ConfigAttribute previousValue = this._ConfigAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ConfigAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigAttribute.Entity = null;
						previousValue.VehicleConfigAttributes.Remove(this);
					}
					this._ConfigAttribute.Entity = value;
					if ((value != null))
					{
						value.VehicleConfigAttributes.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(int);
					}
					this.SendPropertyChanged("ConfigAttribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submodel")]
	public partial class Submodel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIASubmodelID;
		
		private string _SubmodelName;
		
		private EntitySet<vcdb_Vehicle> _vcdb_Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIASubmodelIDChanging(System.Nullable<int> value);
    partial void OnAAIASubmodelIDChanged();
    partial void OnSubmodelNameChanging(string value);
    partial void OnSubmodelNameChanged();
    #endregion
		
		public Submodel()
		{
			this._vcdb_Vehicles = new EntitySet<vcdb_Vehicle>(new Action<vcdb_Vehicle>(this.attach_vcdb_Vehicles), new Action<vcdb_Vehicle>(this.detach_vcdb_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIASubmodelID", DbType="Int")]
		public System.Nullable<int> AAIASubmodelID
		{
			get
			{
				return this._AAIASubmodelID;
			}
			set
			{
				if ((this._AAIASubmodelID != value))
				{
					this.OnAAIASubmodelIDChanging(value);
					this.SendPropertyChanging();
					this._AAIASubmodelID = value;
					this.SendPropertyChanged("AAIASubmodelID");
					this.OnAAIASubmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmodelName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubmodelName
		{
			get
			{
				return this._SubmodelName;
			}
			set
			{
				if ((this._SubmodelName != value))
				{
					this.OnSubmodelNameChanging(value);
					this.SendPropertyChanging();
					this._SubmodelName = value;
					this.SendPropertyChanged("SubmodelName");
					this.OnSubmodelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submodel_vcdb_Vehicle", Storage="_vcdb_Vehicles", ThisKey="ID", OtherKey="SubModelID")]
		public EntitySet<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this._vcdb_Vehicles;
			}
			set
			{
				this._vcdb_Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Submodel = this;
		}
		
		private void detach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Submodel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Note")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _vehiclePartID;
		
		private string _note1;
		
		private EntityRef<vcdb_VehiclePart> _vcdb_VehiclePart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnvehiclePartIDChanging(int value);
    partial void OnvehiclePartIDChanged();
    partial void Onnote1Changing(string value);
    partial void Onnote1Changed();
    #endregion
		
		public Note()
		{
			this._vcdb_VehiclePart = default(EntityRef<vcdb_VehiclePart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehiclePartID", DbType="Int NOT NULL")]
		public int vehiclePartID
		{
			get
			{
				return this._vehiclePartID;
			}
			set
			{
				if ((this._vehiclePartID != value))
				{
					if (this._vcdb_VehiclePart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehiclePartIDChanging(value);
					this.SendPropertyChanging();
					this._vehiclePartID = value;
					this.SendPropertyChanged("vehiclePartID");
					this.OnvehiclePartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="note", Storage="_note1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string note1
		{
			get
			{
				return this._note1;
			}
			set
			{
				if ((this._note1 != value))
				{
					this.Onnote1Changing(value);
					this.SendPropertyChanging();
					this._note1 = value;
					this.SendPropertyChanged("note1");
					this.Onnote1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_VehiclePart_Note", Storage="_vcdb_VehiclePart", ThisKey="vehiclePartID", OtherKey="ID", IsForeignKey=true)]
		public vcdb_VehiclePart vcdb_VehiclePart
		{
			get
			{
				return this._vcdb_VehiclePart.Entity;
			}
			set
			{
				vcdb_VehiclePart previousValue = this._vcdb_VehiclePart.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_VehiclePart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_VehiclePart.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._vcdb_VehiclePart.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._vehiclePartID = value.ID;
					}
					else
					{
						this._vehiclePartID = default(int);
					}
					this.SendPropertyChanged("vcdb_VehiclePart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigAttribute")]
	public partial class ConfigAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ConfigAttributeTypeID;
		
		private int _parentID;
		
		private System.Nullable<int> _vcdbID;
		
		private string _value;
		
		private EntitySet<VehicleConfigAttribute> _VehicleConfigAttributes;
		
		private EntityRef<ConfigAttributeType> _ConfigAttributeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConfigAttributeTypeIDChanging(int value);
    partial void OnConfigAttributeTypeIDChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OnvcdbIDChanging(System.Nullable<int> value);
    partial void OnvcdbIDChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public ConfigAttribute()
		{
			this._VehicleConfigAttributes = new EntitySet<VehicleConfigAttribute>(new Action<VehicleConfigAttribute>(this.attach_VehicleConfigAttributes), new Action<VehicleConfigAttribute>(this.detach_VehicleConfigAttributes));
			this._ConfigAttributeType = default(EntityRef<ConfigAttributeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigAttributeTypeID", DbType="Int NOT NULL")]
		public int ConfigAttributeTypeID
		{
			get
			{
				return this._ConfigAttributeTypeID;
			}
			set
			{
				if ((this._ConfigAttributeTypeID != value))
				{
					if (this._ConfigAttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigAttributeTypeID = value;
					this.SendPropertyChanged("ConfigAttributeTypeID");
					this.OnConfigAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcdbID", DbType="Int")]
		public System.Nullable<int> vcdbID
		{
			get
			{
				return this._vcdbID;
			}
			set
			{
				if ((this._vcdbID != value))
				{
					this.OnvcdbIDChanging(value);
					this.SendPropertyChanging();
					this._vcdbID = value;
					this.SendPropertyChanged("vcdbID");
					this.OnvcdbIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttribute_VehicleConfigAttribute", Storage="_VehicleConfigAttributes", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<VehicleConfigAttribute> VehicleConfigAttributes
		{
			get
			{
				return this._VehicleConfigAttributes;
			}
			set
			{
				this._VehicleConfigAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttributeType_ConfigAttribute", Storage="_ConfigAttributeType", ThisKey="ConfigAttributeTypeID", OtherKey="ID", IsForeignKey=true)]
		public ConfigAttributeType ConfigAttributeType
		{
			get
			{
				return this._ConfigAttributeType.Entity;
			}
			set
			{
				ConfigAttributeType previousValue = this._ConfigAttributeType.Entity;
				if (((previousValue != value) 
							|| (this._ConfigAttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigAttributeType.Entity = null;
						previousValue.ConfigAttributes.Remove(this);
					}
					this._ConfigAttributeType.Entity = value;
					if ((value != null))
					{
						value.ConfigAttributes.Add(this);
						this._ConfigAttributeTypeID = value.ID;
					}
					else
					{
						this._ConfigAttributeTypeID = default(int);
					}
					this.SendPropertyChanged("ConfigAttributeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttribute = this;
		}
		
		private void detach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigAttributeType")]
	public partial class ConfigAttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private System.Nullable<int> _AcesTypeID;
		
		private int _sort;
		
		private EntitySet<ConfigAttribute> _ConfigAttributes;
		
		private EntityRef<AcesType> _AcesType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnAcesTypeIDChanging(System.Nullable<int> value);
    partial void OnAcesTypeIDChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public ConfigAttributeType()
		{
			this._ConfigAttributes = new EntitySet<ConfigAttribute>(new Action<ConfigAttribute>(this.attach_ConfigAttributes), new Action<ConfigAttribute>(this.detach_ConfigAttributes));
			this._AcesType = default(EntityRef<AcesType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcesTypeID", DbType="Int")]
		public System.Nullable<int> AcesTypeID
		{
			get
			{
				return this._AcesTypeID;
			}
			set
			{
				if ((this._AcesTypeID != value))
				{
					if (this._AcesType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcesTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AcesTypeID = value;
					this.SendPropertyChanged("AcesTypeID");
					this.OnAcesTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttributeType_ConfigAttribute", Storage="_ConfigAttributes", ThisKey="ID", OtherKey="ConfigAttributeTypeID")]
		public EntitySet<ConfigAttribute> ConfigAttributes
		{
			get
			{
				return this._ConfigAttributes;
			}
			set
			{
				this._ConfigAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcesType_ConfigAttributeType", Storage="_AcesType", ThisKey="AcesTypeID", OtherKey="ID", IsForeignKey=true)]
		public AcesType AcesType
		{
			get
			{
				return this._AcesType.Entity;
			}
			set
			{
				AcesType previousValue = this._AcesType.Entity;
				if (((previousValue != value) 
							|| (this._AcesType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcesType.Entity = null;
						previousValue.ConfigAttributeTypes.Remove(this);
					}
					this._AcesType.Entity = value;
					if ((value != null))
					{
						value.ConfigAttributeTypes.Add(this);
						this._AcesTypeID = value.ID;
					}
					else
					{
						this._AcesTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AcesType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfigAttributes(ConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttributeType = this;
		}
		
		private void detach_ConfigAttributes(ConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttributeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcesType")]
	public partial class AcesType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private EntitySet<ConfigAttributeType> _ConfigAttributeTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public AcesType()
		{
			this._ConfigAttributeTypes = new EntitySet<ConfigAttributeType>(new Action<ConfigAttributeType>(this.attach_ConfigAttributeTypes), new Action<ConfigAttributeType>(this.detach_ConfigAttributeTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcesType_ConfigAttributeType", Storage="_ConfigAttributeTypes", ThisKey="ID", OtherKey="AcesTypeID")]
		public EntitySet<ConfigAttributeType> ConfigAttributeTypes
		{
			get
			{
				return this._ConfigAttributeTypes;
			}
			set
			{
				this._ConfigAttributeTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfigAttributeTypes(ConfigAttributeType entity)
		{
			this.SendPropertyChanging();
			entity.AcesType = this;
		}
		
		private void detach_ConfigAttributeTypes(ConfigAttributeType entity)
		{
			this.SendPropertyChanging();
			entity.AcesType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BaseVehicle")]
	public partial class BaseVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIABaseVehicleID;
		
		private int _YearID;
		
		private int _MakeID;
		
		private int _ModelID;
		
		private EntitySet<vcdb_Vehicle> _vcdb_Vehicles;
		
		private EntityRef<vcdb_Make> _vcdb_Make;
		
		private EntityRef<vcdb_Model> _vcdb_Model;
		
		private EntityRef<vcdb_Year> _vcdb_Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIABaseVehicleIDChanging(System.Nullable<int> value);
    partial void OnAAIABaseVehicleIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnMakeIDChanging(int value);
    partial void OnMakeIDChanged();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    #endregion
		
		public BaseVehicle()
		{
			this._vcdb_Vehicles = new EntitySet<vcdb_Vehicle>(new Action<vcdb_Vehicle>(this.attach_vcdb_Vehicles), new Action<vcdb_Vehicle>(this.detach_vcdb_Vehicles));
			this._vcdb_Make = default(EntityRef<vcdb_Make>);
			this._vcdb_Model = default(EntityRef<vcdb_Model>);
			this._vcdb_Year = default(EntityRef<vcdb_Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIABaseVehicleID", DbType="Int")]
		public System.Nullable<int> AAIABaseVehicleID
		{
			get
			{
				return this._AAIABaseVehicleID;
			}
			set
			{
				if ((this._AAIABaseVehicleID != value))
				{
					this.OnAAIABaseVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._AAIABaseVehicleID = value;
					this.SendPropertyChanged("AAIABaseVehicleID");
					this.OnAAIABaseVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._vcdb_Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeID", DbType="Int NOT NULL")]
		public int MakeID
		{
			get
			{
				return this._MakeID;
			}
			set
			{
				if ((this._MakeID != value))
				{
					if (this._vcdb_Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMakeIDChanging(value);
					this.SendPropertyChanging();
					this._MakeID = value;
					this.SendPropertyChanged("MakeID");
					this.OnMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int NOT NULL")]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					if (this._vcdb_Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVehicle_vcdb_Vehicle", Storage="_vcdb_Vehicles", ThisKey="ID", OtherKey="BaseVehicleID")]
		public EntitySet<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this._vcdb_Vehicles;
			}
			set
			{
				this._vcdb_Vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Make_BaseVehicle", Storage="_vcdb_Make", ThisKey="MakeID", OtherKey="ID", IsForeignKey=true)]
		public vcdb_Make vcdb_Make
		{
			get
			{
				return this._vcdb_Make.Entity;
			}
			set
			{
				vcdb_Make previousValue = this._vcdb_Make.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Make.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._vcdb_Make.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._MakeID = value.ID;
					}
					else
					{
						this._MakeID = default(int);
					}
					this.SendPropertyChanged("vcdb_Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Model_BaseVehicle", Storage="_vcdb_Model", ThisKey="ModelID", OtherKey="ID", IsForeignKey=true)]
		public vcdb_Model vcdb_Model
		{
			get
			{
				return this._vcdb_Model.Entity;
			}
			set
			{
				vcdb_Model previousValue = this._vcdb_Model.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Model.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._vcdb_Model.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._ModelID = value.ID;
					}
					else
					{
						this._ModelID = default(int);
					}
					this.SendPropertyChanged("vcdb_Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Year_BaseVehicle", Storage="_vcdb_Year", ThisKey="YearID", OtherKey="YearID", IsForeignKey=true)]
		public vcdb_Year vcdb_Year
		{
			get
			{
				return this._vcdb_Year.Entity;
			}
			set
			{
				vcdb_Year previousValue = this._vcdb_Year.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Year.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._vcdb_Year.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._YearID = value.YearID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("vcdb_Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.BaseVehicle = this;
		}
		
		private void detach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.BaseVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartPackage")]
	public partial class PartPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _partID;
		
		private System.Nullable<double> _height;
		
		private System.Nullable<double> _width;
		
		private System.Nullable<double> _length;
		
		private System.Nullable<double> _weight;
		
		private int _dimensionUOM;
		
		private int _weightUOM;
		
		private int _packageUOM;
		
		private int _quantity;
		
		private EntityRef<UnitOfMeasure> _DimensionUnits;
		
		private EntityRef<UnitOfMeasure> _weightUnits;
		
		private EntityRef<UnitOfMeasure> _PackageUnits;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnheightChanging(System.Nullable<double> value);
    partial void OnheightChanged();
    partial void OnwidthChanging(System.Nullable<double> value);
    partial void OnwidthChanged();
    partial void OnlengthChanging(System.Nullable<double> value);
    partial void OnlengthChanged();
    partial void OnweightChanging(System.Nullable<double> value);
    partial void OnweightChanged();
    partial void OndimensionUOMChanging(int value);
    partial void OndimensionUOMChanged();
    partial void OnweightUOMChanging(int value);
    partial void OnweightUOMChanged();
    partial void OnpackageUOMChanging(int value);
    partial void OnpackageUOMChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public PartPackage()
		{
			this._DimensionUnits = default(EntityRef<UnitOfMeasure>);
			this._weightUnits = default(EntityRef<UnitOfMeasure>);
			this._PackageUnits = default(EntityRef<UnitOfMeasure>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Float")]
		public System.Nullable<double> height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Float")]
		public System.Nullable<double> width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_length", DbType="Float")]
		public System.Nullable<double> length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float")]
		public System.Nullable<double> weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimensionUOM", DbType="Int NOT NULL")]
		public int dimensionUOM
		{
			get
			{
				return this._dimensionUOM;
			}
			set
			{
				if ((this._dimensionUOM != value))
				{
					this.OndimensionUOMChanging(value);
					this.SendPropertyChanging();
					this._dimensionUOM = value;
					this.SendPropertyChanged("dimensionUOM");
					this.OndimensionUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weightUOM", DbType="Int NOT NULL")]
		public int weightUOM
		{
			get
			{
				return this._weightUOM;
			}
			set
			{
				if ((this._weightUOM != value))
				{
					this.OnweightUOMChanging(value);
					this.SendPropertyChanging();
					this._weightUOM = value;
					this.SendPropertyChanged("weightUOM");
					this.OnweightUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_packageUOM", DbType="Int NOT NULL")]
		public int packageUOM
		{
			get
			{
				return this._packageUOM;
			}
			set
			{
				if ((this._packageUOM != value))
				{
					this.OnpackageUOMChanging(value);
					this.SendPropertyChanging();
					this._packageUOM = value;
					this.SendPropertyChanged("packageUOM");
					this.OnpackageUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure", Storage="_DimensionUnits", ThisKey="dimensionUOM", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public UnitOfMeasure DimensionUnits
		{
			get
			{
				return this._DimensionUnits.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._DimensionUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimensionUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimensionUnits.Entity = null;
						previousValue.PartPackage = null;
					}
					this._DimensionUnits.Entity = value;
					if ((value != null))
					{
						value.PartPackage = this;
					}
					this.SendPropertyChanged("DimensionUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure1", Storage="_weightUnits", ThisKey="weightUOM", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public UnitOfMeasure weightUnits
		{
			get
			{
				return this._weightUnits.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._weightUnits.Entity;
				if (((previousValue != value) 
							|| (this._weightUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weightUnits.Entity = null;
						previousValue.PartPackage1 = null;
					}
					this._weightUnits.Entity = value;
					if ((value != null))
					{
						value.PartPackage1 = this;
					}
					this.SendPropertyChanged("weightUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure2", Storage="_PackageUnits", ThisKey="packageUOM", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public UnitOfMeasure PackageUnits
		{
			get
			{
				return this._PackageUnits.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._PackageUnits.Entity;
				if (((previousValue != value) 
							|| (this._PackageUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageUnits.Entity = null;
						previousValue.PartPackage2 = null;
					}
					this._PackageUnits.Entity = value;
					if ((value != null))
					{
						value.PartPackage2 = this;
					}
					this.SendPropertyChanged("PackageUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartPackage", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartPackages.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartPackages.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _priceID;
		
		private int _partID;
		
		private string _priceType;
		
		private decimal _price1;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpriceIDChanging(int value);
    partial void OnpriceIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnpriceTypeChanging(string value);
    partial void OnpriceTypeChanged();
    partial void Onprice1Changing(decimal value);
    partial void Onprice1Changed();
    #endregion
		
		public Price()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int priceID
		{
			get
			{
				return this._priceID;
			}
			set
			{
				if ((this._priceID != value))
				{
					this.OnpriceIDChanging(value);
					this.SendPropertyChanging();
					this._priceID = value;
					this.SendPropertyChanged("priceID");
					this.OnpriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceType", DbType="VarChar(255)")]
		public string priceType
		{
			get
			{
				return this._priceType;
			}
			set
			{
				if ((this._priceType != value))
				{
					this.OnpriceTypeChanging(value);
					this.SendPropertyChanging();
					this._priceType = value;
					this.SendPropertyChanged("priceType");
					this.OnpriceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="price", Storage="_price1", DbType="Money NOT NULL")]
		public decimal price1
		{
			get
			{
				return this._price1;
			}
			set
			{
				if ((this._price1 != value))
				{
					this.Onprice1Changing(value);
					this.SendPropertyChanging();
					this._price1 = value;
					this.SendPropertyChanged("price1");
					this.Onprice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Price", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private string _code;
		
		private EntityRef<PartPackage> _PartPackage;
		
		private EntityRef<PartPackage> _PartPackage1;
		
		private EntityRef<PartPackage> _PartPackage2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public UnitOfMeasure()
		{
			this._PartPackage = default(EntityRef<PartPackage>);
			this._PartPackage1 = default(EntityRef<PartPackage>);
			this._PartPackage2 = default(EntityRef<PartPackage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (((this._PartPackage.HasLoadedOrAssignedValue || this._PartPackage1.HasLoadedOrAssignedValue) 
								|| this._PartPackage2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure", Storage="_PartPackage", ThisKey="ID", OtherKey="dimensionUOM", IsForeignKey=true)]
		public PartPackage PartPackage
		{
			get
			{
				return this._PartPackage.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage.Entity = null;
						previousValue.DimensionUnits = null;
					}
					this._PartPackage.Entity = value;
					if ((value != null))
					{
						value.DimensionUnits = this;
						this._ID = value.dimensionUOM;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure1", Storage="_PartPackage1", ThisKey="ID", OtherKey="weightUOM", IsForeignKey=true)]
		public PartPackage PartPackage1
		{
			get
			{
				return this._PartPackage1.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage1.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage1.Entity = null;
						previousValue.weightUnits = null;
					}
					this._PartPackage1.Entity = value;
					if ((value != null))
					{
						value.weightUnits = this;
						this._ID = value.weightUOM;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure2", Storage="_PartPackage2", ThisKey="ID", OtherKey="packageUOM", IsForeignKey=true)]
		public PartPackage PartPackage2
		{
			get
			{
				return this._PartPackage2.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage2.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage2.Entity = null;
						previousValue.PackageUnits = null;
					}
					this._PartPackage2.Entity = value;
					if ((value != null))
					{
						value.PackageUnits = this;
						this._ID = value.packageUOM;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartVideo")]
	public partial class PartVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pVideoID;
		
		private int _partID;
		
		private string _video;
		
		private int _vTypeID;
		
		private bool _isPrimary;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpVideoIDChanging(int value);
    partial void OnpVideoIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnvideoChanging(string value);
    partial void OnvideoChanged();
    partial void OnvTypeIDChanging(int value);
    partial void OnvTypeIDChanged();
    partial void OnisPrimaryChanging(bool value);
    partial void OnisPrimaryChanged();
    #endregion
		
		public PartVideo()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pVideoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pVideoID
		{
			get
			{
				return this._pVideoID;
			}
			set
			{
				if ((this._pVideoID != value))
				{
					this.OnpVideoIDChanging(value);
					this.SendPropertyChanging();
					this._pVideoID = value;
					this.SendPropertyChanged("pVideoID");
					this.OnpVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_video", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string video
		{
			get
			{
				return this._video;
			}
			set
			{
				if ((this._video != value))
				{
					this.OnvideoChanging(value);
					this.SendPropertyChanging();
					this._video = value;
					this.SendPropertyChanged("video");
					this.OnvideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vTypeID", DbType="Int NOT NULL")]
		public int vTypeID
		{
			get
			{
				return this._vTypeID;
			}
			set
			{
				if ((this._vTypeID != value))
				{
					this.OnvTypeIDChanging(value);
					this.SendPropertyChanging();
					this._vTypeID = value;
					this.SendPropertyChanged("vTypeID");
					this.OnvTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPrimary", DbType="Bit NOT NULL")]
		public bool isPrimary
		{
			get
			{
				return this._isPrimary;
			}
			set
			{
				if ((this._isPrimary != value))
				{
					this.OnisPrimaryChanging(value);
					this.SendPropertyChanging();
					this._isPrimary = value;
					this.SendPropertyChanged("isPrimary");
					this.OnisPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartVideo", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartVideos.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartVideos.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catID;
		
		private System.Nullable<System.DateTime> _dateAdded;
		
		private int _parentID;
		
		private string _catTitle;
		
		private string _shortDesc;
		
		private string _longDesc;
		
		private string _image;
		
		private int _isLifestyle;
		
		private int _codeID;
		
		private int _sort;
		
		private bool _vehicleSpecific;
		
		private EntitySet<ContentBridge> _ContentBridges;
		
		private EntitySet<CatPart> _CatParts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OndateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OndateAddedChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OncatTitleChanging(string value);
    partial void OncatTitleChanged();
    partial void OnshortDescChanging(string value);
    partial void OnshortDescChanged();
    partial void OnlongDescChanging(string value);
    partial void OnlongDescChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnisLifestyleChanging(int value);
    partial void OnisLifestyleChanged();
    partial void OncodeIDChanging(int value);
    partial void OncodeIDChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OnvehicleSpecificChanging(bool value);
    partial void OnvehicleSpecificChanged();
    #endregion
		
		public Category()
		{
			this._ContentBridges = new EntitySet<ContentBridge>(new Action<ContentBridge>(this.attach_ContentBridges), new Action<ContentBridge>(this.detach_ContentBridges));
			this._CatParts = new EntitySet<CatPart>(new Action<CatPart>(this.attach_CatParts), new Action<CatPart>(this.detach_CatParts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catTitle", DbType="VarChar(100)")]
		public string catTitle
		{
			get
			{
				return this._catTitle;
			}
			set
			{
				if ((this._catTitle != value))
				{
					this.OncatTitleChanging(value);
					this.SendPropertyChanging();
					this._catTitle = value;
					this.SendPropertyChanged("catTitle");
					this.OncatTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortDesc", DbType="VarChar(255)")]
		public string shortDesc
		{
			get
			{
				return this._shortDesc;
			}
			set
			{
				if ((this._shortDesc != value))
				{
					this.OnshortDescChanging(value);
					this.SendPropertyChanging();
					this._shortDesc = value;
					this.SendPropertyChanged("shortDesc");
					this.OnshortDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longDesc", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string longDesc
		{
			get
			{
				return this._longDesc;
			}
			set
			{
				if ((this._longDesc != value))
				{
					this.OnlongDescChanging(value);
					this.SendPropertyChanging();
					this._longDesc = value;
					this.SendPropertyChanged("longDesc");
					this.OnlongDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(255)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLifestyle", DbType="Int NOT NULL")]
		public int isLifestyle
		{
			get
			{
				return this._isLifestyle;
			}
			set
			{
				if ((this._isLifestyle != value))
				{
					this.OnisLifestyleChanging(value);
					this.SendPropertyChanging();
					this._isLifestyle = value;
					this.SendPropertyChanged("isLifestyle");
					this.OnisLifestyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codeID", DbType="Int NOT NULL")]
		public int codeID
		{
			get
			{
				return this._codeID;
			}
			set
			{
				if ((this._codeID != value))
				{
					this.OncodeIDChanging(value);
					this.SendPropertyChanging();
					this._codeID = value;
					this.SendPropertyChanged("codeID");
					this.OncodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleSpecific", DbType="Bit NOT NULL")]
		public bool vehicleSpecific
		{
			get
			{
				return this._vehicleSpecific;
			}
			set
			{
				if ((this._vehicleSpecific != value))
				{
					this.OnvehicleSpecificChanging(value);
					this.SendPropertyChanging();
					this._vehicleSpecific = value;
					this.SendPropertyChanged("vehicleSpecific");
					this.OnvehicleSpecificChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ContentBridge", Storage="_ContentBridges", ThisKey="catID", OtherKey="catID")]
		public EntitySet<ContentBridge> ContentBridges
		{
			get
			{
				return this._ContentBridges;
			}
			set
			{
				this._ContentBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CatPart", Storage="_CatParts", ThisKey="catID", OtherKey="catID")]
		public EntitySet<CatPart> CatParts
		{
			get
			{
				return this._CatParts;
			}
			set
			{
				this._CatParts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_CatParts(CatPart entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CatParts(CatPart entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehiclePart")]
	public partial class VehiclePart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vPartID;
		
		private int _vehicleID;
		
		private int _partID;
		
		private string _drilling;
		
		private string _exposed;
		
		private System.Nullable<int> _installTime;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Vehicle> _Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvPartIDChanging(int value);
    partial void OnvPartIDChanged();
    partial void OnvehicleIDChanging(int value);
    partial void OnvehicleIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OndrillingChanging(string value);
    partial void OndrillingChanged();
    partial void OnexposedChanging(string value);
    partial void OnexposedChanged();
    partial void OninstallTimeChanging(System.Nullable<int> value);
    partial void OninstallTimeChanged();
    #endregion
		
		public VehiclePart()
		{
			this._Part = default(EntityRef<Part>);
			this._Vehicle = default(EntityRef<Vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vPartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vPartID
		{
			get
			{
				return this._vPartID;
			}
			set
			{
				if ((this._vPartID != value))
				{
					this.OnvPartIDChanging(value);
					this.SendPropertyChanging();
					this._vPartID = value;
					this.SendPropertyChanged("vPartID");
					this.OnvPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleID", DbType="Int NOT NULL")]
		public int vehicleID
		{
			get
			{
				return this._vehicleID;
			}
			set
			{
				if ((this._vehicleID != value))
				{
					if (this._Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehicleIDChanging(value);
					this.SendPropertyChanging();
					this._vehicleID = value;
					this.SendPropertyChanged("vehicleID");
					this.OnvehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drilling", DbType="VarChar(100)")]
		public string drilling
		{
			get
			{
				return this._drilling;
			}
			set
			{
				if ((this._drilling != value))
				{
					this.OndrillingChanging(value);
					this.SendPropertyChanging();
					this._drilling = value;
					this.SendPropertyChanged("drilling");
					this.OndrillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exposed", DbType="VarChar(100)")]
		public string exposed
		{
			get
			{
				return this._exposed;
			}
			set
			{
				if ((this._exposed != value))
				{
					this.OnexposedChanging(value);
					this.SendPropertyChanging();
					this._exposed = value;
					this.SendPropertyChanged("exposed");
					this.OnexposedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_installTime", DbType="Int")]
		public System.Nullable<int> installTime
		{
			get
			{
				return this._installTime;
			}
			set
			{
				if ((this._installTime != value))
				{
					this.OninstallTimeChanging(value);
					this.SendPropertyChanging();
					this._installTime = value;
					this.SendPropertyChanged("installTime");
					this.OninstallTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_VehiclePart", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.VehicleParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.VehicleParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_VehiclePart", Storage="_Vehicle", ThisKey="vehicleID", OtherKey="vehicleID", IsForeignKey=true)]
		public Vehicle Vehicle
		{
			get
			{
				return this._Vehicle.Entity;
			}
			set
			{
				Vehicle previousValue = this._Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicle.Entity = null;
						previousValue.VehicleParts.Remove(this);
					}
					this._Vehicle.Entity = value;
					if ((value != null))
					{
						value.VehicleParts.Add(this);
						this._vehicleID = value.vehicleID;
					}
					else
					{
						this._vehicleID = default(int);
					}
					this.SendPropertyChanged("Vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatPart")]
	public partial class CatPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catPartID;
		
		private int _catID;
		
		private int _partID;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatPartIDChanging(int value);
    partial void OncatPartIDChanged();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    #endregion
		
		public CatPart()
		{
			this._Category = default(EntityRef<Category>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catPartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int catPartID
		{
			get
			{
				return this._catPartID;
			}
			set
			{
				if ((this._catPartID != value))
				{
					this.OncatPartIDChanging(value);
					this.SendPropertyChanging();
					this._catPartID = value;
					this.SendPropertyChanged("catPartID");
					this.OncatPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int NOT NULL")]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CatPart", Storage="_Category", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CatParts.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CatParts.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_CatPart", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.CatParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.CatParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Model")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _modelID;
		
		private string _model1;
		
		private EntitySet<Vehicle> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmodelIDChanging(int value);
    partial void OnmodelIDChanged();
    partial void Onmodel1Changing(string value);
    partial void Onmodel1Changed();
    #endregion
		
		public Model()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int modelID
		{
			get
			{
				return this._modelID;
			}
			set
			{
				if ((this._modelID != value))
				{
					this.OnmodelIDChanging(value);
					this.SendPropertyChanging();
					this._modelID = value;
					this.SendPropertyChanged("modelID");
					this.OnmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="model", Storage="_model1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string model1
		{
			get
			{
				return this._model1;
			}
			set
			{
				if ((this._model1 != value))
				{
					this.Onmodel1Changing(value);
					this.SendPropertyChanging();
					this._model1 = value;
					this.SendPropertyChanged("model1");
					this.Onmodel1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Vehicle", Storage="_Vehicles", ThisKey="modelID", OtherKey="modelID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Make")]
	public partial class Make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _makeID;
		
		private string _make1;
		
		private EntitySet<Vehicle> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmakeIDChanging(int value);
    partial void OnmakeIDChanged();
    partial void Onmake1Changing(string value);
    partial void Onmake1Changed();
    #endregion
		
		public Make()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int makeID
		{
			get
			{
				return this._makeID;
			}
			set
			{
				if ((this._makeID != value))
				{
					this.OnmakeIDChanging(value);
					this.SendPropertyChanging();
					this._makeID = value;
					this.SendPropertyChanged("makeID");
					this.OnmakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="make", Storage="_make1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string make1
		{
			get
			{
				return this._make1;
			}
			set
			{
				if ((this._make1 != value))
				{
					this.Onmake1Changing(value);
					this.SendPropertyChanging();
					this._make1 = value;
					this.SendPropertyChanged("make1");
					this.Onmake1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_Vehicle", Storage="_Vehicles", ThisKey="makeID", OtherKey="makeID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Make = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Style")]
	public partial class Style : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _styleID;
		
		private string _style1;
		
		private int _aaiaID;
		
		private EntitySet<Vehicle> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstyleIDChanging(int value);
    partial void OnstyleIDChanged();
    partial void Onstyle1Changing(string value);
    partial void Onstyle1Changed();
    partial void OnaaiaIDChanging(int value);
    partial void OnaaiaIDChanged();
    #endregion
		
		public Style()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_styleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int styleID
		{
			get
			{
				return this._styleID;
			}
			set
			{
				if ((this._styleID != value))
				{
					this.OnstyleIDChanging(value);
					this.SendPropertyChanging();
					this._styleID = value;
					this.SendPropertyChanged("styleID");
					this.OnstyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="style", Storage="_style1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string style1
		{
			get
			{
				return this._style1;
			}
			set
			{
				if ((this._style1 != value))
				{
					this.Onstyle1Changing(value);
					this.SendPropertyChanging();
					this._style1 = value;
					this.SendPropertyChanged("style1");
					this.Onstyle1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aaiaID", DbType="Int NOT NULL")]
		public int aaiaID
		{
			get
			{
				return this._aaiaID;
			}
			set
			{
				if ((this._aaiaID != value))
				{
					this.OnaaiaIDChanging(value);
					this.SendPropertyChanging();
					this._aaiaID = value;
					this.SendPropertyChanged("aaiaID");
					this.OnaaiaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Style_Vehicle", Storage="_Vehicles", ThisKey="styleID", OtherKey="styleID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Style = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Style = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Year")]
	public partial class Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _yearID;
		
		private double _year1;
		
		private EntitySet<Vehicle> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnyearIDChanging(int value);
    partial void OnyearIDChanged();
    partial void Onyear1Changing(double value);
    partial void Onyear1Changed();
    #endregion
		
		public Year()
		{
			this._Vehicles = new EntitySet<Vehicle>(new Action<Vehicle>(this.attach_Vehicles), new Action<Vehicle>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int yearID
		{
			get
			{
				return this._yearID;
			}
			set
			{
				if ((this._yearID != value))
				{
					this.OnyearIDChanging(value);
					this.SendPropertyChanging();
					this._yearID = value;
					this.SendPropertyChanged("yearID");
					this.OnyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="year", Storage="_year1", DbType="Float NOT NULL")]
		public double year1
		{
			get
			{
				return this._year1;
			}
			set
			{
				if ((this._year1 != value))
				{
					this.Onyear1Changing(value);
					this.SendPropertyChanging();
					this._year1 = value;
					this.SendPropertyChanged("year1");
					this.Onyear1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_Vehicle", Storage="_Vehicles", ThisKey="yearID", OtherKey="yearID")]
		public EntitySet<Vehicle> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Vehicles(Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicle")]
	public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicleID;
		
		private int _yearID;
		
		private int _makeID;
		
		private int _modelID;
		
		private int _styleID;
		
		private System.DateTime _dateAdded;
		
		private EntitySet<VehiclePart> _VehicleParts;
		
		private EntityRef<Make> _Make;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<Style> _Style;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleIDChanging(int value);
    partial void OnvehicleIDChanged();
    partial void OnyearIDChanging(int value);
    partial void OnyearIDChanged();
    partial void OnmakeIDChanging(int value);
    partial void OnmakeIDChanged();
    partial void OnmodelIDChanging(int value);
    partial void OnmodelIDChanged();
    partial void OnstyleIDChanging(int value);
    partial void OnstyleIDChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    #endregion
		
		public Vehicle()
		{
			this._VehicleParts = new EntitySet<VehiclePart>(new Action<VehiclePart>(this.attach_VehicleParts), new Action<VehiclePart>(this.detach_VehicleParts));
			this._Make = default(EntityRef<Make>);
			this._Model = default(EntityRef<Model>);
			this._Style = default(EntityRef<Style>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vehicleID
		{
			get
			{
				return this._vehicleID;
			}
			set
			{
				if ((this._vehicleID != value))
				{
					this.OnvehicleIDChanging(value);
					this.SendPropertyChanging();
					this._vehicleID = value;
					this.SendPropertyChanged("vehicleID");
					this.OnvehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearID", DbType="Int NOT NULL")]
		public int yearID
		{
			get
			{
				return this._yearID;
			}
			set
			{
				if ((this._yearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnyearIDChanging(value);
					this.SendPropertyChanging();
					this._yearID = value;
					this.SendPropertyChanged("yearID");
					this.OnyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeID", DbType="Int NOT NULL")]
		public int makeID
		{
			get
			{
				return this._makeID;
			}
			set
			{
				if ((this._makeID != value))
				{
					if (this._Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmakeIDChanging(value);
					this.SendPropertyChanging();
					this._makeID = value;
					this.SendPropertyChanged("makeID");
					this.OnmakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelID", DbType="Int NOT NULL")]
		public int modelID
		{
			get
			{
				return this._modelID;
			}
			set
			{
				if ((this._modelID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodelIDChanging(value);
					this.SendPropertyChanging();
					this._modelID = value;
					this.SendPropertyChanged("modelID");
					this.OnmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_styleID", DbType="Int NOT NULL")]
		public int styleID
		{
			get
			{
				return this._styleID;
			}
			set
			{
				if ((this._styleID != value))
				{
					if (this._Style.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstyleIDChanging(value);
					this.SendPropertyChanging();
					this._styleID = value;
					this.SendPropertyChanged("styleID");
					this.OnstyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_VehiclePart", Storage="_VehicleParts", ThisKey="vehicleID", OtherKey="vehicleID")]
		public EntitySet<VehiclePart> VehicleParts
		{
			get
			{
				return this._VehicleParts;
			}
			set
			{
				this._VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_Vehicle", Storage="_Make", ThisKey="makeID", OtherKey="makeID", IsForeignKey=true)]
		public Make Make
		{
			get
			{
				return this._Make.Entity;
			}
			set
			{
				Make previousValue = this._Make.Entity;
				if (((previousValue != value) 
							|| (this._Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Make.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Make.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._makeID = value.makeID;
					}
					else
					{
						this._makeID = default(int);
					}
					this.SendPropertyChanged("Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Vehicle", Storage="_Model", ThisKey="modelID", OtherKey="modelID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._modelID = value.modelID;
					}
					else
					{
						this._modelID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Style_Vehicle", Storage="_Style", ThisKey="styleID", OtherKey="styleID", IsForeignKey=true)]
		public Style Style
		{
			get
			{
				return this._Style.Entity;
			}
			set
			{
				Style previousValue = this._Style.Entity;
				if (((previousValue != value) 
							|| (this._Style.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Style.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Style.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._styleID = value.styleID;
					}
					else
					{
						this._styleID = default(int);
					}
					this.SendPropertyChanged("Style");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_Vehicle", Storage="_Year", ThisKey="yearID", OtherKey="yearID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._yearID = value.yearID;
					}
					else
					{
						this._yearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = this;
		}
		
		private void detach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelatedPart")]
	public partial class RelatedPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _relPartID;
		
		private int _partID;
		
		private long _relatedID;
		
		private int _rTypeID;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrelPartIDChanging(int value);
    partial void OnrelPartIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnrelatedIDChanging(long value);
    partial void OnrelatedIDChanged();
    partial void OnrTypeIDChanging(int value);
    partial void OnrTypeIDChanged();
    #endregion
		
		public RelatedPart()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relPartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int relPartID
		{
			get
			{
				return this._relPartID;
			}
			set
			{
				if ((this._relPartID != value))
				{
					this.OnrelPartIDChanging(value);
					this.SendPropertyChanging();
					this._relPartID = value;
					this.SendPropertyChanged("relPartID");
					this.OnrelPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relatedID", DbType="BigInt NOT NULL")]
		public long relatedID
		{
			get
			{
				return this._relatedID;
			}
			set
			{
				if ((this._relatedID != value))
				{
					this.OnrelatedIDChanging(value);
					this.SendPropertyChanging();
					this._relatedID = value;
					this.SendPropertyChanged("relatedID");
					this.OnrelatedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rTypeID", DbType="Int NOT NULL")]
		public int rTypeID
		{
			get
			{
				return this._rTypeID;
			}
			set
			{
				if ((this._rTypeID != value))
				{
					this.OnrTypeIDChanging(value);
					this.SendPropertyChanging();
					this._rTypeID = value;
					this.SendPropertyChanged("rTypeID");
					this.OnrTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_RelatedPart", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.RelatedParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.RelatedParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _classID;
		
		private string _class1;
		
		private string _image;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclassIDChanging(int value);
    partial void OnclassIDChanged();
    partial void Onclass1Changing(string value);
    partial void Onclass1Changed();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    #endregion
		
		public Class()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="class", Storage="_class1", DbType="VarChar(255)")]
		public string class1
		{
			get
			{
				return this._class1;
			}
			set
			{
				if ((this._class1 != value))
				{
					this.Onclass1Changing(value);
					this.SendPropertyChanging();
					this._class1 = value;
					this.SendPropertyChanged("class1");
					this.Onclass1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(255)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Class", Storage="_Part", ThisKey="classID", OtherKey="classID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._classID = value.classID;
					}
					else
					{
						this._classID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerUser")]
	public partial class CustomerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private System.Nullable<int> _customerID;
		
		private System.DateTime _date_added;
		
		private bool _active;
		
		private int _locationID;
		
		private bool _isSudo;
		
		private int _cust_ID;
		
		private System.Nullable<bool> _NotCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OncustomerIDChanging(System.Nullable<int> value);
    partial void OncustomerIDChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnlocationIDChanging(int value);
    partial void OnlocationIDChanged();
    partial void OnisSudoChanging(bool value);
    partial void OnisSudoChanged();
    partial void Oncust_IDChanging(int value);
    partial void Oncust_IDChanged();
    partial void OnNotCustomerChanging(System.Nullable<bool> value);
    partial void OnNotCustomerChanged();
    #endregion
		
		public CustomerUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int")]
		public System.Nullable<int> customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationID", DbType="Int NOT NULL")]
		public int locationID
		{
			get
			{
				return this._locationID;
			}
			set
			{
				if ((this._locationID != value))
				{
					this.OnlocationIDChanging(value);
					this.SendPropertyChanging();
					this._locationID = value;
					this.SendPropertyChanged("locationID");
					this.OnlocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSudo", DbType="Bit NOT NULL")]
		public bool isSudo
		{
			get
			{
				return this._isSudo;
			}
			set
			{
				if ((this._isSudo != value))
				{
					this.OnisSudoChanging(value);
					this.SendPropertyChanging();
					this._isSudo = value;
					this.SendPropertyChanged("isSudo");
					this.OnisSudoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_ID", DbType="Int NOT NULL")]
		public int cust_ID
		{
			get
			{
				return this._cust_ID;
			}
			set
			{
				if ((this._cust_ID != value))
				{
					this.Oncust_IDChanging(value);
					this.SendPropertyChanging();
					this._cust_ID = value;
					this.SendPropertyChanged("cust_ID");
					this.Oncust_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotCustomer", DbType="Bit")]
		public System.Nullable<bool> NotCustomer
		{
			get
			{
				return this._NotCustomer;
			}
			set
			{
				if ((this._NotCustomer != value))
				{
					this.OnNotCustomerChanging(value);
					this.SendPropertyChanging();
					this._NotCustomer = value;
					this.SendPropertyChanged("NotCustomer");
					this.OnNotCustomerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerLoadsheets")]
	public partial class CustomerLoadsheet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _cust_ID;
		
		private string _name;
		
		private EntitySet<CustomerLoadsheetField> _CustomerLoadsheetFields;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncust_IDChanging(int value);
    partial void Oncust_IDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public CustomerLoadsheet()
		{
			this._CustomerLoadsheetFields = new EntitySet<CustomerLoadsheetField>(new Action<CustomerLoadsheetField>(this.attach_CustomerLoadsheetFields), new Action<CustomerLoadsheetField>(this.detach_CustomerLoadsheetFields));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_ID", DbType="Int NOT NULL")]
		public int cust_ID
		{
			get
			{
				return this._cust_ID;
			}
			set
			{
				if ((this._cust_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncust_IDChanging(value);
					this.SendPropertyChanging();
					this._cust_ID = value;
					this.SendPropertyChanged("cust_ID");
					this.Oncust_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLoadsheet_CustomerLoadsheetField", Storage="_CustomerLoadsheetFields", ThisKey="id", OtherKey="loadsheedID")]
		public EntitySet<CustomerLoadsheetField> CustomerLoadsheetFields
		{
			get
			{
				return this._CustomerLoadsheetFields;
			}
			set
			{
				this._CustomerLoadsheetFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerLoadsheet", Storage="_Customer", ThisKey="cust_ID", OtherKey="cust_id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerLoadsheets.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerLoadsheets.Add(this);
						this._cust_ID = value.cust_id;
					}
					else
					{
						this._cust_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerLoadsheetFields(CustomerLoadsheetField entity)
		{
			this.SendPropertyChanging();
			entity.CustomerLoadsheet = this;
		}
		
		private void detach_CustomerLoadsheetFields(CustomerLoadsheetField entity)
		{
			this.SendPropertyChanging();
			entity.CustomerLoadsheet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerLoadsheetFields")]
	public partial class CustomerLoadsheetField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _loadsheedID;
		
		private int _fieldID;
		
		private System.Nullable<int> _displayOrder;
		
		private EntityRef<LoadsheetField> _LoadsheetFields;
		
		private EntityRef<CustomerLoadsheet> _CustomerLoadsheet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnloadsheedIDChanging(int value);
    partial void OnloadsheedIDChanged();
    partial void OnfieldIDChanging(int value);
    partial void OnfieldIDChanged();
    partial void OndisplayOrderChanging(System.Nullable<int> value);
    partial void OndisplayOrderChanged();
    #endregion
		
		public CustomerLoadsheetField()
		{
			this._LoadsheetFields = default(EntityRef<LoadsheetField>);
			this._CustomerLoadsheet = default(EntityRef<CustomerLoadsheet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loadsheedID", DbType="Int NOT NULL")]
		public int loadsheedID
		{
			get
			{
				return this._loadsheedID;
			}
			set
			{
				if ((this._loadsheedID != value))
				{
					if (this._CustomerLoadsheet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnloadsheedIDChanging(value);
					this.SendPropertyChanging();
					this._loadsheedID = value;
					this.SendPropertyChanged("loadsheedID");
					this.OnloadsheedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fieldID", DbType="Int NOT NULL")]
		public int fieldID
		{
			get
			{
				return this._fieldID;
			}
			set
			{
				if ((this._fieldID != value))
				{
					this.OnfieldIDChanging(value);
					this.SendPropertyChanging();
					this._fieldID = value;
					this.SendPropertyChanged("fieldID");
					this.OnfieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayOrder", DbType="Int")]
		public System.Nullable<int> displayOrder
		{
			get
			{
				return this._displayOrder;
			}
			set
			{
				if ((this._displayOrder != value))
				{
					this.OndisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._displayOrder = value;
					this.SendPropertyChanged("displayOrder");
					this.OndisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLoadsheetField_LoadsheetField", Storage="_LoadsheetFields", ThisKey="fieldID", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public LoadsheetField LoadsheetFields
		{
			get
			{
				return this._LoadsheetFields.Entity;
			}
			set
			{
				LoadsheetField previousValue = this._LoadsheetFields.Entity;
				if (((previousValue != value) 
							|| (this._LoadsheetFields.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoadsheetFields.Entity = null;
						previousValue.CustomerLoadsheetField = null;
					}
					this._LoadsheetFields.Entity = value;
					if ((value != null))
					{
						value.CustomerLoadsheetField = this;
					}
					this.SendPropertyChanged("LoadsheetFields");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLoadsheet_CustomerLoadsheetField", Storage="_CustomerLoadsheet", ThisKey="loadsheedID", OtherKey="id", IsForeignKey=true)]
		public CustomerLoadsheet CustomerLoadsheet
		{
			get
			{
				return this._CustomerLoadsheet.Entity;
			}
			set
			{
				CustomerLoadsheet previousValue = this._CustomerLoadsheet.Entity;
				if (((previousValue != value) 
							|| (this._CustomerLoadsheet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerLoadsheet.Entity = null;
						previousValue.CustomerLoadsheetFields.Remove(this);
					}
					this._CustomerLoadsheet.Entity = value;
					if ((value != null))
					{
						value.CustomerLoadsheetFields.Add(this);
						this._loadsheedID = value.id;
					}
					else
					{
						this._loadsheedID = default(int);
					}
					this.SendPropertyChanged("CustomerLoadsheet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoadsheetFields")]
	public partial class LoadsheetField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _defaultValue;
		
		private string _description;
		
		private int _loadsheetID;
		
		private EntityRef<CustomerLoadsheetField> _CustomerLoadsheetField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndefaultValueChanging(string value);
    partial void OndefaultValueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnloadsheetIDChanging(int value);
    partial void OnloadsheetIDChanged();
    #endregion
		
		public LoadsheetField()
		{
			this._CustomerLoadsheetField = default(EntityRef<CustomerLoadsheetField>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._CustomerLoadsheetField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_defaultValue", DbType="VarChar(255)")]
		public string defaultValue
		{
			get
			{
				return this._defaultValue;
			}
			set
			{
				if ((this._defaultValue != value))
				{
					this.OndefaultValueChanging(value);
					this.SendPropertyChanging();
					this._defaultValue = value;
					this.SendPropertyChanged("defaultValue");
					this.OndefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(255)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loadsheetID", DbType="Int NOT NULL")]
		public int loadsheetID
		{
			get
			{
				return this._loadsheetID;
			}
			set
			{
				if ((this._loadsheetID != value))
				{
					this.OnloadsheetIDChanging(value);
					this.SendPropertyChanging();
					this._loadsheetID = value;
					this.SendPropertyChanged("loadsheetID");
					this.OnloadsheetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLoadsheetField_LoadsheetField", Storage="_CustomerLoadsheetField", ThisKey="id", OtherKey="fieldID", IsForeignKey=true)]
		public CustomerLoadsheetField CustomerLoadsheetField
		{
			get
			{
				return this._CustomerLoadsheetField.Entity;
			}
			set
			{
				CustomerLoadsheetField previousValue = this._CustomerLoadsheetField.Entity;
				if (((previousValue != value) 
							|| (this._CustomerLoadsheetField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerLoadsheetField.Entity = null;
						previousValue.LoadsheetFields = null;
					}
					this._CustomerLoadsheetField.Entity = value;
					if ((value != null))
					{
						value.LoadsheetFields = this;
						this._id = value.fieldID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("CustomerLoadsheetField");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
